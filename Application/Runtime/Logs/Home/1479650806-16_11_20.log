[ 2016-11-20T18:23:19+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000582s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001042s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0075s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 0,10   [ RunTime:0.0012s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0004s ]

[ 2016-11-20T18:23:24+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000626s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001076s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0040s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 10,10   [ RunTime:0.0012s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:23:33+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000403s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000758s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0037s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:23:49+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000383s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000698s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0048s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0043s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 86  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0042s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 49  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('自定义Android IOC框架','86','49','<p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; IOC-控制反转（Inversion of Control，英文缩写为IoC）是一个重要的面向对象编程的法则来削减计算机程序的耦合问题，也是轻量级的<a href=\"http://lib.csdn.net/base/javaee\" class=\"replace_word\" title=\"Java EE知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">spring</a>框架的核心。 控制反转一般分为两种类型，依赖注入（Dependency Injection，简称DI）和依赖查找（Dependency Lookup）。这段百度对IOC框架的解释，对于<a href=\"http://lib.csdn.net/base/javaee\" class=\"replace_word\" title=\"Java EE知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Java</a>开发者来讲最著名的IOC框架莫过于Spring，而在我们的<a href=\"http://lib.csdn.net/base/android\" class=\"replace_word\" title=\"Android知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Android</a>开发中，IOC的使用更为常见，比如大家经常使用的XUtil、butterKnife、EventBus、dagger、dagger2、otto等等，这些第三方库几乎都使用了IOC思想，举个例子给大家：&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;通常我们在Activity中获取一个图片组件采用如下方法：</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">ImageView&nbsp;img;
&nbsp;&nbsp;&nbsp;&nbsp;img&nbsp;=&nbsp;findViewById(R.id.img);1212</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;而使用IOC框架给我提供了一种基于注解的实现方式：</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">@ViewInject(R.id.img)
&nbsp;ImageView&nbsp;img;1212</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;可以看出这种方式似乎更加简洁&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;其实这正是我本篇博文想给大家介绍的，IOC框架可以：</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">1.让代码更加简洁
2.让模板式的代码更少，减少重复工作
3.把更多的精力放到业务逻辑上
4.解耦合12341234</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;下面我给大家详细讲解下如何自定义IOC框架，在Android中我们使用IOC框架更多是为了方便注入所有的控件，比如说布局文件。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>自定义注解工具库</h2><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>整体库结构</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161018165608392\" alt=\"这里写图片描述\" title=\"\"/></p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>定义注解工具类</h3><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>布局注解</h4><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">/**
&nbsp;*&nbsp;
&nbsp;*&nbsp;功能：自定义ContentView注解
&nbsp;*&nbsp;作者：猴子搬来的救兵
&nbsp;*&nbsp;博客地址：http://blog.csdn.net/mynameishuangshuai
&nbsp;*&nbsp;日期：2016年10月14日
&nbsp;*/@Retention(RetentionPolicy.RUNTIME)@Target(ElementType.TYPE)//&nbsp;使用在类上面public&nbsp;@interface&nbsp;CastielContentViewInject&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;value();//&nbsp;定义一个方法去拿注解里面的参数}123456789101112123456789101112</pre><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>组件注解</h4><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">/**
&nbsp;*&nbsp;
&nbsp;*&nbsp;功能：自定义View注解
&nbsp;*&nbsp;作者：猴子搬来的救兵
&nbsp;*&nbsp;博客地址：http://blog.csdn.net/mynameishuangshuai
&nbsp;*&nbsp;日期：2016年10月14日
&nbsp;*/@Retention(RetentionPolicy.RUNTIME)@Target(ElementType.FIELD)//&nbsp;使用在属性字段上public&nbsp;@interface&nbsp;CastielViewInject&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;value();12345678910111234567891011</pre><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>事件注解</h4><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">/**
&nbsp;*&nbsp;
&nbsp;*&nbsp;功能：自定义OnClick注解
&nbsp;*&nbsp;作者：猴子搬来的救兵
&nbsp;*&nbsp;博客地址：http://blog.csdn.net/mynameishuangshuai
&nbsp;*&nbsp;日期：2016年10月14日
&nbsp;*/@Retention(RetentionPolicy.RUNTIME)@Target(ElementType.METHOD)//&nbsp;使用在方法上面@CastielEventBase(listenerSetter=&quot;setOnClickListener&quot;,listenerType=View.OnClickListener.class,callbackMethod=&quot;onClick&quot;)public&nbsp;@interface&nbsp;CastielOnClickInject&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;由于有很多个点击事件，所以要搞个数组
&nbsp;&nbsp;&nbsp;&nbsp;int[]&nbsp;value();
}123456789101112131415123456789101112131415</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">在定义事件注解类时，我们需要在这个注解的基础上再定义一个注解，用于传递事件调用所需的三个重要元素setOnClickListener;传接口类型；回调方法名字</p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>事件注解基类</h4><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;@interface&nbsp;CastielEventBase&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;1.设置事件监听的方法,配置方法的名字
&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;listenerSetter();&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;2.事件监听的类型
&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&gt;&nbsp;listenerType();&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;3.回调方法的名字
&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;callbackMethod();
}123456789123456789</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>定义注入工具类</h3><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">/**
&nbsp;*&nbsp;功能：InjectUtils注入工具类
&nbsp;*&nbsp;作者：猴子搬来的救兵
&nbsp;*&nbsp;博客地址：http://blog.csdn.net/mynameishuangshuai
&nbsp;*&nbsp;日期：2016/10/13
&nbsp;*/public&nbsp;class&nbsp;InjectUtils&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;inject(Activity&nbsp;activity)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;注入布局
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;injectLayout(activity);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;注入视图
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;injectViews(activity);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;注入事件
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;injectEvents(activity);

&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;void&nbsp;injectEvents(Activity&nbsp;activity)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;获取方法上面的注解
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&nbsp;extends&nbsp;Activity&gt;&nbsp;myClass&nbsp;=&nbsp;activity.getClass();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method&nbsp;myMethod[]&nbsp;=&nbsp;myClass.getDeclaredMethods();//&nbsp;先拿到全部方法&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Method&nbsp;method&nbsp;:&nbsp;myMethod)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Annotation[]&nbsp;annotations&nbsp;=&nbsp;method.getAnnotations();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Annotation&nbsp;annotation&nbsp;:&nbsp;annotations)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&nbsp;extends&nbsp;Annotation&gt;&nbsp;annotationType&nbsp;=&nbsp;annotation.annotationType();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CastielEventBase&nbsp;ceb&nbsp;=&nbsp;annotationType.getAnnotation(CastielEventBase.class);//&nbsp;拿到注解里面的注解
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;得到事件的三要素&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;listenerSetter&nbsp;=&nbsp;ceb.listenerSetter();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&gt;&nbsp;listenerType&nbsp;=&nbsp;ceb.listenerType();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;callbackMethod&nbsp;=&nbsp;ceb.callbackMethod();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;获取注解事件的控件对象Button
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method&nbsp;valueMethod&nbsp;=&nbsp;annotationType.getDeclaredMethod(&quot;value&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int[]&nbsp;viewIds&nbsp;=&nbsp;(int[])valueMethod.invoke(annotation);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;viewId&nbsp;:&nbsp;viewIds)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;View&nbsp;view&nbsp;=&nbsp;activity.findViewById(viewId);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;反射setOnClickListener方法,这里要用到代理
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method&nbsp;setListenerMethod&nbsp;=&nbsp;view.getClass().getMethod(listenerSetter,&nbsp;listenerType);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;String,&nbsp;Method&gt;&nbsp;methodMap&nbsp;=&nbsp;new&nbsp;HashMap&lt;String,&nbsp;Method&gt;();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;methodMap.put(callbackMethod,&nbsp;method);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InvocationHandler&nbsp;invocationHandler&nbsp;=&nbsp;new&nbsp;ListenerInvocationHandler(activity,&nbsp;methodMap);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;newProxyInstance&nbsp;=&nbsp;Proxy.newProxyInstance(listenerType.getClassLoader(),&nbsp;new&nbsp;Class&lt;?&gt;[]{listenerType},&nbsp;invocationHandler);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setListenerMethod.invoke(view&nbsp;,&nbsp;newProxyInstance);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IllegalAccessException&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IllegalArgumentException&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(InvocationTargetException&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(NoSuchMethodException&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;void&nbsp;injectViews(Activity&nbsp;activity)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;获取每一个属性上的注解
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&nbsp;extends&nbsp;Activity&gt;&nbsp;myClass&nbsp;=&nbsp;activity.getClass();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Field[]&nbsp;myFields&nbsp;=&nbsp;myClass.getDeclaredFields();//&nbsp;先拿到里面所有的成员变量&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Field&nbsp;field&nbsp;:&nbsp;myFields)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CastielViewInject&nbsp;myView&nbsp;=&nbsp;field.getAnnotation(CastielViewInject.class);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(myView&nbsp;!=&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;value&nbsp;=&nbsp;myView.value();//&nbsp;拿到属性id
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;View&nbsp;view&nbsp;=&nbsp;activity.findViewById(value);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;将view赋值给类里面的属性
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;field.setAccessible(true);//&nbsp;为了防止其实私有的的，需要设置允许访问
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;field.set(activity,view);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IllegalAccessException&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IllegalArgumentException&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;void&nbsp;injectLayout(Activity&nbsp;activity)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;获取我们自定义类CastielContentViewInject上面的注解
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&nbsp;extends&nbsp;Activity&gt;&nbsp;myClass&nbsp;=&nbsp;activity.getClass();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CastielContentViewInject&nbsp;myContentView&nbsp;=&nbsp;myClass.getAnnotation(CastielContentViewInject.class);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;myLayoutResId&nbsp;=&nbsp;myContentView.value();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;activity.setContentView(myLayoutResId);
&nbsp;&nbsp;&nbsp;&nbsp;}

}1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909112345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091</pre><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>使用代理模式</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">为了将我们的方法点击方法代替系统的点击方法，我们使用动态代理的方法去更替系统的点击事件</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;class&nbsp;ListenerInvocationHandler&nbsp;implements&nbsp;InvocationHandler&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;Activity&nbsp;activity;
&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;String,Method&gt;&nbsp;methodMap;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;ListenerInvocationHandler(Activity&nbsp;activity,Map&lt;String,Method&gt;&nbsp;methodMap)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.activity&nbsp;=&nbsp;activity;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.methodMap&nbsp;=&nbsp;methodMap;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(&quot;castiel&quot;,&nbsp;&quot;打印方法Map：&quot;&nbsp;+&nbsp;methodMap.toString());
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Object&nbsp;invoke(Object&nbsp;proxy,&nbsp;Method&nbsp;method,&nbsp;Object[]&nbsp;args)&nbsp;throws&nbsp;Throwable&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;method就是我们的CastielOnClickInject
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;name&nbsp;=&nbsp;method.getName();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(&quot;castiel&quot;,&nbsp;&quot;打印方法name：&quot;&nbsp;+&nbsp;name);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method&nbsp;mtd&nbsp;=&nbsp;methodMap.get(name);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(mtd&nbsp;!=&nbsp;null)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;mtd.invoke(activity,&nbsp;args);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;method.invoke(activity,&nbsp;args);
&nbsp;&nbsp;&nbsp;&nbsp;}

}123456789101112131415161718192021222324123456789101112131415161718192021222324</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>最后封装Activity基类</h3><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">/**
&nbsp;*&nbsp;
&nbsp;*&nbsp;功能：封装的Activity基类，引入我们自定义的注入工具类
&nbsp;*&nbsp;作者：猴子搬来的救兵
&nbsp;*&nbsp;博客地址：http://blog.csdn.net/mynameishuangshuai
&nbsp;*&nbsp;日期：2016年10月14日
&nbsp;*/public&nbsp;class&nbsp;BaseActivity&nbsp;extends&nbsp;Activity{

&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;void&nbsp;onCreate(Bundle&nbsp;savedInstanceState)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.onCreate(savedInstanceState);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InjectUtils.inject(this);
&nbsp;&nbsp;&nbsp;&nbsp;}
}1234567891011121314151612345678910111213141516</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>使用自定义的注解工具库</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">MainActivity.java</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">import&nbsp;com.castiel.ioc.activity.BaseActivity;import&nbsp;com.castiel.ioc.annotation.CastielContentViewInject;import&nbsp;com.castiel.ioc.annotation.CastielOnClickInject;import&nbsp;com.castiel.ioc.annotation.CastielViewInject;import&nbsp;android.os.Bundle;import&nbsp;android.widget.Button;import&nbsp;android.widget.TextView;@CastielContentViewInject(R.layout.activity_main)public&nbsp;class&nbsp;MainActivity&nbsp;extends&nbsp;BaseActivity&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;@CastielViewInject(R.id.tv)&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;TextView&nbsp;tv;&nbsp;&nbsp;&nbsp;&nbsp;@CastielViewInject(R.id.btn)&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Button&nbsp;btn;&nbsp;&nbsp;&nbsp;&nbsp;@CastielOnClickInject({R.id.btn})&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;changText(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tv.setText(&quot;猴子搬来的救兵&nbsp;http://blog.csdn.net/mynameishuangshuai&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;void&nbsp;onCreate(Bundle&nbsp;savedInstanceState)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.onCreate(savedInstanceState);
&nbsp;&nbsp;&nbsp;&nbsp;}
}123456789101112131415161718192021222324252627123456789101112131415161718192021222324252627</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">布局文件</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&lt;RelativeLayout&nbsp;xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
&nbsp;&nbsp;&nbsp;&nbsp;xmlns:tools=&quot;http://schemas.android.com/tools&quot;
&nbsp;&nbsp;&nbsp;&nbsp;android:layout_width=&quot;match_parent&quot;
&nbsp;&nbsp;&nbsp;&nbsp;android:layout_height=&quot;match_parent&quot;&nbsp;&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextView&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:id=&quot;@+id/tv&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_width=&quot;wrap_content&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_height=&quot;wrap_content&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_alignParentTop=&quot;true&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_margin=&quot;20dp&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:text=&quot;Hello&nbsp;world!&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:textSize=&quot;18sp&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;Button&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:id=&quot;@+id/btn&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_width=&quot;wrap_content&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_height=&quot;wrap_content&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_below=&quot;@id/tv&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_margin=&quot;20dp&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:text=&quot;按钮&quot;&nbsp;/&gt;&lt;/RelativeLayout&gt;12345678910111213141516171819202122231234567891011121314151617181920212223</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">当我点击”按钮”，就可以实现TextView文字的切换。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161018171304312\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161018171319227\" alt=\"这里写图片描述\" title=\"\"/></p><p><br/></p>','0','2016-11-20 06:23:49') [ RunTime:0.1217s ]

[ 2016-11-20T18:23:50+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000695s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001332s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0052s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 0,10   [ RunTime:0.0014s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0025s ]

[ 2016-11-20T18:23:59+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000444s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000834s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0035s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:24:15+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000947s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002213s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0041s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0036s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 86  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0040s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 49  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('细说Android框架设计三剑客MVC、MVP和MVVM','86','49','<p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; 最近几年的移动端开发越来越火，功能越来越强大，处理业务越来越复杂，因此对系统扩展性的要求越来越高。而为了更好地进行移动端<a href=\"http://lib.csdn.net/base/architecture\" class=\"replace_word\" title=\"大型网站架构知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">架构</a>设计，我们最常用的就是MVC和MVP，今天本篇博客就和大家一起聊一聊这两种框架设计。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>MVC框架</h2><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>MVC的定义</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;MVC (Model-View-Controller)：M是指逻辑模型，V是指视图模型，C则是控制器。使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式，而C存在的目的则是确保M和V的同步，一旦M改变，V应该同步更新，这与《设计模式》中的观察者模式是完全一样。</p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>为何用MVC</h4><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>从用户的角度出发，用户可以根据自己的需求，选择自己合适的浏览数据的方式。</p></li><li><p>从开发者的角度，MVC把应用程序的逻辑层与界面是完全分开的，这样，界面设计人员可以直接参与到界面开发，程序员就可以把精力放在逻辑层上。而不是像以前那样，设计人员把所有的材料交给开发人员，由开发人员来实现界面。</p></li></ul><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>MVC的通信方式</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161013125145577\" alt=\"这里写图片描述\" title=\"\"/></p><blockquote style=\"box-sizing: border-box; margin: 0px 0px 1.1em; padding: 15px 20px; border-left: 10px solid rgba(128, 128, 128, 0.0745098); background-color: rgba(128, 128, 128, 0.0470588); border-radius: 0px 5px 5px 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; box-sizing: border-box; line-height: 1.25;\">首先，View发送命令到Controller，然后Controller处理完业务逻辑后让Model改变状态，最后由Model将新的数据发送到View，用户得到数据响应。</p></blockquote><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Android中的MVC</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;1.视图层（View）：一般采用XML文件进行界面的描述，使用的时候可以非常方便的引入。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;2.控制层（Controller）：<a href=\"http://lib.csdn.net/base/android\" class=\"replace_word\" title=\"Android知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Android</a>的控制层通常是在Acitvity中实现。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;3.模型层（Model）：对<a href=\"http://lib.csdn.net/base/mysql\" class=\"replace_word\" title=\"MySQL知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">数据库</a>的操作、对网络等的操作都应该在Model里面处理，当然对业务计算等操作也是必须放在的该层的。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>MVP框架</h2><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>MVP的定义</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;MVP (Model-View-Presenter)：MVP其实是由MVC演变而来的，其中的M依然是指逻辑模型，V依然是指视图模型，而P（中间桥梁）则代替了C成为了逻辑控制器的角色。</p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>MVC和MVP到底有啥区别</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;区别就在于MVP中View并不直接使用Model，它们之间的通信是通过Presenter (MVC中的Controller)来进行的，所有的交互都发生在Presenter内部，而在MVC中View会直接从Model中读取数据而不是通过 Controller。我们知道在MVC里，View是可以直接访问Model的。从而，View里会包含Model信息，不可避免的还要包括一些业务逻辑。 在MVC模型里，更关注的Model的不变，而同时有多个对Model的不同显示，即View。所以，在MVC模型里，Model不依赖于View，但是View是依赖于Model的。</p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>MVP的通信方式</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161013130645414\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;首先MVP各部分之间的通信都是双向的，但是唯独View与Model之间是不发生联系的，二者之间的通信都是通过Presenter传递的。在MVP里，应用程序的逻辑主要在Presenter来实现，其中的View是很薄的一层。在这个过程中，View是很简单的，能够把信息显示清楚就可以了。在后面，根据需要再随便更改View，而对Presenter没有任何的影响了。 如果要实现的UI比较复杂，而且相关的显示逻辑还跟Model有关系，就可以在View和Presenter之间放置一个Adapter。由这个 Adapter来访问Model和View，避免两者之间的关联。而同时，因为Adapter实现了View的接口，从而可以保证与Presenter之间接口的不变。这样就可以保证View和Presenter之间接口的简洁，又不失去UI的灵活性。 在MVP模式里，View只应该有简单的Set/Get的方法，用户输入和设置界面显示的内容，除此就不应该有更多的内容，绝不容许直接访问Model–这就是与MVC很大的不同之处。</p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>MVP的优缺点</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://baike.baidu.com/link?url=G4H-c5Q66g5LvbWCAFHKZtjgXYLdt1qrvGG1Ow6GLcC2yFlRPuqcTvVkKBCePMv4tt9Pu424zamf_miMW6z9Hq\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">以下内容来自百度百科</a></p><blockquote style=\"box-sizing: border-box; margin: 0px 0px 1.1em; padding: 15px 20px; border-left: 10px solid rgba(128, 128, 128, 0.0745098); background-color: rgba(128, 128, 128, 0.0470588); border-radius: 0px 5px 5px 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; box-sizing: border-box; line-height: 1.25;\">1、模型与视图完全分离，我们可以修改视图而不影响模型&nbsp;<br/>2、可以更高效地使用模型，因为所有的交互都发生在一个地方——Presenter内部&nbsp;<br/>3、我们可以将一个Presenter用于多个视图，而不需要改变Presenter的逻辑。这个特性非常的有用，因为视图的变化总是比模型的变化频繁。&nbsp;<br/>4、如果我们把逻辑放在Presenter中，那么我们就可以脱离用户接口来<a href=\"http://lib.csdn.net/base/softwaretest\" class=\"replace_word\" title=\"软件测试知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">测试</a>这些逻辑（单元测试）</p></blockquote><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">由于对视图的渲染放在了Presenter中，所以视图和Presenter的交互会过于频繁。还有一点需要明白，如果Presenter过多地渲染了视图，往往会使得它与特定的视图的联系过于紧密。一旦视图需要变更，那么Presenter也需要变更了。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>MVVM框架</h2><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>MVVM的定义</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;MVVM(Model-View-ViewModel)：MVVM和MVP的区别其实不大，只不过是把presenter层换成了ViewModel层，再有就是View层和ViewModel层是相互绑定的关系，当我们更新ViewModel层的数据的时候，View层会相应的更新UI。</p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>MVVM的通信方式</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161013132130244\" alt=\"这里写图片描述\" title=\"\"/>&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;MVVM它采用的是数据绑定（data-binding）方式，而且是双向绑定：View绑定到ViewModel，然后执行一些命令在向它请求一个动作。而反过来，ViewModel跟Model通讯，告诉它更新来响应UI。</p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>MVVM优点</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://baike.baidu.com/link?url=chMojqYWnDGjW3j1DTFQy2wlwJd8nE6UtrPhfgvhB5i24Ru6LHvYA9sGvks5Qnvu6cRucX25-fWh6n84TgZh1a\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">以下内容来自百度百科</a>&nbsp;<br/>MVVM模式和MVC模式一样，主要目的是分离视图（View）和模型（Model），有几大优点</p><blockquote style=\"box-sizing: border-box; margin: 0px 0px 1.1em; padding: 15px 20px; border-left: 10px solid rgba(128, 128, 128, 0.0745098); background-color: rgba(128, 128, 128, 0.0470588); border-radius: 0px 5px 5px 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><ol style=\"box-sizing: border-box;\" class=\" list-paddingleft-2\"><li><p>低耦合。视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的”View”上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。</p></li><li><p>可重用性。你可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑。</p></li><li><p>独立开发。开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计。</p></li><li><p>可测试。界面素来是比较难于测试的，而现在测试可以针对ViewModel来写。</p></li></ol></blockquote><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>MVP案例实践</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;下面我选取MVP框架作为主要案例，给大家讲解如何将一个普通项目改造成MVP框架模式的项目，帮助大家理解MVP框架模式的意义。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>传统项目结构</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161014111206652\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">该项目中我们定义了一个学生信息列表，用来显示图片和文字；项目源码如下：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">MainActivity.<a href=\"http://lib.csdn.net/base/javaee\" class=\"replace_word\" title=\"Java EE知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Java</a></p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">/**
&nbsp;*&nbsp;功能：MainActivity&nbsp;用列表形式实现
&nbsp;*&nbsp;作者：猴子搬来的救兵
&nbsp;*&nbsp;博客地址：http://blog.csdn.net/mynameishuangshuai
&nbsp;*&nbsp;日期：2016/10/01
&nbsp;*/public&nbsp;class&nbsp;MainActivity&nbsp;extends&nbsp;AppCompatActivity&nbsp;implements&nbsp;IStudentView{

&nbsp;&nbsp;&nbsp;&nbsp;ListView&nbsp;myList;&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;void&nbsp;onCreate(Bundle&nbsp;savedInstanceState)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.onCreate(savedInstanceState);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setContentView(R.layout.activity_main);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myList&nbsp;=&nbsp;(ListView)&nbsp;findViewById(R.id.my_list);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myList.setAdapter(new&nbsp;StudentAdapter(MainActivity.this));
&nbsp;&nbsp;&nbsp;&nbsp;}
}12345678910111213141516171234567891011121314151617</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">StudentAdapter.java</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">/**
&nbsp;*&nbsp;功能：StudentAdapter
&nbsp;*&nbsp;作者：猴子搬来的救兵
&nbsp;*&nbsp;博客地址：http://blog.csdn.net/mynameishuangshuai
&nbsp;*&nbsp;日期：2016/10/01
&nbsp;*/public&nbsp;class&nbsp;StudentAdapter&nbsp;extends&nbsp;BaseAdapter&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;LayoutInflater&nbsp;myInflater;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;List&lt;Student&gt;&nbsp;data;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;StudentAdapter(Context&nbsp;context,&nbsp;List&lt;Student&gt;&nbsp;data)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myInflater&nbsp;=&nbsp;LayoutInflater.from(context);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.data&nbsp;=&nbsp;data;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;getCount()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;DataUtils.stuSize();
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Object&nbsp;getItem(int&nbsp;position)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;DataUtils.get(position);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;long&nbsp;getItemId(int&nbsp;position)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;position;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;View&nbsp;getView(int&nbsp;position,&nbsp;View&nbsp;convertView,&nbsp;ViewGroup&nbsp;parent)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;View&nbsp;stuView&nbsp;=&nbsp;myInflater.inflate(R.layout.stu_item,&nbsp;null);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Student&nbsp;student&nbsp;=&nbsp;DataUtils.get(position);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageView&nbsp;imgStu&nbsp;=&nbsp;(ImageView)&nbsp;stuView.findViewById(R.id.img_stu);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imgStu.setImageResource(student.getStuImg());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TextView&nbsp;tvStu&nbsp;=&nbsp;(TextView)&nbsp;stuView.findViewById(R.id.tv_name);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tvStu.setText(student.getName());&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;stuView;
&nbsp;&nbsp;&nbsp;&nbsp;}

}1234567891011121314151617181920212223242526272829303132333435363738394041424312345678910111213141516171819202122232425262728293031323334353637383940414243</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">DataUtils.java</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">/**
&nbsp;*&nbsp;功能：初始化数据工具类
&nbsp;*&nbsp;作者：猴子搬来的救兵
&nbsp;*&nbsp;博客地址：http://blog.csdn.net/mynameishuangshuai
&nbsp;*&nbsp;日期：2016/10/01
&nbsp;*/public&nbsp;class&nbsp;DataUtils&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;final&nbsp;static&nbsp;List&lt;Student&gt;&nbsp;stuData&nbsp;=&nbsp;new&nbsp;ArrayList&lt;Student&gt;();&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;Student&nbsp;get(int&nbsp;i){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;stuData.get(i);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;int&nbsp;stuSize(){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;stuData.size();
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stuData.add(new&nbsp;Student(&quot;张三&quot;,R.mipmap.ic_launcher));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stuData.add(new&nbsp;Student(&quot;李四&quot;,R.mipmap.ic_launcher));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stuData.add(new&nbsp;Student(&quot;王五&quot;,R.mipmap.ic_launcher));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stuData.add(new&nbsp;Student(&quot;赵六&quot;,R.mipmap.ic_launcher));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stuData.add(new&nbsp;Student(&quot;陈七&quot;,R.mipmap.ic_launcher));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stuData.add(new&nbsp;Student(&quot;孙八&quot;,R.mipmap.ic_launcher));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stuData.add(new&nbsp;Student(&quot;猴子搬来的救兵&quot;,R.mipmap.ic_launcher));

&nbsp;&nbsp;&nbsp;&nbsp;}
}12345678910111213141516171819202122232425262728291234567891011121314151617181920212223242526272829</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Student.java</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">/**
&nbsp;*&nbsp;功能：学生Bean
&nbsp;*&nbsp;作者：猴子搬来的救兵
&nbsp;*&nbsp;博客地址：http://blog.csdn.net/mynameishuangshuai
&nbsp;*&nbsp;日期：2016/10/01
&nbsp;*/public&nbsp;class&nbsp;Student&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;name;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;int&nbsp;stuImg;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Student()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Student(String&nbsp;name,&nbsp;int&nbsp;stuImg)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.stuImg&nbsp;=&nbsp;stuImg;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getName()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;name;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setName(String&nbsp;name)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;getStuImg()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;stuImg;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setStuImg(int&nbsp;stuImg)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.stuImg&nbsp;=&nbsp;stuImg;
&nbsp;&nbsp;&nbsp;&nbsp;}

}123456789101112131415161718192021222324252627282930313233343536123456789101112131415161718192021222324252627282930313233343536</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">项目运行结果:</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161014112455786\" alt=\"这里写图片描述\" title=\"\"/></p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>MVP改造结构</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161014112645767\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">改造后的项目，我们增加了三大模块，分别是：</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>Model包负责处理数据</p></li><li><p>View包负责显示处理</p></li><li><p>Presenter包是中间桥梁，负责Model和View的交互</p></li></ul><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>通过MVP框架实现数据适配</h2><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>定义Model层接口</h4><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;interface&nbsp;IStudentModel&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;加载数据
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;loadStudent(StudentOnLoadListener&nbsp;listener);&nbsp;&nbsp;&nbsp;&nbsp;interface&nbsp;StudentOnLoadListener{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;onComplete(List&lt;Student&gt;&nbsp;students);
&nbsp;&nbsp;&nbsp;&nbsp;}
}12345671234567</pre><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>定义View层接口</h4><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;interface&nbsp;IStudentView&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;显示进度
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;showLoading();&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;显示学生
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;showStudents(List&lt;Student&gt;&nbsp;students);
}123456123456</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>添加Model层</h3><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">/**
&nbsp;*&nbsp;功能：StudentModel&nbsp;第一次数据处理
&nbsp;*&nbsp;作者：猴子搬来的救兵
&nbsp;*&nbsp;博客地址：http://blog.csdn.net/mynameishuangshuai
&nbsp;*&nbsp;日期：2016/10/13&nbsp;0013
&nbsp;*/public&nbsp;class&nbsp;StudentModelImplOne&nbsp;implements&nbsp;IStudentModel&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;loadStudent(StudentOnLoadListener&nbsp;listener)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(&quot;castiel&quot;,&quot;执行了StudentModelImplOne数据加载&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//模拟Json数据
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Student&gt;&nbsp;jsonStu1&nbsp;=&nbsp;new&nbsp;ArrayList&lt;Student&gt;();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jsonStu1.add(new&nbsp;Student(&quot;张三11&quot;,&nbsp;R.mipmap.ic_launcher));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jsonStu1.add(new&nbsp;Student(&quot;李四11&quot;,&nbsp;R.mipmap.ic_launcher));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jsonStu1.add(new&nbsp;Student(&quot;王五11&quot;,&nbsp;R.mipmap.ic_launcher));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jsonStu1.add(new&nbsp;Student(&quot;赵六11&quot;,&nbsp;R.mipmap.ic_launcher));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jsonStu1.add(new&nbsp;Student(&quot;陈七11&quot;,&nbsp;R.mipmap.ic_launcher));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jsonStu1.add(new&nbsp;Student(&quot;孙八11&quot;,&nbsp;R.mipmap.ic_launcher));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jsonStu1.add(new&nbsp;Student(&quot;猴子搬来的救兵11http://blog.csdn.net/mynameishuangshuai&quot;,&nbsp;R.mipmap.ic_launcher));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;通过回调方式传递数据
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(listener&nbsp;!=&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listener.onComplete(jsonStu1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
}1234567891011121314151617181920212223242512345678910111213141516171819202122232425</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>添加Presenter层</h3><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;class&nbsp;StudentPresenterOne&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Model
&nbsp;&nbsp;&nbsp;IStudentModel&nbsp;mStudentModel&nbsp;=&nbsp;new&nbsp;StudentModelImplOne();&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;View
&nbsp;&nbsp;&nbsp;&nbsp;IStudentView&nbsp;mStudentView;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;初始化View
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;StudentPresenterOne(IStudentView&nbsp;mStudentView)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.mStudentView&nbsp;=&nbsp;mStudentView;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;fetch(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mStudentView.showLoading();//&nbsp;显示进度
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Model获取数据
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(mStudentModel&nbsp;!=&nbsp;null){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mStudentModel.loadStudent(new&nbsp;IStudentModel.StudentOnLoadListener()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;onComplete(List&lt;Student&gt;&nbsp;students)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;得到数据后给View显示数据
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mStudentView.showStudents(students);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
}12345678910111213141516171819202122231234567891011121314151617181920212223</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>执行操作</h3><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">/**
&nbsp;*&nbsp;功能：MainActivity&nbsp;用列表形式实现
&nbsp;*&nbsp;作者：猴子搬来的救兵
&nbsp;*&nbsp;博客地址：http://blog.csdn.net/mynameishuangshuai
&nbsp;*&nbsp;日期：2016/10/01
&nbsp;*/public&nbsp;class&nbsp;MainActivity&nbsp;extends&nbsp;AppCompatActivity&nbsp;implements&nbsp;IStudentView{

&nbsp;&nbsp;&nbsp;&nbsp;ListView&nbsp;myList;&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;void&nbsp;onCreate(Bundle&nbsp;savedInstanceState)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.onCreate(savedInstanceState);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setContentView(R.layout.activity_main);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myList&nbsp;=&nbsp;(ListView)&nbsp;findViewById(R.id.my_list);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;StudentPresenterOne(this).fetch();
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;showLoading()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Toast.makeText(this,&nbsp;&quot;正在加载数据中……&quot;,&nbsp;Toast.LENGTH_SHORT).show();
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;showStudents(List&lt;Student&gt;&nbsp;students)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;负责显示
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myList.setAdapter(new&nbsp;StudentAdapter(MainActivity.this,students));
&nbsp;&nbsp;&nbsp;&nbsp;}
}1234567891011121314151617181920212223242526272812345678910111213141516171819202122232425262728</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">显示结果</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161014113924584\" alt=\"这里写图片描述\" title=\"\"/></p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>通过MVP框架实现View改变</h2><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>实现新的Model层</h3><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;class&nbsp;StudentModelImplTwo&nbsp;implements&nbsp;IStudentModel&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;loadStudent(StudentOnLoadListener&nbsp;listener)&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(&quot;castiel&quot;,&quot;执行了StudentModelImplTwo数据加载&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;模拟网络加载延时数据
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SystemClock.sleep(1000);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//模拟Json数据
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Student&gt;&nbsp;jsonStu2&nbsp;=&nbsp;new&nbsp;ArrayList&lt;Student&gt;();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jsonStu2.add(new&nbsp;Student(&quot;张三22&quot;,&nbsp;R.mipmap.ic_launcher));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jsonStu2.add(new&nbsp;Student(&quot;李四22&quot;,&nbsp;R.mipmap.ic_launcher));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jsonStu2.add(new&nbsp;Student(&quot;王五22&quot;,&nbsp;R.mipmap.ic_launcher));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jsonStu2.add(new&nbsp;Student(&quot;赵六22&quot;,&nbsp;R.mipmap.ic_launcher));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jsonStu2.add(new&nbsp;Student(&quot;陈七22&quot;,&nbsp;R.mipmap.ic_launcher));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jsonStu2.add(new&nbsp;Student(&quot;孙八22&quot;,&nbsp;R.mipmap.ic_launcher));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jsonStu2.add(new&nbsp;Student(&quot;猴子搬来的救兵22http://blog.csdn.net/mynameishuangshuai&quot;,&nbsp;R.mipmap.ic_launcher));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;通过回调方式传递数据
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(listener&nbsp;!=&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listener.onComplete(jsonStu2);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
}123456789101112131415161718192021222324123456789101112131415161718192021222324</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>实现新的Presenter层</h3><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;class&nbsp;StudentPresenterTwo&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Model
&nbsp;&nbsp;&nbsp;&nbsp;IStudentModel&nbsp;mStudentModel&nbsp;=&nbsp;new&nbsp;StudentModelImplTwo();&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;View
&nbsp;&nbsp;&nbsp;&nbsp;IStudentView&nbsp;mStudentView;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;初始化View
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;StudentPresenterTwo(IStudentView&nbsp;mStudentView)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.mStudentView&nbsp;=&nbsp;mStudentView;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;fetch(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mStudentView.showLoading();//&nbsp;显示进度
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Model获取数据
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(mStudentModel&nbsp;!=&nbsp;null){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mStudentModel.loadStudent(new&nbsp;IStudentModel.StudentOnLoadListener()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;onComplete(List&lt;Student&gt;&nbsp;students)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;得到数据后给View显示数据
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mStudentView.showStudents(students);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
}123456789101112131415161718192021222324123456789101112131415161718192021222324</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>添加新的Activity，改变列表布局为网格布局</h3><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">/**
&nbsp;*&nbsp;功能：TwoActivity&nbsp;用网格形式实现
&nbsp;*&nbsp;作者：猴子搬来的救兵
&nbsp;*&nbsp;博客地址：http://blog.csdn.net/mynameishuangshuai
&nbsp;*&nbsp;日期：2016/10/01
&nbsp;*/public&nbsp;class&nbsp;TwoActivity&nbsp;extends&nbsp;AppCompatActivity&nbsp;implements&nbsp;IStudentView{

&nbsp;&nbsp;&nbsp;&nbsp;GridView&nbsp;myGrid;&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;void&nbsp;onCreate(Bundle&nbsp;savedInstanceState)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.onCreate(savedInstanceState);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setContentView(R.layout.activity_two);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myGrid&nbsp;=&nbsp;(GridView)&nbsp;findViewById(R.id.my_grid);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;StudentPresenterTwo(this).fetch();
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;showLoading()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Toast.makeText(this,&nbsp;&quot;正在加载数据中……&quot;,&nbsp;Toast.LENGTH_SHORT).show();
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;showStudents(List&lt;Student&gt;&nbsp;students)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;负责显示
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myGrid.setAdapter(new&nbsp;StudentGridAdapter(TwoActivity.this,students));
&nbsp;&nbsp;&nbsp;&nbsp;}
}1234567891011121314151617181920212223242526272812345678910111213141516171819202122232425262728</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>新的Adapter</h3><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;class&nbsp;StudentGridAdapter&nbsp;extends&nbsp;BaseAdapter&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;LayoutInflater&nbsp;myInflater;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;List&lt;Student&gt;&nbsp;data;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;StudentGridAdapter(Context&nbsp;context,&nbsp;List&lt;Student&gt;&nbsp;data)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myInflater&nbsp;=&nbsp;LayoutInflater.from(context);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.data&nbsp;=&nbsp;data;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;getCount()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;data.size();
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Object&nbsp;getItem(int&nbsp;position)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;data.get(position);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;long&nbsp;getItemId(int&nbsp;position)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;position;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;View&nbsp;getView(int&nbsp;position,&nbsp;View&nbsp;convertView,&nbsp;ViewGroup&nbsp;parent)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;View&nbsp;stuView&nbsp;=&nbsp;myInflater.inflate(R.layout.stu_item,&nbsp;null);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Student&nbsp;student&nbsp;=&nbsp;data.get(position);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ImageView&nbsp;imgStu&nbsp;=&nbsp;(ImageView)&nbsp;stuView.findViewById(R.id.img_stu);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imgStu.setImageResource(student.getStuImg());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TextView&nbsp;tvStu&nbsp;=&nbsp;(TextView)&nbsp;stuView.findViewById(R.id.tv_name);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tvStu.setText(student.getName());&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;stuView;
&nbsp;&nbsp;&nbsp;&nbsp;}

}1234567891011121314151617181920212223242526272829303132333435363712345678910111213141516171819202122232425262728293031323334353637</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">执行结果</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161014114427563\" alt=\"这里写图片描述\" title=\"\"/></p><p><br/></p>','0','2016-11-20 06:24:15') [ RunTime:0.1169s ]

[ 2016-11-20T18:24:16+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000687s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001286s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0056s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 0,10   [ RunTime:0.0014s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0005s ]

[ 2016-11-20T18:24:26+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000437s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000845s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0034s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:24:38+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000448s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000850s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0050s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0047s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 86  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0037s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 49  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('AndroidStudio设置package presentation','86','49','<p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">最近有小伙伴问我AndroidStudio中的项目package默认的布局方式是嵌套型包结构，如何改为平级型包结构，在此我给大家科普一下AndroidStudio的package presentation配置方法。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">首先，我们用AndroidStudio新疆项目，默认的包结构如下：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161013163251910\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">我们点击项目根目录右上角的小齿轮按钮，然后勾选Flatten Packages选项即可。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161013163302332\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">改为平级包结构。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161013163316317\" alt=\"这里写图片描述\" title=\"\"/></p><p><br/></p>','0','2016-11-20 06:24:38') [ RunTime:0.0966s ]

[ 2016-11-20T18:24:39+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001066s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001987s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0084s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 0,10   [ RunTime:0.0015s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0007s ]

[ 2016-11-20T18:24:48+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000436s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000830s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0038s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:25:00+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000387s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000712s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0050s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0040s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 86  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0048s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 49  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('简单实现Android图片三级缓存机制','86','49','<p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp;用户在使用我们的APP时，通常会重复浏览一些图片，这时如果每一次浏览都需要通过网络获取图片，那么将会非常流量。为了节省用户流量，提高图片加载效率，我们通常使用图片三级缓存策略，即通过网络、本地、内存三级缓存图片，来减少不必要的网络交互，避免浪费流量。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;网上已经有很多讲述图片三级缓存的策略，这次我也来实现一次三级缓存，其中用到了LRU+SoftReference关于LRU<a href=\"http://lib.csdn.net/base/datastructure\" class=\"replace_word\" title=\"算法与数据结构知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">算法</a>，可以参考我之前的博客<a href=\"http://blog.csdn.net/mynameishuangshuai/article/details/52756462\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">LinkedHashMap最佳实践：LruCache</a>。首先我将整个机制流程展示给大家：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161012164523007\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">下面是源码实现：</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">/**
&nbsp;&nbsp;*&nbsp;@ClassName:&nbsp;CastielImageLoader&nbsp;
&nbsp;&nbsp;*&nbsp;@Description:&nbsp;LRU+SoftReference
&nbsp;&nbsp;*&nbsp;@author&nbsp;猴子搬来的救兵&nbsp;http://blog.csdn.net/mynameishuangshuai
&nbsp;&nbsp;*/public&nbsp;class&nbsp;CastielImageLoader&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;final&nbsp;int&nbsp;MAX_CAPACITY&nbsp;=&nbsp;20;//&nbsp;链表长度
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;Context&nbsp;mContext;//&nbsp;获取APP的缓存地址
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;CastielImageLoader&nbsp;castielImageLoader;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;键是图片地址、值是软引用
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;final&nbsp;LinkedHashMap&lt;String,&nbsp;SoftReference&lt;Bitmap&gt;&gt;&nbsp;firstCacheMap&nbsp;=&nbsp;new&nbsp;LinkedHashMap&lt;String,&nbsp;SoftReference&lt;Bitmap&gt;&gt;(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MAX_CAPACITY)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;boolean&nbsp;removeEldestEntry(java.util.Map.Entry&lt;String,&nbsp;java.lang.ref.SoftReference&lt;Bitmap&gt;&gt;&nbsp;eldest)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;返回true表示移除最老的软引用，保证内存平衡
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(this.size()&nbsp;&gt;&nbsp;MAX_CAPACITY)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{//&nbsp;否则往磁盘中添加
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;diskCache(eldest.getKey(),&nbsp;eldest.getValue());&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;};&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;单例模式加载CastielImageLoader
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;CastielImageLoader&nbsp;getInstance()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(castielImageLoader&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;castielImageLoader&nbsp;=&nbsp;new&nbsp;CastielImageLoader();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;castielImageLoader;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;加载图片到对应组件
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;key&nbsp;所需加载的路径
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;view&nbsp;被加载的组件
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;drawable&nbsp;没有加载前默认显示图片
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;@SuppressWarnings(&quot;deprecation&quot;)&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;loadImage(String&nbsp;key,&nbsp;ImageView&nbsp;view,&nbsp;Drawable&nbsp;drawable&nbsp;,Context&nbsp;context)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mContext&nbsp;=&nbsp;context;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(view)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;检查缓存中是否已有
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bitmap&nbsp;bitmap&nbsp;=&nbsp;getFromCache(key);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(bitmap&nbsp;!=&nbsp;null)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;如果有了就从缓存中取出显示
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view.setImageBitmap(bitmap);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;软应用缓存中不存在，磁盘中也不存在，只能下载
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;下载之前应该先放一张默认图，用来友好显示
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view.setBackgroundDrawable(drawable);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;用异步任务去下载
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;CastielAsyncImageLoaderTask(view).execute(key);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;判断缓存中是否已经有了，如果有了就从缓存中取出
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;key
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Bitmap&nbsp;getFromCache(String&nbsp;key)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;检查内存软引中是否存在
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(firstCacheMap)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(firstCacheMap.get(key)&nbsp;!=&nbsp;null)&nbsp;{//&nbsp;内存软引用中有
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bitmap&nbsp;bitmap&nbsp;=&nbsp;firstCacheMap.get(key).get();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(bitmap&nbsp;!=&nbsp;null)&nbsp;{//&nbsp;说明拿到了
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;firstCacheMap.put(key,&nbsp;new&nbsp;SoftReference&lt;Bitmap&gt;(bitmap));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;bitmap;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;检查磁盘中是否存在
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bitmap&nbsp;bitmap&nbsp;=&nbsp;getFromLocalSD(key);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(bitmap&nbsp;!=&nbsp;null)&nbsp;{//&nbsp;硬盘中有
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;firstCacheMap.put(key,&nbsp;new&nbsp;SoftReference&lt;Bitmap&gt;(bitmap));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;bitmap;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;判断本地磁盘中是否已经有了该图片，如果有了就从本地磁盘中取出
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;key
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Bitmap&nbsp;getFromLocalSD(String&nbsp;key)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;fileName&nbsp;=&nbsp;MD5Util.getMD5Str(key);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(fileName&nbsp;==&nbsp;null)&nbsp;{//&nbsp;如果文件名为Null，直接返回null
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;filePath&nbsp;=&nbsp;mContext.getCacheDir().getAbsolutePath()&nbsp;+&nbsp;File.separator&nbsp;+&nbsp;fileName;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InputStream&nbsp;is&nbsp;=&nbsp;null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is&nbsp;=&nbsp;new&nbsp;FileInputStream(new&nbsp;File(filePath));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bitmap&nbsp;bitmap&nbsp;=&nbsp;BitmapFactory.decodeStream(is);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;bitmap;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(FileNotFoundException&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;finally&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is.close();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;把图片缓存到本地磁盘，拿到图片，写到SD卡中
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;key&nbsp;图片的URL
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;value&nbsp;Bitmap
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;void&nbsp;diskCache(String&nbsp;key,&nbsp;SoftReference&lt;Bitmap&gt;&nbsp;value)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;把写入SD的图片名字改为基于MD5加密算法加密后的名字
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;fileName&nbsp;=&nbsp;MD5Util.getMD5Str(key);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;filePath&nbsp;=&nbsp;mContext.getCacheDir().getAbsolutePath()&nbsp;+&nbsp;File.separator&nbsp;+&nbsp;fileName;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileOutputStream&nbsp;os&nbsp;=&nbsp;null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os&nbsp;=&nbsp;new&nbsp;FileOutputStream(new&nbsp;File(filePath));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(value.get()&nbsp;!=&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value.get().compress(Bitmap.CompressFormat.JPEG,&nbsp;60,&nbsp;os);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(FileNotFoundException&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;finally&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(os&nbsp;!=&nbsp;null)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os.close();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@ClassName:&nbsp;MyAsyncImageLoaderTask&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@Description:&nbsp;异步加载图片&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@author&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;class&nbsp;CastielAsyncImageLoaderTask&nbsp;extends&nbsp;AsyncTask&lt;String,&nbsp;Void,&nbsp;Bitmap&gt;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;ImageView&nbsp;imageView;//&nbsp;图片组件
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;key;//图片路径

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;CastielAsyncImageLoaderTask(ImageView&nbsp;imageView)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.imageView&nbsp;=&nbsp;imageView;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;Bitmap&nbsp;doInBackground(String...&nbsp;params)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.key&nbsp;=&nbsp;params[0];//&nbsp;图片的路径
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bitmap&nbsp;bitmap&nbsp;=&nbsp;castielDownload(key);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;bitmap;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;void&nbsp;onPostExecute(Bitmap&nbsp;result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.onPostExecute(result);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(result&nbsp;!=&nbsp;null)&nbsp;{//&nbsp;说明已经下载下来了
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addFirstCache(key,result);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imageView.setImageBitmap(result);//&nbsp;加载网络中的图片
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;根据图片路径执行图片下载
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;key
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Bitmap&nbsp;castielDownload(String&nbsp;key)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InputStream&nbsp;is&nbsp;=&nbsp;null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is&nbsp;=&nbsp;CastielHttpUtils.castielDownLoad(key);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;BitmapFactory.decodeStream(is);//&nbsp;InputStream这种加载方式暂用内存最小
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;finally&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is.close();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;添加到缓存中去
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;key
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;result
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;addFirstCache(String&nbsp;key,&nbsp;Bitmap&nbsp;result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(result&nbsp;!=&nbsp;null)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(firstCacheMap)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;firstCacheMap.put(key,&nbsp;new&nbsp;SoftReference&lt;Bitmap&gt;(result));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
}pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">网络加载工具类 CastielHttpUtils.<a href=\"http://lib.csdn.net/base/javaee\" class=\"replace_word\" title=\"Java EE知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Java</a></p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;class&nbsp;CastielHttpUtils&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;InputStream&nbsp;castielDownLoad(String&nbsp;key)&nbsp;throws&nbsp;IOException{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HttpURLConnection&nbsp;conn&nbsp;=&nbsp;(HttpURLConnection)&nbsp;new&nbsp;URL(key).openConnection();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;conn.getInputStream();
&nbsp;&nbsp;&nbsp;&nbsp;}
}123456123456</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://lib.csdn.net/base/softwaretest\" class=\"replace_word\" title=\"软件测试知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">测试</a>，调用我们的图片缓存工具 MainActivity.java</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;class&nbsp;MainActivity&nbsp;extends&nbsp;Activity&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;ImageView&nbsp;img;
&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;imgURl&nbsp;=&nbsp;&quot;http://img2.imgtn.bdimg.com/it/u=3722998253,3365379445&amp;fm=21&amp;gp=0.jpg&quot;;&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;void&nbsp;onCreate(Bundle&nbsp;savedInstanceState)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.onCreate(savedInstanceState);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setContentView(R.layout.activity_main);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;img&nbsp;=&nbsp;(ImageView)&nbsp;findViewById(R.id.img);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CastielImageLoader.getInstance().loadImage(imgURl,&nbsp;img,&nbsp;this.getResources().getDrawable(R.drawable.ic_launcher),MainActivity.this);
&nbsp;&nbsp;&nbsp;&nbsp;}

}1234567891011121312345678910111213</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">布局文件 activity_main</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&lt;RelativeLayout&nbsp;xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
&nbsp;&nbsp;&nbsp;&nbsp;xmlns:tools=&quot;http://schemas.android.com/tools&quot;
&nbsp;&nbsp;&nbsp;&nbsp;android:layout_width=&quot;match_parent&quot;
&nbsp;&nbsp;&nbsp;&nbsp;android:layout_height=&quot;match_parent&quot;&nbsp;&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextView&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:id=&quot;@+id/tv&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_width=&quot;wrap_content&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_height=&quot;wrap_content&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:text=&quot;猴子搬来的救兵&nbsp;http://blog.csdn.net/mynameishuangshuai&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;ImageView&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:id=&quot;@+id/img&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_width=&quot;wrap_content&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_height=&quot;wrap_content&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_below=&quot;@+id/tv&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_marginLeft=&quot;20dp&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_marginTop=&quot;80dp&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:src=&quot;@drawable/tt&quot;&nbsp;/&gt;&lt;/RelativeLayout&gt;123456789101112131415161718192021123456789101112131415161718192021</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">测试加载图片结果如下：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161012153756034\" alt=\"这里写图片描述\" title=\"\"/></p><p><br/></p>','0','2016-11-20 06:25:00') [ RunTime:0.1046s ]

[ 2016-11-20T18:25:00+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000673s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001318s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0066s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 0,10   [ RunTime:0.0020s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0011s ]

[ 2016-11-20T18:25:11+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000459s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000848s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0040s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 10,10   [ RunTime:0.0015s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0004s ]

[ 2016-11-20T18:25:11+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000369s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000731s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0054s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 20,10   [ RunTime:0.0006s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:25:14+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000825s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001551s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0059s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 0,10   [ RunTime:0.0009s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:25:15+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000450s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000896s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0035s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 20,10   [ RunTime:0.0007s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:25:25+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000673s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001237s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0040s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:25:35+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000488s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000970s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0047s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0047s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 86  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0036s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 49  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('Android自实现百分比布局','86','49','<p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;在开发中，组件布局是大家每日开发必须要面对的工作，对于<a href=\"http://lib.csdn.net/base/android\" class=\"replace_word\" title=\"Android知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Android</a>来说提供五种常用布局，分别是：</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>LinearLayout(线性布局)</p></li><li><p>TableLayout(表格布局)</p></li><li><p>RelativeLayout(相对布局)</p></li><li><p>AbsoluteLayout(绝对布局)</p></li><li><p>FrameLayout(框架布局)</p></li></ul><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;但是，开发中如果可以按照百分比的方式进行界面布局，将会对我们的适配工作带来许多便利。前段时间，谷歌正式提供百分比布局支持库（android-support-percent-lib），对于我们开发者来讲只需要导入这个库就可以实现百分比布局。现在我们抛开谷歌库不谈，自己其实也可以实现百分比布局。</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">/**
&nbsp;*&nbsp;
&nbsp;*&nbsp;@ClassName:&nbsp;PercentRelativeLayout&nbsp;
&nbsp;*&nbsp;@Description:&nbsp;自定义百分比相对布局&nbsp;
&nbsp;*&nbsp;@author&nbsp;猴子搬来的救兵http://blog.csdn.net/mynameishuangshuai
&nbsp;*/public&nbsp;class&nbsp;PercentRelativeLayout&nbsp;extends&nbsp;RelativeLayout{

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;PercentRelativeLayout(Context&nbsp;context)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(context);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;PercentRelativeLayout(Context&nbsp;context,&nbsp;AttributeSet&nbsp;attrs,&nbsp;int&nbsp;defStyleAttr)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(context,&nbsp;attrs,&nbsp;defStyleAttr);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;PercentRelativeLayout(Context&nbsp;context,&nbsp;AttributeSet&nbsp;attrs)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(context,&nbsp;attrs);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;重写测量方法
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;void&nbsp;onMeasure(int&nbsp;widthMeasureSpec,&nbsp;int&nbsp;heightMeasureSpec)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;先拿到父控件的宽高
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;width&nbsp;=&nbsp;View.MeasureSpec.getSize(widthMeasureSpec);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;height&nbsp;=&nbsp;View.MeasureSpec.getSize(heightMeasureSpec);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;count&nbsp;=&nbsp;this.getChildCount();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;count;&nbsp;i++)&nbsp;{//&nbsp;循环迭代子控件
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;View&nbsp;child&nbsp;=&nbsp;this.getChildAt(i);//&nbsp;取出每一个子控件
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ViewGroup.LayoutParams&nbsp;lp&nbsp;=&nbsp;child.getLayoutParams();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float&nbsp;widthPercent&nbsp;=&nbsp;0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float&nbsp;hightPercent&nbsp;=&nbsp;0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(lp&nbsp;instanceof&nbsp;PercentRelativeLayout.LayoutParams)&nbsp;{//&nbsp;支持百分比布局
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widthPercent&nbsp;=&nbsp;((PercentRelativeLayout.LayoutParams)&nbsp;lp).widthPercent;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hightPercent&nbsp;=&nbsp;((PercentRelativeLayout.LayoutParams)&nbsp;lp).heightPercent;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(widthPercent&nbsp;!=&nbsp;0)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;父容器的宽*宽的百分比
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lp.width&nbsp;=&nbsp;(int)&nbsp;(width&nbsp;*&nbsp;widthPercent);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(hightPercent&nbsp;!=&nbsp;0)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;父容器的高*高的百分比
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lp.height&nbsp;=&nbsp;(int)&nbsp;(height&nbsp;*&nbsp;hightPercent);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.onMeasure(widthMeasureSpec,&nbsp;heightMeasureSpec);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;重写对子控件布局方法
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;void&nbsp;onLayout(boolean&nbsp;changed,&nbsp;int&nbsp;l,&nbsp;int&nbsp;t,&nbsp;int&nbsp;r,&nbsp;int&nbsp;b)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.onLayout(changed,&nbsp;l,&nbsp;t,&nbsp;r,&nbsp;b);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;重写对子控件布局属性进行获取解析
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;LayoutParams&nbsp;generateLayoutParams(AttributeSet&nbsp;attrs)&nbsp;{//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;super.generateLayoutParams(attrs);//&nbsp;这里必须返回下面自定的LayoutParams
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;LayoutParams(getContext(),&nbsp;attrs);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;class&nbsp;LayoutParams&nbsp;extends&nbsp;RelativeLayout.LayoutParams{

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;float&nbsp;widthPercent;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;float&nbsp;heightPercent;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;LayoutParams(Context&nbsp;c,&nbsp;AttributeSet&nbsp;attrs)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(c,&nbsp;attrs);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TypedArray&nbsp;a&nbsp;=&nbsp;c.obtainStyledAttributes(attrs,R.styleable.precentRelativeLayout);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widthPercent&nbsp;=&nbsp;a.getFloat(R.styleable.precentRelativeLayout_layout_widthPrecent,&nbsp;widthPercent);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;heightPercent&nbsp;=&nbsp;a.getFloat(R.styleable.precentRelativeLayout_layout_heightPrecent,&nbsp;heightPercent);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a.recycle();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;LayoutParams(int&nbsp;w,&nbsp;int&nbsp;h)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(w,&nbsp;h);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;LayoutParams(android.view.ViewGroup.LayoutParams&nbsp;source)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(source);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;LayoutParams(android.widget.RelativeLayout.LayoutParams&nbsp;source)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(source);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;}
}1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939412345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">自定义属性文件：</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&lt;?xml&nbsp;version=&quot;1.0&quot;&nbsp;encoding=&quot;utf-8&quot;?&gt;&lt;resources&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;declare-styleable&nbsp;name=&nbsp;&quot;precentRelativeLayout&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;attr&nbsp;name=&quot;layout_widthPrecent&quot;&nbsp;format=&quot;float&quot;&gt;&lt;/attr&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;attr&nbsp;name=&quot;layout_heightPrecent&quot;&nbsp;format=&quot;float&quot;&gt;&lt;/attr&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/declare-styleable&gt;&lt;/resources&gt;12345671234567</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">布局文件：</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&lt;com.castiel.demo.PercentRelativeLayout&nbsp;xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
&nbsp;&nbsp;&nbsp;&nbsp;xmlns:app=&quot;http://schemas.android.com/apk/res/com.castiel.demo&quot;
&nbsp;&nbsp;&nbsp;&nbsp;android:layout_width=&quot;match_parent&quot;
&nbsp;&nbsp;&nbsp;&nbsp;android:layout_height=&quot;match_parent&quot;&nbsp;&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextView
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_width=&quot;wrap_content&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_height=&quot;wrap_content&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_alignParentTop=&quot;true&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app:layout_heightPrecent=&quot;0.2&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app:layout_widthPrecent=&quot;0.2&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:background=&quot;#28FF28&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:text=&quot;http://blog.csdn.net/mynameishuangshuai&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextView
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_width=&quot;wrap_content&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_height=&quot;wrap_content&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_centerInParent=&quot;true&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app:layout_heightPrecent=&quot;0.3&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app:layout_widthPrecent=&quot;0.3&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:background=&quot;#28FF28&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:text=&quot;猴子搬来的救兵&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextView
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_width=&quot;wrap_content&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_height=&quot;wrap_content&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_alignParentBottom=&quot;true&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app:layout_heightPrecent=&quot;0.2&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app:layout_widthPrecent=&quot;0.2&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:background=&quot;#28FF28&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:text=&quot;castiel&quot;&nbsp;/&gt;

&lt;/com.castiel.demo.PercentRelativeLayout&gt;123456789101112131415161718192021222324252627282930313233123456789101112131415161718192021222324252627282930313233</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">运行结果：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161011201927033\" alt=\"这里写图片描述\" title=\"\"/></p><p><br/></p>','0','2016-11-20 06:25:35') [ RunTime:0.1213s ]

[ 2016-11-20T18:25:36+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001149s ]
INFO: [ app_begin ] --END-- [ RunTime:0.003285s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0074s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 0,10   [ RunTime:0.0014s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0004s ]

[ 2016-11-20T18:25:47+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000442s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000834s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0045s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:25:59+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000941s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001675s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0041s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0049s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 86  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0043s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 49  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('Android应用进程防杀指南3-JobService','86','49','<p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; 在前两篇博客中，我们系统的学习了<a href=\"http://lib.csdn.net/base/android\" class=\"replace_word\" title=\"Android知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Android</a>应用进程防杀套路和双进程守护的实现，不懂的童鞋们请查看<a href=\"http://blog.csdn.net/mynameishuangshuai/article/details/52757594\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Android应用进程防杀指南1-常用套路</a>和<a href=\"http://blog.csdn.net/mynameishuangshuai/article/details/52769116\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Android应用进程防杀指南2-双进程守护</a>两篇博文。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;本篇博文，我将带领大家学习更高端的APP进行防杀技巧，该技巧除了能够应对卫士、管家的清杀以外，更能够在类似于某米、某为系统的清理内存软件清理下确保进程存活下来。它就是我们今天的主角JobShedulerService。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;通常在5.0之前，我们可以使用广播或者闹钟等方式让我们的进程防杀自启，而5.0以后的Android系统，我们就可以使用JobService，JobService它是Android5.0以后新增的一个服务，我们先来看下官方的解释。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161009215021067\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;Google从Android SDK 21之后添加了JobScheduler来执行一些满足特定条件但不紧急的后台任务，我们可以利用JobScheduler来执行这些特殊的后台任务时来减少电量的消耗。JobService则是一个抽象类，其中包含两个抽象方法：</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">abstract&nbsp;boolean&nbsp;onStartJob(JobParameters&nbsp;params)//&nbsp;我们需要重写onStartJob方法在JobService被调度的时候abstract&nbsp;boolean&nbsp;onStopJob(JobParameters&nbsp;params)//&nbsp;如果确定停止系统调度作业，即使调度作业可能被完成，将调用此方法12341234</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">当我们有以下需求时，可以使用调度作业</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>APP有可以推迟的非面向用户的工作</p></li><li><p>APP有当插入设备时您希望优先执行的工作</p></li><li><p>APP有需要访问网络或 Wi-Fi 连接的任务</p></li><li><p>APP有希望作为一个批次定期运行的许多任务</p></li></ul><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">接下来，我们使用JobService来实现APP进程防杀。&nbsp;<br/><strong style=\"box-sizing: border-box;\">1.首先声明权限</strong></p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&lt;uses-permission&nbsp;android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;/&gt;11</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">2.自定义一个Service类，继承自JobService</strong></p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">/**
&nbsp;*&nbsp;
*&nbsp;@ClassName:&nbsp;JobCastielService&nbsp;
*&nbsp;@Description:&nbsp;自定义&nbsp;JobService
*&nbsp;@author&nbsp;猴子搬来的救兵&nbsp;http://blog.csdn.net/mynameishuangshuai
*&nbsp;@version
&nbsp;*/@SuppressLint(&quot;NewApi&quot;)public&nbsp;class&nbsp;JobCastielService&nbsp;extends&nbsp;JobService{
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;int&nbsp;kJobId&nbsp;=&nbsp;0;&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;onStartCommand(Intent&nbsp;intent,&nbsp;int&nbsp;flags,&nbsp;int&nbsp;startId)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(&quot;castiel&quot;,&nbsp;&quot;jobService启动&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scheduleJob(getJobInfo());&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;START_NOT_STICKY;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;onStartJob(JobParameters&nbsp;params)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(&quot;castiel&quot;,&nbsp;&quot;执行了onStartJob方法&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean&nbsp;isLocalServiceWork&nbsp;=&nbsp;isServiceWork(this,&nbsp;&quot;com.castiel.service.LocalCastielService&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean&nbsp;isRemoteServiceWork&nbsp;=&nbsp;isServiceWork(this,&nbsp;&quot;com.castiel.service.RemoteCastielService&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!isLocalServiceWork||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!isRemoteServiceWork){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.startService(new&nbsp;Intent(this,LocalCastielService.class));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.startService(new&nbsp;Intent(this,RemoteCastielService.class));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Toast.makeText(this,&nbsp;&quot;进程启动&quot;,&nbsp;Toast.LENGTH_SHORT).show();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;onStopJob(JobParameters&nbsp;params)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(&quot;castiel&quot;,&nbsp;&quot;执行了onStopJob方法&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scheduleJob(getJobInfo());&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;//将任务作业发送到作业调度中去
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;scheduleJob(JobInfo&nbsp;t)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(&quot;castiel&quot;,&nbsp;&quot;调度job&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JobScheduler&nbsp;tm&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(JobScheduler)&nbsp;getSystemService(Context.JOB_SCHEDULER_SERVICE);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tm.schedule(t);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;JobInfo&nbsp;getJobInfo(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JobInfo.Builder&nbsp;builder&nbsp;=&nbsp;new&nbsp;JobInfo.Builder(kJobId++,&nbsp;new&nbsp;ComponentName(this,&nbsp;JobCastielService.class));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;builder.setRequiredNetworkType(JobInfo.NETWORK_TYPE_ANY);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;builder.setPersisted(true);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;builder.setRequiresCharging(false);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;builder.setRequiresDeviceIdle(false);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//间隔100毫秒
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;builder.setPeriodic(100);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;builder.build();
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;判断服务是否正在运行
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;isServiceWork(Context&nbsp;mContext,&nbsp;String&nbsp;serviceName)&nbsp;{&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean&nbsp;isWork&nbsp;=&nbsp;false;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ActivityManager&nbsp;myAM&nbsp;=&nbsp;(ActivityManager)&nbsp;mContext&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.getSystemService(Context.ACTIVITY_SERVICE);&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;RunningServiceInfo&gt;&nbsp;myList&nbsp;=&nbsp;myAM.getRunningServices(100);&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(myList.size()&nbsp;&lt;=&nbsp;0)&nbsp;{&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;myList.size();&nbsp;i++)&nbsp;{&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;mName&nbsp;=&nbsp;myList.get(i).service.getClassName().toString();&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(mName.equals(serviceName))&nbsp;{&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isWork&nbsp;=&nbsp;true;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;isWork;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;
}123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161010122651563\" alt=\"这里写图片描述\" title=\"\"/></p><p><br/></p>','0','2016-11-20 06:25:59') [ RunTime:0.1029s ]

[ 2016-11-20T18:26:00+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000720s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001395s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0053s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 0,10   [ RunTime:0.0012s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0006s ]

[ 2016-11-20T18:26:06+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000442s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000934s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0045s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '86'  [ RunTime:0.0004s ]

[ 2016-11-20T18:26:21+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000436s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000834s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0040s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0045s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 86  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0039s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 49  [ RunTime:0.0002s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('Android应用进程防杀指南1-常用套路','86','49','<p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; 进程、服务守护防杀的实现，对于每一位开发者来说，都是一部与某系统、某卫士、某助手、某管家、某大师斗争的血泪史。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;我们常用的进程守护的套路无外乎以下几种，大部分内容摘录自<a href=\"http://blog.csdn.net/mad1989/article/details/22492519\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Never-say-Never的博客</a></p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>套路一.提高进程的优先级数值</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;对于Service被系统回收，一般做法是通过提高优先级可以解决，在AndroidManifest.xml文件中对于intent-filter可以通过<a href=\"http://lib.csdn.net/base/android\" class=\"replace_word\" title=\"Android知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Android</a>:priority = “1000”这个属性设置最高优先级，1000是最高值，如果数字越小则优先级越低。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>套路二.改变进程等级</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;Android中的进程是托管的，当系统进程空间紧张的时候，会依照优先级自动进行进程的回收。Android将进程分为6个等级,它们按优先级顺序由高到低依次是:</p><blockquote style=\"box-sizing: border-box; margin: 0px 0px 1.1em; padding: 15px 20px; border-left: 10px solid rgba(128, 128, 128, 0.0745098); background-color: rgba(128, 128, 128, 0.0470588); border-radius: 0px 5px 5px 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; box-sizing: border-box; line-height: 1.25;\">1.前台进程( FOREGROUND_APP)&nbsp;<br/>2.可视进程(VISIBLE_APP )&nbsp;<br/>3.次要服务进程(SECONDARY_SERVER )&nbsp;<br/>4.后台进程 (HIDDEN_APP)&nbsp;<br/>5.内容供应节点(CONTENT_PROVIDER)&nbsp;<br/>6.空进程(EMPTY_APP)</p></blockquote><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;我们可以用 setForeground(true) 来设置 Service 的优先级。</p><blockquote style=\"box-sizing: border-box; margin: 0px 0px 1.1em; padding: 15px 20px; border-left: 10px solid rgba(128, 128, 128, 0.0745098); background-color: rgba(128, 128, 128, 0.0470588); border-radius: 0px 5px 5px 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; box-sizing: border-box; line-height: 1.25;\">1．如果service正在调用onCreate,onStartCommand或者onDestory方法，那么用于当前service的进程则变为前台进程以避免被killed。&nbsp;<br/>2．如果当前service已经被启动(start)，拥有它的进程则比那些用户可见的进程优先级低一些，但是比那些不可见的进程更重要，这就意味着service一般不会被killed.&nbsp;<br/>3．如果客户端已经连接到service&nbsp;<br/>(bindService),那么拥有Service的进程则拥有最高的优先级，可以认为service是可见的。&nbsp;<br/>4．如果service可以使用startForeground(int,&nbsp;<br/>Notification)方法来将service设置为前台状态，那么系统就认为是对用户可见的，并不会在内存不足时killed。&nbsp;<br/>5．如果有其他的应用组件作为Service,Activity等运行在相同的进程中，那么将会增加该进程的重要性。</p></blockquote><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>套路三.设置 android:persistent属性为true</h3><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&lt;application&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;android:name=&quot;com.test.Application&quot;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;android:allowBackup=&quot;true&quot;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;android:icon=&quot;@drawable/ic_launcher&quot;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;android:label=&quot;@string/app_name&quot;&nbsp;
&nbsp;&nbsp;&nbsp;&lt;span&nbsp;style=&quot;color:#ff0000;&quot;&gt;&nbsp;android:persistent=&quot;true&quot;&lt;/span&gt;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;android:theme=&quot;@style/AppTheme&quot;&nbsp;&gt;&nbsp;
&lt;/application&gt;&nbsp;1234567812345678</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">这个属性设置后，的确发现优先级提高不少，或许是相当于系统级的进程，但是还是无法保证存活</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>套路四.onDestory方法内调用广播，重启Service</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">当service执行了onDestory的时候，发送一个自定义的广播，当收到广播的时候，重新启动service</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">@Override&nbsp;public&nbsp;void&nbsp;onDestroy()&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Intent&nbsp;sevice&nbsp;=&nbsp;new&nbsp;Intent(this,&nbsp;MainService.class);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.startService(sevice);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.onDestroy();&nbsp;
}&nbsp;123456123456</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">但是当使用类似于360卫士和腾讯管家等第三方应用或是在setting里-应用-强制停止时，APP进程可能就直接被干掉了，onDestroy方法都进不来，所以还是无法保证存活</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>套路五.监听系统广播判断Service状态</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">通过系统的一些广播，比如：手机重启、界面唤醒、应用状态改变等等监听并捕获到，然后判断我们的Service是否还存活，记得加权限</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&lt;receiver&nbsp;android:name=&quot;com.dbjtech.acbxt.waiqin.BootReceiver&quot;&nbsp;&gt;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;intent-filter&gt;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;action&nbsp;android:name=&quot;android.intent.action.BOOT_COMPLETED&quot;&nbsp;/&gt;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;action&nbsp;android:name=&quot;android.intent.action.USER_PRESENT&quot;&nbsp;/&gt;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;action&nbsp;android:name=&quot;android.intent.action.PACKAGE_RESTARTED&quot;&nbsp;/&gt;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;action&nbsp;android:name=&quot;com.dbjtech.waiqin.destroy&quot;&nbsp;/&gt;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/intent-filter&gt;&nbsp;&lt;/receiver&gt;&nbsp;1234567812345678</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">在BroadcastReceiver中：</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">@Override&nbsp;
public&nbsp;void&nbsp;onReceive(Context&nbsp;context,&nbsp;Intent&nbsp;intent)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction()))&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;手机开机了....&quot;);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startUploadService(context);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(Intent.ACTION_USER_PRESENT.equals(intent.getAction()))&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startUploadService(context);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
}&nbsp;1234567891012345678910</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">这个方法监听多了会导致Service很混乱，带来诸多麻烦</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>套路六.将APK安装到/system/app成为系统级应用</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">使用ROOT过的手机&nbsp;<br/>1.把代码编写好后，打包导出apk，copy到手机SD卡根目录下。&nbsp;<br/>2.手机连接eclipse，cmd： adb shell&nbsp;<br/>3.切换root模式，输入：su （如果root过就不会有错误）&nbsp;<br/>4.设置System为读写权限：mount –o remount rw /system （System默认为只读，无法写入，这一步很关键）&nbsp;<br/>5.cd到sd卡跟目录下，确认是否有我们拷贝到sd卡根目录下的apk（一般都是 storage/sdcard0）&nbsp;<br/>shell@android:/ # cd storage/sdcard0&nbsp;<br/>6.最后，我们要把apk拷贝到 /System/app中</p><p><br/></p>','0','2016-11-20 06:26:21') [ RunTime:0.1050s ]

[ 2016-11-20T18:26:22+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000859s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001720s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0095s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 0,10   [ RunTime:0.0011s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:26:33+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000444s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000836s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0041s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:26:46+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000358s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000712s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0038s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0041s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 86  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0041s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 49  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('LinkedHashMap最佳实践：LruCache','86','49','<p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; 一句话解释：LruCache(least recently used cache)最近最少使用缓存。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;前面，我们一起学习了LinkedHashMap<a href=\"http://lib.csdn.net/base/datastructure\" class=\"replace_word\" title=\"算法与数据结构知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">数据结构</a>，那么LruCache就是LinkedHashMap的最佳实践，童鞋们可以查看我的博客<a href=\"http://blog.csdn.net/mynameishuangshuai/article/details/52753873\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">线性表数据结构解读（六）链式哈希表结构-LinkedHashMap</a>学习一下。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;在日常开发中，我们经常会使用一种内存缓存技术，即软引用或弱引用 (SoftReference or WeakReference)。但是现在已经不再推荐使用这种方式了，因为从&nbsp;<a href=\"http://lib.csdn.net/base/android\" class=\"replace_word\" title=\"Android知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Android</a>&nbsp;2.3 (API Level 9)开始，垃圾回收器会更倾向于回收持有软引用或弱引用的对象，这让软引用和弱引用变得不再可靠。另外，Android 3.0 (API Level 11)中，图片的数据会存储在本地的内存当中，因而无法用一种可预见的方式将其释放，这就有潜在的风险造成应用程序的内存溢出并崩溃。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;而谷歌大概从SDK21开始，提供LruCache这个工具类(此类在android-support-v4的包中提供) ，用于作为实现内存缓存技术的解决方案。这个类非常适合用来缓存图片，它的主要<a href=\"http://lib.csdn.net/base/datastructure\" class=\"replace_word\" title=\"算法与数据结构知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">算法</a>原理是把最近使用的对象用强引用存储在 LinkedHashMap 中，并且把最近最少使用的对象在缓存值达到预设定值之前从内存中移除。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>源码解读</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;OK老规矩，我先带大家一起研读下LruCache的源码，我们重点看下get、put、Remove等方法，其实原理就是LinkedHashMap的机制。</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;class&nbsp;LruCache&lt;K,&nbsp;V&gt;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;final&nbsp;LinkedHashMap&lt;K,&nbsp;V&gt;&nbsp;map;//&nbsp;声明一个LinkedHashMap
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;int&nbsp;size;//&nbsp;已经存储的数量大小
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;int&nbsp;maxSize;//&nbsp;规定的最大存储空间
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;int&nbsp;putCount;//&nbsp;put的次数
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;int&nbsp;createCount;//&nbsp;create的次数
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;int&nbsp;evictionCount;//&nbsp;回首的次数
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;int&nbsp;hitCount;//&nbsp;命中的次数
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;int&nbsp;missCount;//&nbsp;丢失的次数
&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;指定最大内存的LruCache构造方法
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;maxSize&nbsp;for&nbsp;caches&nbsp;that&nbsp;do&nbsp;not&nbsp;override&nbsp;{@link&nbsp;#sizeOf},&nbsp;this&nbsp;is
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;maximum&nbsp;number&nbsp;of&nbsp;entries&nbsp;in&nbsp;the&nbsp;cache.&nbsp;For&nbsp;all&nbsp;other&nbsp;caches,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this&nbsp;is&nbsp;the&nbsp;maximum&nbsp;sum&nbsp;of&nbsp;the&nbsp;sizes&nbsp;of&nbsp;the&nbsp;entries&nbsp;in&nbsp;this&nbsp;cache.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;LruCache(int&nbsp;maxSize)&nbsp;{//&nbsp;官方推荐maxSize一般声明为手机内存的1/8
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(maxSize&nbsp;&lt;=&nbsp;0)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IllegalArgumentException(&quot;maxSize&nbsp;&lt;=&nbsp;0&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.maxSize&nbsp;=&nbsp;maxSize;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.map&nbsp;=&nbsp;new&nbsp;LinkedHashMap&lt;K,&nbsp;V&gt;(0,&nbsp;0.75f,&nbsp;true);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Sets&nbsp;the&nbsp;size&nbsp;of&nbsp;the&nbsp;cache.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;maxSize&nbsp;The&nbsp;new&nbsp;maximum&nbsp;size.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;resize(int&nbsp;maxSize)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(maxSize&nbsp;&lt;=&nbsp;0)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IllegalArgumentException(&quot;maxSize&nbsp;&lt;=&nbsp;0&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(this)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.maxSize&nbsp;=&nbsp;maxSize;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trimToSize(maxSize);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Returns&nbsp;the&nbsp;value&nbsp;for&nbsp;{@code&nbsp;key}&nbsp;if&nbsp;it&nbsp;exists&nbsp;in&nbsp;the&nbsp;cache&nbsp;or&nbsp;can&nbsp;be
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;created&nbsp;by&nbsp;{@code&nbsp;#create}.&nbsp;If&nbsp;a&nbsp;value&nbsp;was&nbsp;returned,&nbsp;it&nbsp;is&nbsp;moved&nbsp;to&nbsp;the
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;head&nbsp;of&nbsp;the&nbsp;queue.&nbsp;This&nbsp;returns&nbsp;null&nbsp;if&nbsp;a&nbsp;value&nbsp;is&nbsp;not&nbsp;cached&nbsp;and&nbsp;cannot
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;be&nbsp;created.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;final&nbsp;V&nbsp;get(K&nbsp;key)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(key&nbsp;==&nbsp;null)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NullPointerException(&quot;key&nbsp;==&nbsp;null&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;V&nbsp;mapValue;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(this)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mapValue&nbsp;=&nbsp;map.get(key);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(mapValue&nbsp;!=&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hitCount++;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;mapValue;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;missCount++;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Attempt&nbsp;to&nbsp;create&nbsp;a&nbsp;value.&nbsp;This&nbsp;may&nbsp;take&nbsp;a&nbsp;long&nbsp;time,&nbsp;and&nbsp;the&nbsp;map
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;may&nbsp;be&nbsp;different&nbsp;when&nbsp;create()&nbsp;returns.&nbsp;If&nbsp;a&nbsp;conflicting&nbsp;value&nbsp;was
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;added&nbsp;to&nbsp;the&nbsp;map&nbsp;while&nbsp;create()&nbsp;was&nbsp;working,&nbsp;we&nbsp;leave&nbsp;that&nbsp;value&nbsp;in
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;the&nbsp;map&nbsp;and&nbsp;release&nbsp;the&nbsp;created&nbsp;value.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;V&nbsp;createdValue&nbsp;=&nbsp;create(key);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(createdValue&nbsp;==&nbsp;null)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(this)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;createCount++;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mapValue&nbsp;=&nbsp;map.put(key,&nbsp;createdValue);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(mapValue&nbsp;!=&nbsp;null)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;There&nbsp;was&nbsp;a&nbsp;conflict&nbsp;so&nbsp;undo&nbsp;that&nbsp;last&nbsp;put
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map.put(key,&nbsp;mapValue);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;+=&nbsp;safeSizeOf(key,&nbsp;createdValue);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(mapValue&nbsp;!=&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entryRemoved(false,&nbsp;key,&nbsp;createdValue,&nbsp;mapValue);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;mapValue;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trimToSize(maxSize);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;createdValue;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Caches&nbsp;{@code&nbsp;value}&nbsp;for&nbsp;{@code&nbsp;key}.&nbsp;The&nbsp;value&nbsp;is&nbsp;moved&nbsp;to&nbsp;the&nbsp;head&nbsp;of
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;the&nbsp;queue.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return&nbsp;the&nbsp;previous&nbsp;value&nbsp;mapped&nbsp;by&nbsp;{@code&nbsp;key}.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;final&nbsp;V&nbsp;put(K&nbsp;key,&nbsp;V&nbsp;value)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(key&nbsp;==&nbsp;null&nbsp;||&nbsp;value&nbsp;==&nbsp;null)&nbsp;{//&nbsp;判断键或值是否为空
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NullPointerException(&quot;key&nbsp;==&nbsp;null&nbsp;||&nbsp;value&nbsp;==&nbsp;null&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;V&nbsp;previous;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(this)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;putCount++;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;+=&nbsp;safeSizeOf(key,&nbsp;value);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;previous&nbsp;=&nbsp;map.put(key,&nbsp;value);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(previous&nbsp;!=&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;-=&nbsp;safeSizeOf(key,&nbsp;previous);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(previous&nbsp;!=&nbsp;null)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;移除最近没有使用的
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entryRemoved(false,&nbsp;key,&nbsp;previous,&nbsp;value);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;重置
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trimToSize(maxSize);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;previous;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;移除最老的元素，直到剩余元素数量等于或小于请求所需的大小
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Remove&nbsp;the&nbsp;eldest&nbsp;entries&nbsp;until&nbsp;the&nbsp;total&nbsp;of&nbsp;remaining&nbsp;entries&nbsp;is&nbsp;at&nbsp;or
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;below&nbsp;the&nbsp;requested&nbsp;size.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;maxSize&nbsp;the&nbsp;maximum&nbsp;size&nbsp;of&nbsp;the&nbsp;cache&nbsp;before&nbsp;returning.&nbsp;May&nbsp;be&nbsp;-1
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;evict&nbsp;even&nbsp;0-sized&nbsp;elements.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;trimToSize(int&nbsp;maxSize)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(true)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;K&nbsp;key;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;V&nbsp;value;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(this)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(size&nbsp;&lt;&nbsp;0&nbsp;||&nbsp;(map.isEmpty()&nbsp;&amp;&amp;&nbsp;size&nbsp;!=&nbsp;0))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IllegalStateException(getClass().getName()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;&quot;.sizeOf()&nbsp;is&nbsp;reporting&nbsp;inconsistent&nbsp;results!&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(size&nbsp;&lt;=&nbsp;maxSize&nbsp;||&nbsp;map.isEmpty())&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map.Entry&lt;K,&nbsp;V&gt;&nbsp;toEvict&nbsp;=&nbsp;map.entrySet().iterator().next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;key&nbsp;=&nbsp;toEvict.getKey();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value&nbsp;=&nbsp;toEvict.getValue();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map.remove(key);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;-=&nbsp;safeSizeOf(key,&nbsp;value);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evictionCount++;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entryRemoved(true,&nbsp;key,&nbsp;value,&nbsp;null);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;移除已存在的元素实体
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Removes&nbsp;the&nbsp;entry&nbsp;for&nbsp;{@code&nbsp;key}&nbsp;if&nbsp;it&nbsp;exists.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return&nbsp;the&nbsp;previous&nbsp;value&nbsp;mapped&nbsp;by&nbsp;{@code&nbsp;key}.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;final&nbsp;V&nbsp;remove(K&nbsp;key)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(key&nbsp;==&nbsp;null)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NullPointerException(&quot;key&nbsp;==&nbsp;null&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;V&nbsp;previous;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(this)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;previous&nbsp;=&nbsp;map.remove(key);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(previous&nbsp;!=&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;-=&nbsp;safeSizeOf(key,&nbsp;previous);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(previous&nbsp;!=&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entryRemoved(false,&nbsp;key,&nbsp;previous,&nbsp;null);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;previous;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;……
&nbsp;&nbsp;&nbsp;&nbsp;}pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">上面的关于LruCache初始化分配缓存大小有多少，可以参考下面几个因素：</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>你的设备可以为每个应用程序分配多大的内存？</p></li><li><p>设备屏幕上一次最多能显示多少张图片？有多少图片需要进行预加载，因为有可能很快也会显示在屏幕上？</p></li><li><p>你的设备的屏幕大小和分辨率分别是多少？</p></li><li><p>图片的尺寸和大小，还有每张图片会占据多少内存空间?</p></li><li><p>图片被访问的频率有多高？会不会有一些图片的访问频率比其它图片要高？如果有的话，你也许应该让一些图片常驻在内存当中，或者使用多个LruCache 对象来区分不同组的图片。</p></li></ul><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>基本使用</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;Cache保存一个强引用来限制内容数量，每当Item被访问的时候，此Item就会移动到队列的头部。当cache已满的时候加入新的item时，在队列尾部的item会被回收。</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">int&nbsp;cacheSize&nbsp;=&nbsp;4&nbsp;*&nbsp;1024&nbsp;*&nbsp;1024;&nbsp;//&nbsp;4MiB
&nbsp;&nbsp;&nbsp;LruCache&nbsp;bitmapCache&nbsp;=&nbsp;new&nbsp;LruCache(cacheSize)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;int&nbsp;sizeOf(String&nbsp;key,&nbsp;Bitmap&nbsp;value)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;value.getByteCount();

&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;}12345671234567</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;创建一个大小为4M的存储空间来进行图片的存储，存储按照队列的形式，后存储进来的和最新使用过的将会放在队列的最后，这样陈旧数据放在队列的开始，用于GC的回收。</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&nbsp;&nbsp;&nbsp;synchronized&nbsp;(cache)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(cache.get(key)&nbsp;==&nbsp;null)&nbsp;{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cache.put(key,&nbsp;value);

&nbsp;&nbsp;&nbsp;}}1234512345</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;这个方法也展示了怎样规范化的使用以及获取由LruCache保存的数据，由于这个类是线程安全的所以需要加上同步块来进行存放数据，通过get和put方式来进行数据的存取，这点跟Map是一致的，put时如果键相同则会进行数据的覆盖，但是有点需要注意这里key和value都不能为空，这里跟Map有点区别。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;还必须注意必须要主动的释放资源，如果你cache的某个值需要明确释放，重写方法</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">entryRemoved&nbsp;(boolean&nbsp;evicted,&nbsp;K&nbsp;key,&nbsp;V&nbsp;oldValue,&nbsp;V&nbsp;newValue)11</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;如果资源是被系统回收的则evicted会返回TRUE，如果是由put，remove的方式替换回收的则evicted会返回FALSE，然后怎么知道是通过put还是remove的，可以通过对newValue是否为空进行判断，如果为空则是put调用，然后将remove和系统回收时将资源置为空，就要自己去实现了。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;如果key相对应的item丢掉啦，重写create().这简化了调用代码，即使丢失了也总会返回。默认cache大小是测量的item的数量，重写sizeof计算不同item的大小。</p><p><br/></p>','0','2016-11-20 06:26:46') [ RunTime:0.1186s ]

[ 2016-11-20T18:26:47+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000824s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001601s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0065s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 0,10   [ RunTime:0.0016s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0005s ]

[ 2016-11-20T18:26:59+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000445s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000848s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0038s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:27:13+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000360s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000712s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0036s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0054s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 86  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0040s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 49  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('线性表数据结构解读（六）链式哈希表结构-LinkedHashMap','86','49','<p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp;上一篇文章我和大家一起解读了HashMap的原理源码，各位童鞋可以点击链接查看<a href=\"http://blog.csdn.net/mynameishuangshuai/article/details/52748853\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">线性表数据结构解读（五）哈希表结构-HashMap</a>&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;这次我们一起来看一下LinkedHashMap，它保留插入的顺序，如果需要输出的顺序和输入时的相同，那么就选用LinkedHashMap。就LinkedHashMap而言，它继承了HashMap，底层使用哈希表与双向链表来保存所有元素。其基本操作与父类HashMap相似，它通过重写父类相关的方法，来实现自己的链接列表特性。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;LinkedHashMap是Map接口的哈希表和链接列表实现，具有可预知的迭代顺序。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;LinkedHashMap实现与HashMap的不同之处在于，后者维护着一个运行于所有条目的双重链接列表。此链接列表定义了迭代顺序，该迭代顺序可以是插入顺序或者是访问顺序。</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>第一种和队列一样默认是按插入顺序排序，先进来的是最老的元素，放在队头，将来会被先移出去，最后进来的是新的元素。</p></li><li><p>第二种，基于访问排序，那么调用get方法后，会将每次访问的元素移至队尾，将来移除的时候移除的是队头，最先访问的元素最后才被移除，不断访问可以形成按访问顺序排序的链表。</p></li></ul><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">下图是我在小黑板手绘的双链回环循环链表&nbsp;<br/><img src=\"http://img.blog.csdn.net/20161008110921623\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">下面我们一起来分析一下LinkedHashMap的源码：</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>初始化及构造方法</h3><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">/**
&nbsp;*&nbsp;双链回环循环链表
&nbsp;*/public&nbsp;class&nbsp;LinkedHashMap&lt;K,&nbsp;V&gt;&nbsp;extends&nbsp;HashMap&lt;K,&nbsp;V&gt;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;双向链表的头结点
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;transient&nbsp;LinkedEntry&lt;K,&nbsp;V&gt;&nbsp;header;&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;true通过访问来排序，false通过插入排序
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;final&nbsp;boolean&nbsp;accessOrder;&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Constructs&nbsp;a&nbsp;new&nbsp;empty&nbsp;{@code&nbsp;LinkedHashMap}&nbsp;instance.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;LinkedHashMap()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;accessOrder&nbsp;=&nbsp;false;//&nbsp;默认是插入排序
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;LinkedHashMap(int&nbsp;initialCapacity)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(initialCapacity,&nbsp;DEFAULT_LOAD_FACTOR);
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;LinkedHashMap(int&nbsp;initialCapacity,&nbsp;float&nbsp;loadFactor)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(initialCapacity,&nbsp;loadFactor,&nbsp;false);
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;LinkedHashMap(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;initialCapacity,&nbsp;float&nbsp;loadFactor,&nbsp;boolean&nbsp;accessOrder)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(initialCapacity,&nbsp;loadFactor);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.accessOrder&nbsp;=&nbsp;accessOrder;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;LinkedHashMap(Map&lt;?&nbsp;extends&nbsp;K,&nbsp;?&nbsp;extends&nbsp;V&gt;&nbsp;map)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(capacityForInitSize(map.size()));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constructorPutAll(map);&nbsp;&nbsp;&nbsp;&nbsp;//LinkedHashMap重写了init()方法，在调用父类的构造方法完成构造后，进一步实现了对其元素Entry的初始化操作
&nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;init()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;header&nbsp;=&nbsp;new&nbsp;LinkedEntry&lt;K,&nbsp;V&gt;();
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;继承HashMap的Entry元素，又保存了其上一个元素before和下一个元素after的引用
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;class&nbsp;LinkedEntry&lt;K,&nbsp;V&gt;&nbsp;extends&nbsp;HashMapEntry&lt;K,&nbsp;V&gt;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkedEntry&lt;K,&nbsp;V&gt;&nbsp;nxt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkedEntry&lt;K,&nbsp;V&gt;&nbsp;prv;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;Create&nbsp;the&nbsp;header&nbsp;entry&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkedEntry()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(null,&nbsp;null,&nbsp;0,&nbsp;null);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nxt&nbsp;=&nbsp;prv&nbsp;=&nbsp;this;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;Create&nbsp;a&nbsp;normal&nbsp;entry&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkedEntry(K&nbsp;key,&nbsp;V&nbsp;value,&nbsp;int&nbsp;hash,&nbsp;HashMapEntry&lt;K,&nbsp;V&gt;&nbsp;next,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkedEntry&lt;K,&nbsp;V&gt;&nbsp;nxt,&nbsp;LinkedEntry&lt;K,&nbsp;V&gt;&nbsp;prv)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(key,&nbsp;value,&nbsp;hash,&nbsp;next);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.nxt&nbsp;=&nbsp;nxt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.prv&nbsp;=&nbsp;prv;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;拿到最老的元素
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Returns&nbsp;the&nbsp;eldest&nbsp;entry&nbsp;in&nbsp;the&nbsp;map,&nbsp;or&nbsp;{@code&nbsp;null}&nbsp;if&nbsp;the&nbsp;map&nbsp;is&nbsp;empty.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@hide
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Entry&lt;K,&nbsp;V&gt;&nbsp;eldest()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkedEntry&lt;K,&nbsp;V&gt;&nbsp;eldest&nbsp;=&nbsp;header.nxt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;eldest&nbsp;!=&nbsp;header&nbsp;?&nbsp;eldest&nbsp;:&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757612345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>addNewEntry方法</h3><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;重写了HashMap中的添加新元素方法
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;addNewEntry(K&nbsp;key,&nbsp;V&nbsp;value,&nbsp;int&nbsp;hash,&nbsp;int&nbsp;index)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;找到头结点
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkedEntry&lt;K,&nbsp;V&gt;&nbsp;header&nbsp;=&nbsp;this.header;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;找到用于移除的队头的最老结点
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkedEntry&lt;K,&nbsp;V&gt;&nbsp;eldest&nbsp;=&nbsp;header.nxt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;如果最老的结点不等于头结点（有元素存在）且removeEldestEntry为true
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(eldest&nbsp;!=&nbsp;header&nbsp;&amp;&amp;&nbsp;removeEldestEntry(eldest))&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;remove(eldest.key);//&nbsp;移除最老元素key
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Create&nbsp;new&nbsp;entry,&nbsp;link&nbsp;it&nbsp;on&nbsp;to&nbsp;list,&nbsp;and&nbsp;put&nbsp;it&nbsp;into&nbsp;table
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;使用双向链表的套路实现插入，基于访问排序
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkedEntry&lt;K,&nbsp;V&gt;&nbsp;oldTail&nbsp;=&nbsp;header.prv;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkedEntry&lt;K,&nbsp;V&gt;&nbsp;newTail&nbsp;=&nbsp;new&nbsp;LinkedEntry&lt;K,V&gt;(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;key,&nbsp;value,&nbsp;hash,&nbsp;table[index],&nbsp;header,&nbsp;oldTail);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table[index]&nbsp;=&nbsp;oldTail.nxt&nbsp;=&nbsp;header.prv&nbsp;=&nbsp;newTail;//&nbsp;把新的加入到table数组中
&nbsp;&nbsp;&nbsp;&nbsp;}12345678910111213141516171819201234567891011121314151617181920</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">下图是我在小黑板手绘的插入方法实现原理图，注意其中指针的变化：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161008111016281\" alt=\"这里写图片描述\" title=\"\"/></p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>remove方法</h3><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;移除最老的元素
&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;boolean&nbsp;removeEldestEntry(Map.Entry&lt;K,&nbsp;V&gt;&nbsp;eldest)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
&nbsp;&nbsp;&nbsp;&nbsp;}12341234</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>get方法</h3><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Returns&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;mapping&nbsp;with&nbsp;the&nbsp;specified&nbsp;key.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;key&nbsp;the&nbsp;key.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;mapping&nbsp;with&nbsp;the&nbsp;specified&nbsp;key,&nbsp;or&nbsp;{@code&nbsp;null}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;no&nbsp;mapping&nbsp;for&nbsp;the&nbsp;specified&nbsp;key&nbsp;is&nbsp;found.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp;public&nbsp;V&nbsp;get(Object&nbsp;key)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;This&nbsp;method&nbsp;is&nbsp;overridden&nbsp;to&nbsp;eliminate&nbsp;the&nbsp;need&nbsp;for&nbsp;a&nbsp;polymorphic
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;invocation&nbsp;in&nbsp;superclass&nbsp;at&nbsp;the&nbsp;expense&nbsp;of&nbsp;code&nbsp;duplication.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(key&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HashMapEntry&lt;K,&nbsp;V&gt;&nbsp;e&nbsp;=&nbsp;entryForNullKey;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(e&nbsp;==&nbsp;null)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(accessOrder)//&nbsp;判断排序模式
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;makeTail((LinkedEntry&lt;K,&nbsp;V&gt;)&nbsp;e);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;e.value;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;hash&nbsp;=&nbsp;Collections.secondaryHash(key);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HashMapEntry&lt;K,&nbsp;V&gt;[]&nbsp;tab&nbsp;=&nbsp;table;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(HashMapEntry&lt;K,&nbsp;V&gt;&nbsp;e&nbsp;=&nbsp;tab[hash&nbsp;&amp;&nbsp;(tab.length&nbsp;-&nbsp;1)];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e&nbsp;!=&nbsp;null;&nbsp;e&nbsp;=&nbsp;e.next)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;K&nbsp;eKey&nbsp;=&nbsp;e.key;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(eKey&nbsp;==&nbsp;key&nbsp;||&nbsp;(e.hash&nbsp;==&nbsp;hash&nbsp;&amp;&amp;&nbsp;key.equals(eKey)))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(accessOrder)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;makeTail((LinkedEntry&lt;K,&nbsp;V&gt;)&nbsp;e);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;e.value;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p><br/></p>','0','2016-11-20 06:27:13') [ RunTime:0.0782s ]

[ 2016-11-20T18:27:14+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000724s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001439s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0067s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 0,10   [ RunTime:0.0014s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0006s ]

[ 2016-11-20T18:27:28+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000668s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001124s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0042s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:27:48+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000418s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000805s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0042s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0041s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 86  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0034s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 49  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('Android增量更新流程讲解','86','49','<h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\">为什么需要增量更新：节省流量，节省流量，节省流量，重要的事情说三遍！</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;增量更新不仅可以让用户在客户端实现省流量更新，更重要的是增量更新还可以实现服务器端流量的节省，为网站节省成本。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>增量更新的原理</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;服务端将应用的旧版本Apk与新版本Apk做差分处理，得到新版APK更新部分的差分包，例如旧版本的APK有6M，新版的有10M，更新的部分则可能只有4M左右(这4M文件除了包含更新内容以外，还包含一些上下文相关的东西)，对于服务端来讲，如果是大型应用每次用户下载数量在百万以上，那么数百万*4M节省到的流量可想而知。这里强调一点，新apk和旧apk生成的差分包，其体积大小一定要小于新apk的体积，否则增量更新无意义。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;客户端在用户下载了差分更新包之后，将手机端存在的旧版本软件APK(大多处在/data/data/app/下)，复制到SD卡或者cache中，并与差分更新包进行合并，得到一个新版本的apk升级安装包，最终，这个生成的apk和你做差分之前的apk是一致的。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;为了得到增量更新中的差分包，我们使用网上一款非常有名的开源二进制查分工具bsdiff。其中bsdiff依赖bzip2，所以我们还需要用到 bzip2工具。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;关于bsdiff大家可以去官网下载<a href=\"http://www.daemonology.net/bsdiff/\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">http://www.daemonology.net/bsdiff/</a>&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;关于bzip2大家可以去官网下载<a href=\"http://www.bzip.org/downloads.html\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">http://www.bzip.org/downloads.html</a>&nbsp;<br/><strong style=\"box-sizing: border-box;\">下载后的bsdiff目录如下</strong></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161006175542120\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;在bsdiff中，bsdiff.c 用于生成差分包，bspatch.c 用于合并文件。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;ok，准备就绪下面开始步入正题，我将分为服务端和客户端两个方面给大家讲解。讲之前，还是先画个图，给大家从全局上描绘一下。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161006233559373\" alt=\"这里写图片描述\" title=\"\"/></p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>客户端开发流程讲解</h2><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>第1步.下载服务端的差分包</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">下面是通过自定义的下载方法，得到差分包文件patchFile 。</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">String&nbsp;downUrl&nbsp;=&nbsp;&quot;http://www.castiel.com/apk.patch&quot;;

File&nbsp;patchFile&nbsp;=&nbsp;DownloadUtils.download(downUrl);public&nbsp;static&nbsp;File&nbsp;download(String&nbsp;url){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File&nbsp;file&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InputStream&nbsp;is&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileOutputStream&nbsp;os&nbsp;=&nbsp;null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file&nbsp;=&nbsp;new&nbsp;File(Environment.getExternalStorageDirectory(),Constants.PATCH_FILE);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(file.exists())&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.delete();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HttpURLConnection&nbsp;conn&nbsp;=&nbsp;(HttpURLConnection)&nbsp;new&nbsp;URL(url).openConnection();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;conn.setDoInput(true);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is&nbsp;=&nbsp;conn.getInputStream();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os&nbsp;=&nbsp;new&nbsp;FileOutputStream(file);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte[]&nbsp;buffer&nbsp;=&nbsp;new&nbsp;byte[1024];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;len&nbsp;=&nbsp;0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while((len&nbsp;=&nbsp;is.read(buffer))&nbsp;!=&nbsp;-1){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os.write(buffer,&nbsp;0,&nbsp;len);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch(Exception&nbsp;e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}finally{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os.close();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is.close();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;file;
&nbsp;&nbsp;&nbsp;&nbsp;}12345678910111213141516171819202122232425262728293031323334353637381234567891011121314151617181920212223242526272829303132333435363738</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>第2步.合并得到最新版本的APK文件</h3><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;oldfile&nbsp;=&nbsp;ApkUtils.getSourceApkPath(MainActivity.this,&nbsp;getPackageName());
&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;newfile&nbsp;=&nbsp;Constants.NEW_APK_PATH;
&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;patchfile&nbsp;=&nbsp;patchFile.getAbsolutePath();
&nbsp;&nbsp;&nbsp;&nbsp;BsPatch.patch(oldfile,&nbsp;newfile,&nbsp;patchfile);12341234</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">这里的BsPatch是我们的定义的调用Native方法的类</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;class&nbsp;BsPatch&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;合并包
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;oldfile&nbsp;旧版本文件
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;newfile&nbsp;新版本文件
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;patchfile&nbsp;合并后的文件
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;native&nbsp;static&nbsp;void&nbsp;patch(String&nbsp;oldfile,&nbsp;String&nbsp;newfile,&nbsp;String&nbsp;patchfile);&nbsp;&nbsp;&nbsp;&nbsp;static{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.loadLibrary(&quot;bspatch&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;}
}123456789101112123456789101112</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">其中加载的baspatch.c文件</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">#if&nbsp;0__FBSDID(&quot;$FreeBSD:&nbsp;src/usr.bin/bsdiff/bspatch/bspatch.c,v&nbsp;1.1&nbsp;2005/08/06&nbsp;01:59:06&nbsp;cperciva&nbsp;Exp&nbsp;$&quot;);#endif#include&nbsp;&lt;bzlib.h&gt;#include&nbsp;&lt;stdlib.h&gt;#include&nbsp;&lt;stdio.h&gt;#include&nbsp;&lt;string.h&gt;#include&nbsp;&lt;err.h&gt;#include&nbsp;&lt;unistd.h&gt;#include&nbsp;&lt;fcntl.h&gt;static&nbsp;off_t&nbsp;offtin(u_char&nbsp;*buf)
{
&nbsp;&nbsp;&nbsp;&nbsp;off_t&nbsp;y;

&nbsp;&nbsp;&nbsp;&nbsp;y=buf[7]&amp;0x7F;
&nbsp;&nbsp;&nbsp;&nbsp;y=y*256;y+=buf[6];
&nbsp;&nbsp;&nbsp;&nbsp;y=y*256;y+=buf[5];
&nbsp;&nbsp;&nbsp;&nbsp;y=y*256;y+=buf[4];
&nbsp;&nbsp;&nbsp;&nbsp;y=y*256;y+=buf[3];
&nbsp;&nbsp;&nbsp;&nbsp;y=y*256;y+=buf[2];
&nbsp;&nbsp;&nbsp;&nbsp;y=y*256;y+=buf[1];
&nbsp;&nbsp;&nbsp;&nbsp;y=y*256;y+=buf[0];&nbsp;&nbsp;&nbsp;&nbsp;if(buf[7]&amp;0x80)&nbsp;y=-y;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;y;
}int&nbsp;main(int&nbsp;argc,char&nbsp;*&nbsp;argv[])
{
&nbsp;&nbsp;&nbsp;&nbsp;FILE&nbsp;*&nbsp;f,&nbsp;*&nbsp;cpf,&nbsp;*&nbsp;dpf,&nbsp;*&nbsp;epf;
&nbsp;&nbsp;&nbsp;&nbsp;BZFILE&nbsp;*&nbsp;cpfbz2,&nbsp;*&nbsp;dpfbz2,&nbsp;*&nbsp;epfbz2;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;cbz2err,&nbsp;dbz2err,&nbsp;ebz2err;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;fd;
&nbsp;&nbsp;&nbsp;&nbsp;ssize_t&nbsp;oldsize,newsize;
&nbsp;&nbsp;&nbsp;&nbsp;ssize_t&nbsp;bzctrllen,bzdatalen;
&nbsp;&nbsp;&nbsp;&nbsp;u_char&nbsp;header[32],buf[8];
&nbsp;&nbsp;&nbsp;&nbsp;u_char&nbsp;*old,&nbsp;*new;
&nbsp;&nbsp;&nbsp;&nbsp;off_t&nbsp;oldpos,newpos;
&nbsp;&nbsp;&nbsp;&nbsp;off_t&nbsp;ctrl[3];
&nbsp;&nbsp;&nbsp;&nbsp;off_t&nbsp;lenread;
&nbsp;&nbsp;&nbsp;&nbsp;off_t&nbsp;i;&nbsp;&nbsp;&nbsp;&nbsp;if(argc!=4)&nbsp;errx(1,&quot;usage:&nbsp;%s&nbsp;oldfile&nbsp;newfile&nbsp;patchfile\\n&quot;,argv[0]);&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Open&nbsp;patch&nbsp;file&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;((f&nbsp;=&nbsp;fopen(argv[3],&nbsp;&quot;r&quot;))&nbsp;==&nbsp;NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err(1,&nbsp;&quot;fopen(%s)&quot;,&nbsp;argv[3]);&nbsp;&nbsp;&nbsp;&nbsp;/*
&nbsp;&nbsp;&nbsp;&nbsp;File&nbsp;format:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&quot;BSDIFF40&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;X
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;Y
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;24&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;sizeof(newfile)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;32&nbsp;&nbsp;X&nbsp;&nbsp;&nbsp;bzip2(control&nbsp;block)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;32+X&nbsp;&nbsp;&nbsp;&nbsp;Y&nbsp;&nbsp;&nbsp;bzip2(diff&nbsp;block)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;32+X+Y&nbsp;&nbsp;???&nbsp;bzip2(extra&nbsp;block)
&nbsp;&nbsp;&nbsp;&nbsp;with&nbsp;control&nbsp;block&nbsp;a&nbsp;set&nbsp;of&nbsp;triples&nbsp;(x,y,z)&nbsp;meaning&nbsp;&quot;add&nbsp;x&nbsp;bytes
&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;oldfile&nbsp;to&nbsp;x&nbsp;bytes&nbsp;from&nbsp;the&nbsp;diff&nbsp;block;&nbsp;copy&nbsp;y&nbsp;bytes&nbsp;from&nbsp;the
&nbsp;&nbsp;&nbsp;&nbsp;extra&nbsp;block;&nbsp;seek&nbsp;forwards&nbsp;in&nbsp;oldfile&nbsp;by&nbsp;z&nbsp;bytes&quot;.
&nbsp;&nbsp;&nbsp;&nbsp;*/

&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Read&nbsp;header&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(fread(header,&nbsp;1,&nbsp;32,&nbsp;f)&nbsp;&lt;&nbsp;32)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(feof(f))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errx(1,&nbsp;&quot;Corrupt&nbsp;patch\\n&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err(1,&nbsp;&quot;fread(%s)&quot;,&nbsp;argv[3]);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Check&nbsp;for&nbsp;appropriate&nbsp;magic&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(memcmp(header,&nbsp;&quot;BSDIFF40&quot;,&nbsp;8)&nbsp;!=&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errx(1,&nbsp;&quot;Corrupt&nbsp;patch\\n&quot;);&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Read&nbsp;lengths&nbsp;from&nbsp;header&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;bzctrllen=offtin(header+8);
&nbsp;&nbsp;&nbsp;&nbsp;bzdatalen=offtin(header+16);
&nbsp;&nbsp;&nbsp;&nbsp;newsize=offtin(header+24);&nbsp;&nbsp;&nbsp;&nbsp;if((bzctrllen&lt;0)&nbsp;||&nbsp;(bzdatalen&lt;0)&nbsp;||&nbsp;(newsize&lt;0))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errx(1,&quot;Corrupt&nbsp;patch\\n&quot;);&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Close&nbsp;patch&nbsp;file&nbsp;and&nbsp;re-open&nbsp;it&nbsp;via&nbsp;libbzip2&nbsp;at&nbsp;the&nbsp;right&nbsp;places&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(fclose(f))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err(1,&nbsp;&quot;fclose(%s)&quot;,&nbsp;argv[3]);&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;((cpf&nbsp;=&nbsp;fopen(argv[3],&nbsp;&quot;r&quot;))&nbsp;==&nbsp;NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err(1,&nbsp;&quot;fopen(%s)&quot;,&nbsp;argv[3]);&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(fseeko(cpf,&nbsp;32,&nbsp;SEEK_SET))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err(1,&nbsp;&quot;fseeko(%s,&nbsp;%lld)&quot;,&nbsp;argv[3],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(long&nbsp;long)32);&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;((cpfbz2&nbsp;=&nbsp;BZ2_bzReadOpen(&amp;cbz2err,&nbsp;cpf,&nbsp;0,&nbsp;0,&nbsp;NULL,&nbsp;0))&nbsp;==&nbsp;NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errx(1,&nbsp;&quot;BZ2_bzReadOpen,&nbsp;bz2err&nbsp;=&nbsp;%d&quot;,&nbsp;cbz2err);&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;((dpf&nbsp;=&nbsp;fopen(argv[3],&nbsp;&quot;r&quot;))&nbsp;==&nbsp;NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err(1,&nbsp;&quot;fopen(%s)&quot;,&nbsp;argv[3]);&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(fseeko(dpf,&nbsp;32&nbsp;+&nbsp;bzctrllen,&nbsp;SEEK_SET))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err(1,&nbsp;&quot;fseeko(%s,&nbsp;%lld)&quot;,&nbsp;argv[3],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(long&nbsp;long)(32&nbsp;+&nbsp;bzctrllen));&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;((dpfbz2&nbsp;=&nbsp;BZ2_bzReadOpen(&amp;dbz2err,&nbsp;dpf,&nbsp;0,&nbsp;0,&nbsp;NULL,&nbsp;0))&nbsp;==&nbsp;NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errx(1,&nbsp;&quot;BZ2_bzReadOpen,&nbsp;bz2err&nbsp;=&nbsp;%d&quot;,&nbsp;dbz2err);&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;((epf&nbsp;=&nbsp;fopen(argv[3],&nbsp;&quot;r&quot;))&nbsp;==&nbsp;NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err(1,&nbsp;&quot;fopen(%s)&quot;,&nbsp;argv[3]);&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(fseeko(epf,&nbsp;32&nbsp;+&nbsp;bzctrllen&nbsp;+&nbsp;bzdatalen,&nbsp;SEEK_SET))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err(1,&nbsp;&quot;fseeko(%s,&nbsp;%lld)&quot;,&nbsp;argv[3],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(long&nbsp;long)(32&nbsp;+&nbsp;bzctrllen&nbsp;+&nbsp;bzdatalen));&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;((epfbz2&nbsp;=&nbsp;BZ2_bzReadOpen(&amp;ebz2err,&nbsp;epf,&nbsp;0,&nbsp;0,&nbsp;NULL,&nbsp;0))&nbsp;==&nbsp;NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errx(1,&nbsp;&quot;BZ2_bzReadOpen,&nbsp;bz2err&nbsp;=&nbsp;%d&quot;,&nbsp;ebz2err);&nbsp;&nbsp;&nbsp;&nbsp;if(((fd=open(argv[1],O_RDONLY,0))&lt;0)&nbsp;||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((oldsize=lseek(fd,0,SEEK_END))==-1)&nbsp;||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((old=malloc(oldsize+1))==NULL)&nbsp;||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(lseek(fd,0,SEEK_SET)!=0)&nbsp;||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(read(fd,old,oldsize)!=oldsize)&nbsp;||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(close(fd)==-1))&nbsp;err(1,&quot;%s&quot;,argv[1]);&nbsp;&nbsp;&nbsp;&nbsp;if((new=malloc(newsize+1))==NULL)&nbsp;err(1,NULL);

&nbsp;&nbsp;&nbsp;&nbsp;oldpos=0;newpos=0;&nbsp;&nbsp;&nbsp;&nbsp;while(newpos&lt;newsize)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Read&nbsp;control&nbsp;data&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i=0;i&lt;=2;i++)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lenread&nbsp;=&nbsp;BZ2_bzRead(&amp;cbz2err,&nbsp;cpfbz2,&nbsp;buf,&nbsp;8);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;((lenread&nbsp;&lt;&nbsp;8)&nbsp;||&nbsp;((cbz2err&nbsp;!=&nbsp;BZ_OK)&nbsp;&amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(cbz2err&nbsp;!=&nbsp;BZ_STREAM_END)))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errx(1,&nbsp;&quot;Corrupt&nbsp;patch\\n&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctrl[i]=offtin(buf);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Sanity-check&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(newpos+ctrl[0]&gt;newsize)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errx(1,&quot;Corrupt&nbsp;patch\\n&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Read&nbsp;diff&nbsp;string&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lenread&nbsp;=&nbsp;BZ2_bzRead(&amp;dbz2err,&nbsp;dpfbz2,&nbsp;new&nbsp;+&nbsp;newpos,&nbsp;ctrl[0]);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;((lenread&nbsp;&lt;&nbsp;ctrl[0])&nbsp;||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((dbz2err&nbsp;!=&nbsp;BZ_OK)&nbsp;&amp;&amp;&nbsp;(dbz2err&nbsp;!=&nbsp;BZ_STREAM_END)))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errx(1,&nbsp;&quot;Corrupt&nbsp;patch\\n&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Add&nbsp;old&nbsp;data&nbsp;to&nbsp;diff&nbsp;string&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i=0;i&lt;ctrl[0];i++)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if((oldpos+i&gt;=0)&nbsp;&amp;&amp;&nbsp;(oldpos+i&lt;oldsize))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new[newpos+i]+=old[oldpos+i];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Adjust&nbsp;pointers&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newpos+=ctrl[0];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldpos+=ctrl[0];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Sanity-check&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(newpos+ctrl[1]&gt;newsize)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errx(1,&quot;Corrupt&nbsp;patch\\n&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Read&nbsp;extra&nbsp;string&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lenread&nbsp;=&nbsp;BZ2_bzRead(&amp;ebz2err,&nbsp;epfbz2,&nbsp;new&nbsp;+&nbsp;newpos,&nbsp;ctrl[1]);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;((lenread&nbsp;&lt;&nbsp;ctrl[1])&nbsp;||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((ebz2err&nbsp;!=&nbsp;BZ_OK)&nbsp;&amp;&amp;&nbsp;(ebz2err&nbsp;!=&nbsp;BZ_STREAM_END)))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errx(1,&nbsp;&quot;Corrupt&nbsp;patch\\n&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Adjust&nbsp;pointers&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newpos+=ctrl[1];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldpos+=ctrl[2];
&nbsp;&nbsp;&nbsp;&nbsp;};&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Clean&nbsp;up&nbsp;the&nbsp;bzip2&nbsp;reads&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;BZ2_bzReadClose(&amp;cbz2err,&nbsp;cpfbz2);
&nbsp;&nbsp;&nbsp;&nbsp;BZ2_bzReadClose(&amp;dbz2err,&nbsp;dpfbz2);
&nbsp;&nbsp;&nbsp;&nbsp;BZ2_bzReadClose(&amp;ebz2err,&nbsp;epfbz2);&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(fclose(cpf)&nbsp;||&nbsp;fclose(dpf)&nbsp;||&nbsp;fclose(epf))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err(1,&nbsp;&quot;fclose(%s)&quot;,&nbsp;argv[3]);&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Write&nbsp;the&nbsp;new&nbsp;file&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;if(((fd=open(argv[2],O_CREAT|O_TRUNC|O_WRONLY,0666))&lt;0)&nbsp;||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(write(fd,new,newsize)!=newsize)&nbsp;||&nbsp;(close(fd)==-1))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err(1,&quot;%s&quot;,argv[2]);&nbsp;&nbsp;&nbsp;&nbsp;free(new);&nbsp;&nbsp;&nbsp;&nbsp;free(old);&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;
}pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">为了JNI开发方便，我们可以生成BsPatch的头文件</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161006230131596\" alt=\"这里写图片描述\" title=\"\"/></p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">/*&nbsp;DO&nbsp;NOT&nbsp;EDIT&nbsp;THIS&nbsp;FILE&nbsp;-&nbsp;it&nbsp;is&nbsp;machine&nbsp;generated&nbsp;*/#include&nbsp;&lt;jni.h&gt;/*&nbsp;Header&nbsp;for&nbsp;class&nbsp;com_castiel_inupdate_utils_BsPatch&nbsp;*/#ifndef&nbsp;_Included_com_castiel_inupdate_utils_BsPatch#define&nbsp;_Included_com_castiel_inupdate_utils_BsPatch#ifdef&nbsp;__cplusplusextern&nbsp;&quot;C&quot;&nbsp;{#endif/*
&nbsp;*&nbsp;Class:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com_castiel_inupdate_utils_BsPatch
&nbsp;*&nbsp;Method:&nbsp;&nbsp;&nbsp;&nbsp;patch
&nbsp;*&nbsp;Signature:&nbsp;(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
&nbsp;*/JNIEXPORT&nbsp;void&nbsp;JNICALL&nbsp;Java_com_castiel_inupdate_utils_BsPatch_patch
&nbsp;&nbsp;(JNIEnv&nbsp;*,&nbsp;jclass,&nbsp;jstring,&nbsp;jstring,&nbsp;jstring);#ifdef&nbsp;__cplusplus}#endif#endif123456789101112131415161718192021123456789101112131415161718192021</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\"><a href=\"http://lib.csdn.net/base/android\" class=\"replace_word\" title=\"Android知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52);\">Android</a>.mk文件配置</strong></p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">LOCAL_PATH:=&nbsp;$(call&nbsp;my-dir)&nbsp;&nbsp;
include&nbsp;$(CLEAR_VARS)&nbsp;&nbsp;

LOCAL_MODULE:=&nbsp;bspatch&nbsp;&nbsp;&nbsp;
LOCAL_SRC_FILES:=&nbsp;bspatch.cinclude&nbsp;$(BUILD_SHARED_LIBRARY)&nbsp;&nbsp;12345671234567</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>第3步.安装合并后的新APK</h3><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">String&nbsp;newApkPath&nbsp;=&nbsp;Environment.getExternalStorageDirectory()&nbsp;+&nbsp;File.separator&nbsp;+&nbsp;&quot;castielNew.apk&quot;;
installApk(MainActivity.this,&nbsp;newApkPath);&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;安装Apk
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;context
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;apkPath
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;installApk(Context&nbsp;context,&nbsp;String&nbsp;apkPath)&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Intent&nbsp;intent&nbsp;=&nbsp;new&nbsp;Intent(Intent.ACTION_VIEW);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intent.setDataAndType(Uri.parse(&quot;file://&quot;&nbsp;+&nbsp;apkPath),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;application/vnd.android.package-archive&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.startActivity(intent);
&nbsp;&nbsp;&nbsp;&nbsp;}1234567891011121314151612345678910111213141516</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">注意不要忘记添加权限</strong></p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&lt;uses-permission&nbsp;android:name=&quot;android.permission.INTERNET&quot;/&gt;
&lt;uses-permission&nbsp;android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt;
&lt;uses-permission&nbsp;android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot;/&gt;</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>服务端开发流程讲解</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">其实开发非常简单，这里我简单的说明一下关键源码</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;class&nbsp;BsDiff&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;导入差分库，调用差分方法
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;oldfile
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;newfile
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;patchfile
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;native&nbsp;static&nbsp;void&nbsp;diff(String&nbsp;oldfile,&nbsp;String&nbsp;newfile,&nbsp;String&nbsp;patchfile);&nbsp;&nbsp;&nbsp;&nbsp;static{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.loadLibrary(&quot;bsdiff.so&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;}
}12345678910111213141234567891011121314</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://lib.csdn.net/base/softwaretest\" class=\"replace_word\" title=\"软件测试知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">测试</a>得到差分包</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;class&nbsp;Test&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;final&nbsp;String&nbsp;OLD_APK_PATH&nbsp;=&nbsp;&quot;你服务器端的路径/castiel_old.apk&quot;;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;final&nbsp;String&nbsp;NEW_APK_PATH&nbsp;=&nbsp;&quot;你服务器端的路径/castiel_new.apk&quot;;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;final&nbsp;String&nbsp;PATCH_PATH&nbsp;=&nbsp;&quot;你服务器端的路径/castiel/apk/apk.patch&quot;;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//得到差分包
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BsDiff.diff(ConstantsWin.OLD_APK_PATH,&nbsp;ConstantsWin.NEW_APK_PATH,&nbsp;ConstantsWin.PATCH_PATH);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

&nbsp;&nbsp;&nbsp;&nbsp;}

}12345678910111213141234567891011121314</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>增量更新的问题</h2><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>增量更新在实施中，我们无法保证用户每次都能够及时升级到最新版本，所以必须对所发布的每一个版本都和最新的版本作差分处理，以便让所有版本的用户都可以进行差分升级，这样的流程除非通过自动化的脚本批量生成否则比较繁琐。</p></li><li><p>增量更新对于手机内存无法提供足够空间用作本地APK合成的用户和本地APK损坏的用户来说，是无法实现的。</p></li></ul><p><br/></p>','0','2016-11-20 06:27:48') [ RunTime:0.1140s ]

[ 2016-11-20T18:27:49+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000832s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001573s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0074s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 0,10   [ RunTime:0.0013s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0006s ]

[ 2016-11-20T18:27:53+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000451s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000860s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0038s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 20,10   [ RunTime:0.0011s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:28:11+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000440s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000840s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0040s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:28:24+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000474s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000831s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0045s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0039s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 86  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0036s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 49  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('详解Android插件化开发-资源访问','86','49','<p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp;动态加载技术（也叫插件化技术），当项目越来越庞大的时候，我们通过插件化开发不仅可以减轻应用的内存和CPU占用，还可以实现热插拔，即在不发布新版本的情况下更新某些模块。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;通常我们把<a href=\"http://lib.csdn.net/base/android\" class=\"replace_word\" title=\"Android知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">安卓</a>资源文件制作成插件的形式，无外乎有一下几种：</p><blockquote style=\"box-sizing: border-box; margin: 0px 0px 1.1em; padding: 15px 20px; border-left: 10px solid rgba(128, 128, 128, 0.0745098); background-color: rgba(128, 128, 128, 0.0470588); border-radius: 0px 5px 5px 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; box-sizing: border-box; line-height: 1.25;\">zip、jar、dex、APK（未安装APK、安装APK）</p></blockquote><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;对于用户来讲未安装的APK才是用户所需要的，不安装、不重启，无声无息的加载资源文件，这正是我们开发者追求的结果。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;但是，开发中宿主程序调起未安装的插件apk，一个很大的问题就是资源如何访问，这些资源文件的ID都映射在gen文件夹下的R.<a href=\"http://lib.csdn.net/base/javaee\" class=\"replace_word\" title=\"Java EE知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Java</a>中，而插件中凡是以R开头的资源都不能访问。究其原因是因为宿主程序中并没有插件的资源，所以通过R来加载插件的资源是行不通的，程序会抛出异常：无法找到某某id所对应的资源。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;那么开发中该怎么办呢，今天我们来一起探讨一下插件化开发中资源文件访问的解决方案。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;想必大家在开发中都写过类似代码，例如，在主程序访问字符串文件</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">this.getResources().getString(R.string.app_name);11</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;这里的this，其实就是Context，上下文对象。通常我们的的APK安装路径为：</p><blockquote style=\"box-sizing: border-box; margin: 0px 0px 1.1em; padding: 15px 20px; border-left: 10px solid rgba(128, 128, 128, 0.0745098); background-color: rgba(128, 128, 128, 0.0470588); border-radius: 0px 5px 5px 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; box-sizing: border-box; line-height: 1.25;\">/data/apk/packagename~1/base.apk</p></blockquote><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;APK启动，Context通过类加载器加载完毕后，会去APK中加载资源文件。想必大家都知道，Activity的工作主要是通过ContextImpl来完成的， Activity中有一个叫mBase的成员变量，它的类型就是ContextImpl。注意到Context中有如下两个抽象方法，看起来是和资源有关的，实际上Context就是通过它们来获取资源的。这两个抽象方法的真正实现在ContextImpl中，也就是说，只要实现这两个方法，就可以解决资源问题了。</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">/**&nbsp;Return&nbsp;an&nbsp;AssetManager&nbsp;instance&nbsp;for&nbsp;your&nbsp;application&#39;s&nbsp;package.&nbsp;*/public&nbsp;abstract&nbsp;AssetManager&nbsp;getAssets();/**&nbsp;Return&nbsp;a&nbsp;Resources&nbsp;instance&nbsp;for&nbsp;your&nbsp;application&#39;s&nbsp;package.&nbsp;*/public&nbsp;abstract&nbsp;Resources&nbsp;getResources();12345671234567</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;我们若是想使用这两个方法，需要实例化Context对象，通常我们可以根据APK中的包名完成Context对象的创建：</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">Context&nbsp;pluginContext&nbsp;=&nbsp;this.createPackageContext(&quot;com.castiel.demo&quot;,flags);11</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;但是这样做有个前提，必须要求初始化时加载的是自己APK，如果我们加载的是未安装的插件APK，这么做肯定就不可取了。为啥呢，看源码：</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">Resources&nbsp;resources&nbsp;=&nbsp;packageInfo.getResources(mainThread);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(resources&nbsp;!=&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(activityToken&nbsp;!=&nbsp;null
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;||&nbsp;displayId&nbsp;!=&nbsp;Display.DEFAULT_DISPLAY
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;||&nbsp;overrideConfiguration&nbsp;!=&nbsp;null
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;||&nbsp;(compatInfo&nbsp;!=&nbsp;null&nbsp;&amp;&amp;&nbsp;compatInfo.applicationScale
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!=&nbsp;resources.getCompatibilityInfo().applicationScale))&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resources&nbsp;=&nbsp;mResourcesManager.getTopLevelResources(packageInfo.getResDir(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;packageInfo.getSplitResDirs(),&nbsp;packageInfo.getOverlayDirs(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;packageInfo.getApplicationInfo().sharedLibraryFiles,&nbsp;displayId,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;overrideConfiguration,&nbsp;compatInfo,&nbsp;activityToken);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mResources&nbsp;=&nbsp;resources;12345678910111213141234567891011121314</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Resources在这里被赋值，我们再去代码中第一行的packageInfo，它来自LoadedApk类，其中的getResources方法如下：</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;Resources&nbsp;getResources(ActivityThread&nbsp;mainThread)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(mResources&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mResources&nbsp;=&nbsp;mainThread.getTopLevelResources(mResDir,&nbsp;mSplitResDirs,&nbsp;mOverlayDirs,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mApplicationInfo.sharedLibraryFiles,&nbsp;Display.DEFAULT_DISPLAY,&nbsp;null,&nbsp;this);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;mResources;
&nbsp;&nbsp;&nbsp;&nbsp;}1234567812345678</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">该方法采用单例模式，注意其中的getTopLevelResources()方法中的第一个参数mResDir，我们继续找其源头，在ActivityThread类中，发现了：</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Creates&nbsp;the&nbsp;top&nbsp;level&nbsp;resources&nbsp;for&nbsp;the&nbsp;given&nbsp;package.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;Resources&nbsp;getTopLevelResources(String&nbsp;resDir,&nbsp;String[]&nbsp;splitResDirs,&nbsp;String[]&nbsp;overlayDirs,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String[]&nbsp;libDirs,&nbsp;int&nbsp;displayId,&nbsp;Configuration&nbsp;overrideConfiguration,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LoadedApk&nbsp;pkgInfo)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;mResourcesManager.getTopLevelResources(resDir,&nbsp;splitResDirs,&nbsp;overlayDirs,&nbsp;libDirs,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayId,&nbsp;overrideConfiguration,&nbsp;pkgInfo.getCompatibilityInfo(),&nbsp;null);
&nbsp;&nbsp;&nbsp;&nbsp;}123456789123456789</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">重点看里面的resDir参数，我们再往上找源码，最终找到ResourcesManager类，找到getTopLevelResources()方法：</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Creates&nbsp;the&nbsp;top&nbsp;level&nbsp;Resources&nbsp;for&nbsp;applications&nbsp;with&nbsp;the&nbsp;given&nbsp;compatibility&nbsp;info.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;resDir&nbsp;the&nbsp;resource&nbsp;directory.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;overlayDirs&nbsp;the&nbsp;resource&nbsp;overlay&nbsp;directories.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;libDirs&nbsp;the&nbsp;shared&nbsp;library&nbsp;resource&nbsp;dirs&nbsp;this&nbsp;app&nbsp;references.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;compatInfo&nbsp;the&nbsp;compability&nbsp;info.&nbsp;Must&nbsp;not&nbsp;be&nbsp;null.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;token&nbsp;the&nbsp;application&nbsp;token&nbsp;for&nbsp;determining&nbsp;stack&nbsp;bounds.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Resources&nbsp;getTopLevelResources(String&nbsp;resDir,&nbsp;String[]&nbsp;splitResDirs,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String[]&nbsp;overlayDirs,&nbsp;String[]&nbsp;libDirs,&nbsp;int&nbsp;displayId,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Configuration&nbsp;overrideConfiguration,&nbsp;CompatibilityInfo&nbsp;compatInfo,&nbsp;IBinder&nbsp;token)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;float&nbsp;scale&nbsp;=&nbsp;compatInfo.applicationScale;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ResourcesKey&nbsp;key&nbsp;=&nbsp;new&nbsp;ResourcesKey(resDir,&nbsp;displayId,&nbsp;overrideConfiguration,&nbsp;scale,&nbsp;token);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Resources&nbsp;r;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(this)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Resources&nbsp;is&nbsp;app&nbsp;scale&nbsp;dependent.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(false)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Slog.w(TAG,&nbsp;&quot;getTopLevelResources:&nbsp;&quot;&nbsp;+&nbsp;resDir&nbsp;+&nbsp;&quot;&nbsp;/&nbsp;&quot;&nbsp;+&nbsp;scale);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WeakReference&lt;Resources&gt;&nbsp;wr&nbsp;=&nbsp;mActiveResources.get(key);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r&nbsp;=&nbsp;wr&nbsp;!=&nbsp;null&nbsp;?&nbsp;wr.get()&nbsp;:&nbsp;null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//if&nbsp;(r&nbsp;!=&nbsp;null)&nbsp;Slog.i(TAG,&nbsp;&quot;isUpToDate&nbsp;&quot;&nbsp;+&nbsp;resDir&nbsp;+&nbsp;&quot;:&nbsp;&quot;&nbsp;+&nbsp;r.getAssets().isUpToDate());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(r&nbsp;!=&nbsp;null&nbsp;&amp;&amp;&nbsp;r.getAssets().isUpToDate())&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(false)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Slog.w(TAG,&nbsp;&quot;Returning&nbsp;cached&nbsp;resources&nbsp;&quot;&nbsp;+&nbsp;r&nbsp;+&nbsp;&quot;&nbsp;&quot;&nbsp;+&nbsp;resDir
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;&quot;:&nbsp;appScale=&quot;&nbsp;+&nbsp;r.getCompatibilityInfo().applicationScale);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;r;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//if&nbsp;(r&nbsp;!=&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;Slog.w(TAG,&nbsp;&quot;Throwing&nbsp;away&nbsp;out-of-date&nbsp;resources!!!!&nbsp;&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;r&nbsp;+&nbsp;&quot;&nbsp;&quot;&nbsp;+&nbsp;resDir);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AssetManager&nbsp;assets&nbsp;=&nbsp;new&nbsp;AssetManager();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;resDir&nbsp;can&nbsp;be&nbsp;null&nbsp;if&nbsp;the&nbsp;&#39;android&#39;&nbsp;package&nbsp;is&nbsp;creating&nbsp;a&nbsp;new&nbsp;Resources&nbsp;object.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;This&nbsp;is&nbsp;fine,&nbsp;since&nbsp;each&nbsp;AssetManager&nbsp;automatically&nbsp;loads&nbsp;the&nbsp;&#39;android&#39;&nbsp;package
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;already.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(resDir&nbsp;!=&nbsp;null)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(assets.addAssetPath(resDir)&nbsp;==&nbsp;0)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(splitResDirs&nbsp;!=&nbsp;null)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(String&nbsp;splitResDir&nbsp;:&nbsp;splitResDirs)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(assets.addAssetPath(splitResDir)&nbsp;==&nbsp;0)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(overlayDirs&nbsp;!=&nbsp;null)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(String&nbsp;idmapPath&nbsp;:&nbsp;overlayDirs)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assets.addOverlayPath(idmapPath);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(libDirs&nbsp;!=&nbsp;null)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(String&nbsp;libDir&nbsp;:&nbsp;libDirs)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(assets.addAssetPath(libDir)&nbsp;==&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Slog.w(TAG,&nbsp;&quot;Asset&nbsp;path&nbsp;&#39;&quot;&nbsp;+&nbsp;libDir&nbsp;+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&#39;&nbsp;does&nbsp;not&nbsp;exist&nbsp;or&nbsp;contains&nbsp;no&nbsp;resources.&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Slog.i(TAG,&nbsp;&quot;Resource:&nbsp;key=&quot;&nbsp;+&nbsp;key&nbsp;+&nbsp;&quot;,&nbsp;display&nbsp;metrics=&quot;&nbsp;+&nbsp;metrics);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DisplayMetrics&nbsp;dm&nbsp;=&nbsp;getDisplayMetricsLocked(displayId);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Configuration&nbsp;config;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean&nbsp;isDefaultDisplay&nbsp;=&nbsp;(displayId&nbsp;==&nbsp;Display.DEFAULT_DISPLAY);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;boolean&nbsp;hasOverrideConfig&nbsp;=&nbsp;key.hasOverrideConfiguration();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!isDefaultDisplay&nbsp;||&nbsp;hasOverrideConfig)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;config&nbsp;=&nbsp;new&nbsp;Configuration(getConfiguration());&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!isDefaultDisplay)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;applyNonDefaultDisplayMetricsToConfigurationLocked(dm,&nbsp;config);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(hasOverrideConfig)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;config.updateFrom(key.mOverrideConfiguration);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;config&nbsp;=&nbsp;getConfiguration();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r&nbsp;=&nbsp;new&nbsp;Resources(assets,&nbsp;dm,&nbsp;config,&nbsp;compatInfo,&nbsp;token);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(false)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Slog.i(TAG,&nbsp;&quot;Created&nbsp;app&nbsp;resources&nbsp;&quot;&nbsp;+&nbsp;resDir&nbsp;+&nbsp;&quot;&nbsp;&quot;&nbsp;+&nbsp;r&nbsp;+&nbsp;&quot;:&nbsp;&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;r.getConfiguration()&nbsp;+&nbsp;&quot;&nbsp;appScale=&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;r.getCompatibilityInfo().applicationScale);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(this)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WeakReference&lt;Resources&gt;&nbsp;wr&nbsp;=&nbsp;mActiveResources.get(key);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Resources&nbsp;existing&nbsp;=&nbsp;wr&nbsp;!=&nbsp;null&nbsp;?&nbsp;wr.get()&nbsp;:&nbsp;null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(existing&nbsp;!=&nbsp;null&nbsp;&amp;&amp;&nbsp;existing.getAssets().isUpToDate())&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Someone&nbsp;else&nbsp;already&nbsp;created&nbsp;the&nbsp;resources&nbsp;while&nbsp;we&nbsp;were
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;unlocked;&nbsp;go&nbsp;ahead&nbsp;and&nbsp;use&nbsp;theirs.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r.getAssets().close();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;existing;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;XXX&nbsp;need&nbsp;to&nbsp;remove&nbsp;entries&nbsp;when&nbsp;weak&nbsp;references&nbsp;go&nbsp;away
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mActiveResources.put(key,&nbsp;new&nbsp;WeakReference&lt;Resources&gt;(r));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;r;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
}123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">该方法的注释中，明确指出@param resDir the resource directory，加载本地资源目录，加载自己的APK。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">通过以上的分析，我们知道getResources()方法通过AssetManager加载自己的APK，那么我们要想加载未安装的插件APK，唯有自定义实现一个Resources类，专门用来加载未安装的APK。但是我试过了，直接重写不行，为啥，因为<a href=\"http://lib.csdn.net/base/android\" class=\"replace_word\" title=\"Android知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Android</a>并没有提供Resource构造方法中的AssetManager的构造方法，我们看下源码：</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Create&nbsp;a&nbsp;new&nbsp;Resources&nbsp;object&nbsp;on&nbsp;top&nbsp;of&nbsp;an&nbsp;existing&nbsp;set&nbsp;of&nbsp;assets&nbsp;in&nbsp;an
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;AssetManager.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;assets&nbsp;Previously&nbsp;created&nbsp;AssetManager.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;metrics&nbsp;Current&nbsp;display&nbsp;metrics&nbsp;to&nbsp;consider&nbsp;when
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selecting/computing&nbsp;resource&nbsp;values.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;config&nbsp;Desired&nbsp;device&nbsp;configuration&nbsp;to&nbsp;consider&nbsp;when
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selecting/computing&nbsp;resource&nbsp;values&nbsp;(optional).
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Resources(AssetManager&nbsp;assets,&nbsp;DisplayMetrics&nbsp;metrics,&nbsp;Configuration&nbsp;config)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(assets,&nbsp;metrics,&nbsp;config,&nbsp;CompatibilityInfo.DEFAULT_COMPATIBILITY_INFO);
&nbsp;&nbsp;&nbsp;&nbsp;}1234567891011121312345678910111213</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">接着再看一下Resource构造方法中的AssetManager参数源码</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Create&nbsp;a&nbsp;new&nbsp;AssetManager&nbsp;containing&nbsp;only&nbsp;the&nbsp;basic&nbsp;system&nbsp;assets.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Applications&nbsp;will&nbsp;not&nbsp;generally&nbsp;use&nbsp;this&nbsp;method,&nbsp;instead&nbsp;retrieving&nbsp;the
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;appropriate&nbsp;asset&nbsp;manager&nbsp;with&nbsp;{@link&nbsp;Resources#getAssets}.&nbsp;&nbsp;&nbsp;&nbsp;Not&nbsp;for
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;use&nbsp;by&nbsp;applications.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;{@hide}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;AssetManager()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(this)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(DEBUG_REFS)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mNumRefs&nbsp;=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;incRefsLocked(this.hashCode());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init(false);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(localLOGV)&nbsp;Log.v(TAG,&nbsp;&quot;New&nbsp;asset&nbsp;manager:&nbsp;&quot;&nbsp;+&nbsp;this);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ensureSystemAssets();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}123456789101112131415161718123456789101112131415161718</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">注意注释中的{@hide}，隐藏起来了，Android系统不让我们使用。既然不让我们直接使用，那我们可以采用反射的方式来拿到AssetManager。接下来我把自定义的实现类贴出来，给大家示例：</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">/**
&nbsp;*&nbsp;
&nbsp;*&nbsp;@ClassName:&nbsp;MyPluginResources&nbsp;
&nbsp;*&nbsp;@Description:&nbsp;自定义插件资源文件获取工具类
&nbsp;*&nbsp;@author&nbsp;猴子搬来的救兵http://blog.csdn.net/mynameishuangshuai
&nbsp;*&nbsp;@version
&nbsp;*/public&nbsp;class&nbsp;MyPluginResources&nbsp;extends&nbsp;Resources{

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;MyPluginResources(AssetManager&nbsp;assets,&nbsp;DisplayMetrics&nbsp;metrics,&nbsp;Configuration&nbsp;config)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(assets,&nbsp;metrics,&nbsp;config);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;自定义返回插件的资源文件的Resource方法
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;resources
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;assets
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;MyPluginResources&nbsp;getPluginResources(Resources&nbsp;resources,AssetManager&nbsp;assets){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyPluginResources&nbsp;pluginResources&nbsp;=&nbsp;new&nbsp;MyPluginResources(assets,&nbsp;resources.getDisplayMetrics(),&nbsp;resources.getConfiguration());&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;pluginResources;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;

&nbsp;&nbsp;&nbsp;&nbsp;//自己定义加载插件APK的AssetsManager
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;AssetManager&nbsp;getPluginAssetsManager(File&nbsp;apkFile,Resources&nbsp;resources)&nbsp;throws&nbsp;ClassNotFoundException{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;由于系统没有提供AssetManager的实例化方法，因此我们使用反射
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&gt;&nbsp;forName&nbsp;=&nbsp;Class.forName(&quot;android.content.res.AssetManager&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method[]&nbsp;declaredMethods&nbsp;=&nbsp;forName.getDeclaredMethods();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(Method&nbsp;method&nbsp;:declaredMethods){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(method.getName().equals(&quot;addAssetPath&quot;)){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AssetManager&nbsp;assetManager&nbsp;=&nbsp;AssetManager.class.newInstance();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;调用addAssetPath方法，参数为我们插件APK的路径
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method.invoke(assetManager,&nbsp;apkFile.getAbsolutePath());&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;assetManager;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(Exception&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;}
}12345678910111213141516171819202122232425262728293031323334353637383940414243441234567891011121314151617181920212223242526272829303132333435363738394041424344</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161005154650828\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">这样，我们在项目中就可以使用我们自定义的AssetManager来获取未安装插件APK中的资源文件</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">AssetManager&nbsp;assetManager&nbsp;=&nbsp;PluginResources.getPluginAssetsManager(apkFile,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.getResources());</pre><p><br/></p>','0','2016-11-20 06:28:24') [ RunTime:0.0931s ]

[ 2016-11-20T18:28:26+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000683s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001344s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0069s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 0,10   [ RunTime:0.0013s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0005s ]

[ 2016-11-20T18:28:27+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000439s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000835s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0060s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 20,10   [ RunTime:0.0011s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0004s ]

[ 2016-11-20T18:28:38+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000436s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000832s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0037s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:28:54+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000363s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000688s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0043s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0045s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 86  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0036s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 49  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('DexClassLoader和PathClassLoader的区别','86','49','<p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp;在使用<a href=\"http://lib.csdn.net/base/javaee\" class=\"replace_word\" title=\"Java EE知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Java</a>虚拟机时，我们经常自定义继承自ClassLoader的类加载器。然后通过defineClass方法来从一个二进制流中加载Class。而在<a href=\"http://lib.csdn.net/base/android\" class=\"replace_word\" title=\"Android知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Android</a>中我们无法这么使用，Android中ClassLoader的defineClass方法具体是调用VMClassLoader的defineClass本地静态方法。而这个本地方法什么都没做，只是抛出了一个“UnsupportedOperationException”异常。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;既然在Dalvik虚拟机里，ClassLoader不好用，那么Android官方为了解决这个问题，帮我们从ClassLoader中派生出了两个类：<strong style=\"box-sizing: border-box;\">DexClassLoader</strong>和<strong style=\"box-sizing: border-box;\">PathClassLoader</strong>。咋一看两者很像，那么究竟二者在使用上面有何不同，这里我和大家一起探讨一下。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">首先来看一下二者的构造方法</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>DexClassLoader</h3><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;DexClassLoader&nbsp;(String&nbsp;dexPath,&nbsp;String&nbsp;dexOutputDir,&nbsp;String&nbsp;libPath,&nbsp;ClassLoader&nbsp;parent)11</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">参数详解：</p><blockquote style=\"box-sizing: border-box; margin: 0px 0px 1.1em; padding: 15px 20px; border-left: 10px solid rgba(128, 128, 128, 0.0745098); background-color: rgba(128, 128, 128, 0.0470588); border-radius: 0px 5px 5px 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; box-sizing: border-box; line-height: 1.25;\">dexPath：dex文件路径列表，多个路径使用”:”分隔&nbsp;<br/>dexOutputDir：经过优化的dex文件（odex）文件输出目录&nbsp;<br/>libPath：动态库路径（将被添加到app动态库搜索路径列表中）&nbsp;<br/>parent：这是一个ClassLoader，这个参数的主要作用是保留java中ClassLoader的委托机制（优先父类加载器加载classes，由上而下的加载机制，防止重复加载类字节码）</p></blockquote><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">DexClassLoader是一个可以从包含classes.dex实体的.jar或.apk文件中加载classes的类加载器。可以用于实现dex的动态加载、代码热更新等等。这个类加载器必须要一个app的私有、可写目录来缓存经过优化的classes（odex文件），使用Context.getDir(String, int)方法可以创建一个这样的目录，例如：</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">File&nbsp;dexOutputDir&nbsp;=&nbsp;context.getDir(“dex”,&nbsp;0);11</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>PathClassLoader</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">PathClassLoader提供两个常用构造方法</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;PathClassLoader&nbsp;(String&nbsp;path,&nbsp;ClassLoader&nbsp;parent)11</pre><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;PathClassLoader&nbsp;(String&nbsp;path,&nbsp;String&nbsp;libPath,&nbsp;ClassLoader&nbsp;parent)11</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">参数详解：</p><blockquote style=\"box-sizing: border-box; margin: 0px 0px 1.1em; padding: 15px 20px; border-left: 10px solid rgba(128, 128, 128, 0.0745098); background-color: rgba(128, 128, 128, 0.0470588); border-radius: 0px 5px 5px 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; box-sizing: border-box; line-height: 1.25;\">path：文件或者目录的列表&nbsp;<br/>libPath：包含lib库的目录列表&nbsp;<br/>parent：父类加载器</p></blockquote><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">PathClassLoader提供一个简单的ClassLoader实现，可以操作在本地文件系统的文件列表或目录中的classes，但不可以从网络中加载classes。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">为了便于理解，我们查看一下二者的源码：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161005111012485\" alt=\"这里写图片描述\" title=\"\"/></p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">//&nbsp;DexClassLoader.javapublic&nbsp;class&nbsp;DexClassLoader&nbsp;extends&nbsp;BaseDexClassLoader&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;DexClassLoader(String&nbsp;dexPath,&nbsp;String&nbsp;optimizedDirectory,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;libraryPath,&nbsp;ClassLoader&nbsp;parent)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(dexPath,&nbsp;new&nbsp;File(optimizedDirectory),&nbsp;libraryPath,&nbsp;parent);
&nbsp;&nbsp;&nbsp;&nbsp;}
}//&nbsp;版权所有，猴子搬来的救兵http://blog.csdn.net/mynameishuangshuai//&nbsp;PathClassLoader.javapublic&nbsp;class&nbsp;PathClassLoader&nbsp;extends&nbsp;BaseDexClassLoader&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;PathClassLoader(String&nbsp;dexPath,&nbsp;ClassLoader&nbsp;parent)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(dexPath,&nbsp;null,&nbsp;null,&nbsp;parent);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;PathClassLoader(String&nbsp;dexPath,&nbsp;String&nbsp;libraryPath,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ClassLoader&nbsp;parent)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(dexPath,&nbsp;null,&nbsp;libraryPath,&nbsp;parent);
&nbsp;&nbsp;&nbsp;&nbsp;}
}123456789101112131415161718192021123456789101112131415161718192021</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">很明显两者都继承于BaseDexClassLoader类，并做了一下封装，具体的实现还是在父类里。不难看出，主要的区别在于PathClassLoader的optimizedDirectory参数只能是null，那么optimizedDirectory是做什么用的呢？我们进BaseDexClassLoader去看看这个参数。</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;BaseDexClassLoader(String&nbsp;dexPath,&nbsp;File&nbsp;optimizedDirectory,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;libraryPath,&nbsp;ClassLoader&nbsp;parent)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(parent);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.originalPath&nbsp;=&nbsp;dexPath;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.pathList&nbsp;=&nbsp;new&nbsp;DexPathList(this,&nbsp;dexPath,&nbsp;libraryPath,&nbsp;optimizedDirectory);
&nbsp;&nbsp;&nbsp;&nbsp;}123456123456</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">代码中与optimizedDirectory有关的地方是new 一个DexPathList实例。</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&nbsp;public&nbsp;DexPathList(ClassLoader&nbsp;definingContext,&nbsp;String&nbsp;dexPath,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;libraryPath,&nbsp;File&nbsp;optimizedDirectory)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.dexElements&nbsp;=&nbsp;makeDexElements(splitDexPath(dexPath),&nbsp;optimizedDirectory);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;Element[]&nbsp;makeDexElements(ArrayList&lt;File&gt;&nbsp;files,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File&nbsp;optimizedDirectory)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ArrayList&lt;Element&gt;&nbsp;elements&nbsp;=&nbsp;new&nbsp;ArrayList&lt;Element&gt;();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(File&nbsp;file&nbsp;:&nbsp;files)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ZipFile&nbsp;zip&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DexFile&nbsp;dex&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;name&nbsp;=&nbsp;file.getName();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(name.endsWith(DEX_SUFFIX))&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dex&nbsp;=&nbsp;loadDexFile(file,&nbsp;optimizedDirectory);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if&nbsp;(name.endsWith(APK_SUFFIX)&nbsp;||&nbsp;name.endsWith(JAR_SUFFIX)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;||&nbsp;name.endsWith(ZIP_SUFFIX))&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;zip&nbsp;=&nbsp;new&nbsp;ZipFile(file);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;((zip&nbsp;!=&nbsp;null)&nbsp;||&nbsp;(dex&nbsp;!=&nbsp;null))&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elements.add(new&nbsp;Element(file,&nbsp;zip,&nbsp;dex));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;elements.toArray(new&nbsp;Element[elements.size()]);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;DexFile&nbsp;loadDexFile(File&nbsp;file,&nbsp;File&nbsp;optimizedDirectory)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throws&nbsp;IOException&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(optimizedDirectory&nbsp;==&nbsp;null)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;DexFile(file);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;optimizedPath&nbsp;=&nbsp;optimizedPathFor(file,&nbsp;optimizedDirectory);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;DexFile.loadDex(file.getPath(),&nbsp;optimizedPath,&nbsp;0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Converts&nbsp;a&nbsp;dex/jar&nbsp;file&nbsp;path&nbsp;and&nbsp;an&nbsp;output&nbsp;directory&nbsp;to&nbsp;an
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;output&nbsp;file&nbsp;path&nbsp;for&nbsp;an&nbsp;associated&nbsp;optimized&nbsp;dex&nbsp;file.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;String&nbsp;optimizedPathFor(File&nbsp;path,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File&nbsp;optimizedDirectory)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;fileName&nbsp;=&nbsp;path.getName();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!fileName.endsWith(DEX_SUFFIX))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;lastDot&nbsp;=&nbsp;fileName.lastIndexOf(&quot;.&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(lastDot&nbsp;&lt;&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileName&nbsp;+=&nbsp;DEX_SUFFIX;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringBuilder&nbsp;sb&nbsp;=&nbsp;new&nbsp;StringBuilder(lastDot&nbsp;+&nbsp;4);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.append(fileName,&nbsp;0,&nbsp;lastDot);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.append(DEX_SUFFIX);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileName&nbsp;=&nbsp;sb.toString();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File&nbsp;result&nbsp;=&nbsp;new&nbsp;File(optimizedDirectory,&nbsp;fileName);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result.getPath();
&nbsp;&nbsp;&nbsp;&nbsp;}1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575812345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">optimizedDirectory是用来缓存我们需要加载的dex文件的，并创建一个DexFile对象，如果它为null，那么会直接使用dex文件原有的路径来创建DexFile&nbsp;<br/>对象。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">optimizedDirectory必须是一个内部存储路径，无论哪种动态加载，加载的可执行文件一定要存放在内部存储。DexClassLoader可以指定自己的optimizedDirectory，所以它可以加载外部的dex，因为这个dex会被复制到内部路径的optimizedDirectory；而PathClassLoader没有optimizedDirectory，所以它只能加载内部的dex，这些大都是存在系统中已经安装过的apk里面的。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>通过以上的分析，我们可以得出二者功能上的区别</h3><blockquote style=\"box-sizing: border-box; margin: 0px 0px 1.1em; padding: 15px 20px; border-left: 10px solid rgba(128, 128, 128, 0.0745098); background-color: rgba(128, 128, 128, 0.0470588); border-radius: 0px 5px 5px 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; box-sizing: border-box; line-height: 1.25;\">DexClassLoader：能够加载未安装的jar/apk/dex&nbsp;<br/>PathClassLoader：只能加载系统中已经安装过的apk</p></blockquote><p><br/></p>','0','2016-11-20 06:28:54') [ RunTime:0.0717s ]

[ 2016-11-20T18:28:55+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000972s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002415s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0075s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 0,10   [ RunTime:0.0014s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0004s ]

[ 2016-11-20T18:28:59+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000454s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000844s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0042s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 20,10   [ RunTime:0.0012s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0005s ]

[ 2016-11-20T18:29:09+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000443s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000838s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0036s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:29:28+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000451s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000979s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0040s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0040s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 86  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0038s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 49  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('getApplication()和getApplicationContext()区别','86','49','<p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box;\">二者使用结果相同，我们写个代码分别打印二者返回结果，发现两个方法获取的是同一个对象。</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;class&nbsp;MainActivity&nbsp;extends&nbsp;Activity&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;void&nbsp;onCreate(Bundle&nbsp;savedInstanceState)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.onCreate(savedInstanceState);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setContentView(R.layout.activity_main);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Application&nbsp;application&nbsp;=&nbsp;getApplication();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(&quot;WY&quot;,&nbsp;&quot;打印getApplication：&quot;&nbsp;+&nbsp;application);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Context&nbsp;pContext&nbsp;=&nbsp;getApplicationContext();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(&quot;WY&quot;,&nbsp;&quot;打印getApplicationContext：&quot;&nbsp;+&nbsp;pContext);
&nbsp;&nbsp;&nbsp;&nbsp;}
}123456789101112123456789101112</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box;\"><img src=\"http://img.blog.csdn.net/20161004182118018\" alt=\"这里写图片描述\" title=\"\"/></p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100;\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>区别</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box;\">&nbsp;&nbsp;&nbsp;&nbsp;getApplication()是用来获取Application实例的，但是该方法只在Activity和Service中才能调用；在一些其他的地方，比如说当我们在BroadcastReceiver中也想获取Application实例，这时就需要使用getApplicationContext()方法</p><p><br/></p>','0','2016-11-20 06:29:28') [ RunTime:0.1045s ]

[ 2016-11-20T18:29:29+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000986s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001687s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0059s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 0,10   [ RunTime:0.0011s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0007s ]

[ 2016-11-20T18:29:43+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000363s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000689s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0066s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%安卓%' AND a.member_id = '86' LIMIT 0,10   [ RunTime:0.0016s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%%安卓%%' AND a.member_id = '86'  [ RunTime:0.0004s ]

[ 2016-11-20T18:29:50+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000436s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000834s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0041s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:30:06+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000422s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000813s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0036s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0036s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 86  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0041s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 49  [ RunTime:0.0002s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('Android热修复(Hot Fix)案例全剖析（二）','86','49','<p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp;在上篇博客中，我们初步了解了<a href=\"http://lib.csdn.net/base/android\" class=\"replace_word\" title=\"Android知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Android</a>热修复的基本流程，具体可以看我的博客<a href=\"http://blog.csdn.net/mynameishuangshuai/article/details/52718202\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Android热修复(Hot Fix)案例全剖析（一）</a>，那么本篇博客，我将为大家全面剖析Android热修复的实现案例。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>1.将下载的修复补丁拷贝到应用的内部缓存目录中</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;在上一篇文章中，我们已经生成了用于修复Bug的classes2.dex补丁包，通常我们会在APP后台子线程中自动调用热修复接口，并下载修复补丁，这里为了方便演示，我们把已经下载好的dex补丁文件放到SD卡中，然后将下载的修复补丁拷贝到应用的内部缓存目录中cacheDir，之所以这样做是因为下一步我们需要使用类加载器ClassLoader在内部缓存中加载classese.dex包。下面是我写的一个将classes2.dex包拷贝到内部缓存目录中的方法。</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">/**
&nbsp;*&nbsp;修复方法
&nbsp;*/private&nbsp;void&nbsp;castielFixMethod()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;创建一个内部缓存目录，把我们SD卡中的&quot;classes2.dex&quot;文件拷贝到内部缓存目录中cache
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File&nbsp;fileSDir&nbsp;=&nbsp;getDir(MyConstants.DEX_DIR,&nbsp;Context.MODE_PRIVATE);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;name&nbsp;=&nbsp;&quot;classes2.dex&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;filePath&nbsp;=&nbsp;fileSDir.getAbsolutePath()&nbsp;+&nbsp;File.separator&nbsp;+&nbsp;name;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File&nbsp;file&nbsp;=&nbsp;new&nbsp;File(filePath);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(file.exists())&nbsp;{//&nbsp;判断是否已经存在dex文件
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(&quot;WY&quot;,&nbsp;&quot;已经存在dex文件&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.delete();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;通过IO流将dex文件写到我们的缓存目录中去
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InputStream&nbsp;is&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileOutputStream&nbsp;fos&nbsp;=&nbsp;null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;版权所有，未经许可请勿转载：猴子搬来的救兵http://blog.csdn.net/mynameishuangshuai
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is&nbsp;=&nbsp;new&nbsp;FileInputStream(Environment.getExternalStorageDirectory());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fos&nbsp;=&nbsp;new&nbsp;FileOutputStream(filePath);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;len&nbsp;=&nbsp;0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte[]&nbsp;buffer&nbsp;=&nbsp;new&nbsp;byte[1024];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;((len&nbsp;=&nbsp;is.read(buffer))&nbsp;!=&nbsp;-1)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fos.write(buffer,&nbsp;0,&nbsp;len);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File&nbsp;f&nbsp;=&nbsp;new&nbsp;File(filePath);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(&quot;WY&quot;,&nbsp;&quot;filePath:&quot;&nbsp;+&nbsp;f.getAbsolutePath());&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(f.exists())&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Toast.makeText(this,&nbsp;&quot;新的dex文件已经覆盖&quot;,&nbsp;Toast.LENGTH_LONG).show();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;动态加载修复dex包&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FixDexUtils.loadFixedDex(this);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;finally&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fos.close();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is.close();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}1234567891011121314151617181920212223242526272829303132333435363738394041424312345678910111213141516171819202122232425262728293031323334353637383940414243</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>2.实现热修复工具类</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">这里首先给大家普及一下类加载的原理：&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;在Android系统启动的时候会创建一个Boot类型的ClassLoader实例，用于加载一些系统Framework层级需要的类。由于Android应用里也需要用到一些系统的类，所以APP启动的时候也会把这个Boot类型的ClassLoader传进来。此外，APP也有自己的类，这些类保存在APK的dex文件里面，所以APP启动的时候，也会创建一个自己的ClassLoader实例，用于加载自己dex文件中的类。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;ClassLoader去加载Dex文件，首先Dex文件是放在/data/apk/packagename~1/base/apk，由于apk是一个类似于压缩包的东西，Android其实是使用一个优化的临时缓存目录optimizeDir(dex)，专门把Dex文件解压进去，这样以后就从这个临时缓存目录中加载，提高效率。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;在1代码中我们提到了loadFixedDex()方法，便是我们的核心热修复工具类，我给大家具体讲一下：&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;ClassLoader有一个简单的实现类-PathClassLoader。该类作为Android的默认的类加载器，本身继承自BaseDexClassLoader，BaseDexClassLoader重写了findClass方法，该方法是ClassLoader的核心。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;每个ClassLoader有一个pathList变量，是标识dex文件的路径，我们通过该路径加载dex文件，默认不分包的时候只有一个dex文件，当然谷歌在顶层设计时允许我们有多个dex文件。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;ClassLoader去找optimizeDir(dex)目录，然后把目录添加到pathList里面去，接着去找目录下面的所有的dex文件，把这些dex文件当做一个数组放到dexElements中去，这样就可以有多个dex文件。</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">pathList{
&nbsp;&nbsp;&nbsp;&nbsp;dexElements{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[classes.dex,classes2.dex]
&nbsp;&nbsp;&nbsp;&nbsp;}
}1234512345</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;ClassLoader每加载一个类，它会先找classes.dex，如果找不到就去classes2.dex中找，如果里面又一个dex有问题，比如说classes2.dex出问题了，我们就需要弄一个修复的新的classes2.dex文件放到数组中去，替换掉有问题的；但是classes2.dex中可能有多个类，除了有问题的类，也可能有很多正确的类，我们在替换时没必要把所有的类都替换掉，所以我们只要替换有问题的类。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;为此，我们可以采用一个策略，把新的替换的dex文件放到数组的最前面，最终数组的形态为：</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">[classes2.dex,classes.dex,classes2.dex]11</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;这里解释下，ClassLoader类加载器先加载我们修复的正确的dex文件，然后顺序加载数组中其他的dex元素，到了最后加载到旧的classes2.dex元素，由于前面已经加载了更新的classes2.dex（更新的dex文件中只包含修复的class），那么旧的classes2.dex元素中的有Bug的class就不会再加载，而是只加载其余的没有错误的class。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;整个流程其实非常简单，但是如果我们要实现这个过程却有个障碍，那就是由于我们的APK程序可能正在运行，谷歌并没有提供相关的接口方法去实现这一步骤，为此，我们需要使用反射的手段去实现。&nbsp;<br/>1.首先需要反射ClassLoader类，找到里面的pathList变量，然后找到dexElements[]数组,该数组在修复之前只有两个元素，分别是classes.dex和classes2.dex（出错的），假设值数组1；&nbsp;<br/>2.接着我们要往dexElements[]数组中添加classes2.dex文件。&nbsp;<br/>Android中要想实现加载dex文件，需要使用DexClassLoader类加载classes2.dex（补丁），加载到dexElements[]数组中去，假设值数组2。&nbsp;<br/>3.最后，我们需要把两个dexElements[]数组合并，作为一个新数组dexElements[],该数组中包含元素为classes2.dex（补丁），classes.dex和classes2.dex（出错的），完成后将数组返回赋值给系统的ClassLoader。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>最后贴出热修复工具类源码</h2><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;class&nbsp;FixDexUtils&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;HashSet&lt;File&gt;&nbsp;loadedDex&nbsp;=&nbsp;new&nbsp;HashSet&lt;File&gt;();&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;loadFixedDex(Context&nbsp;context)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(context&nbsp;==&nbsp;null)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;首先拿到缓存目录
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File&nbsp;fileSDir&nbsp;=&nbsp;context.getDir(MyConstants.DEX_DIR,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Context.MODE_PRIVATE);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File[]&nbsp;listFils&nbsp;=&nbsp;fileSDir.listFiles();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;遍历缓存文件
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(File&nbsp;file&nbsp;:&nbsp;listFils)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;如果文件是以&quot;classes&quot;开始或者以&quot;.dex&quot;结尾，说明这是从SDK中拷贝回来的修复包
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(file.getName().startsWith(&quot;classes&quot;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;||&nbsp;file.getName().endsWith(&quot;.dex&quot;))&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(&quot;WY&quot;,&nbsp;&quot;当前dexName:&quot;&nbsp;+&nbsp;file.getName());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loadedDex.add(file);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doDexInject(context,&nbsp;fileSDir);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;void&nbsp;doDexInject(Context&nbsp;context,&nbsp;File&nbsp;fileDir)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(Build.VERSION.SDK_INT&nbsp;&gt;=&nbsp;23)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log.i(&quot;WY&quot;,&nbsp;&quot;Unable&nbsp;to&nbsp;do&nbsp;dex&nbsp;inject&nbsp;on&nbsp;SDK&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;Build.VERSION.SDK_INT);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;.dex&nbsp;的加载需要一个临时目录
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;optimizeDir&nbsp;=&nbsp;fileDir.getAbsolutePath()&nbsp;+&nbsp;File.separator
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;&quot;opt_dex&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File&nbsp;fopt&nbsp;=&nbsp;new&nbsp;File(optimizeDir);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!fopt.exists())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fopt.mkdirs();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;根据.dex&nbsp;文件创建对应的DexClassLoader&nbsp;类
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(File&nbsp;file&nbsp;:&nbsp;loadedDex)&nbsp;{//&nbsp;循环迭代，用于多个修复包同时注入
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DexClassLoader&nbsp;classLoader&nbsp;=&nbsp;new&nbsp;DexClassLoader(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.getAbsolutePath(),&nbsp;fopt.getAbsolutePath(),&nbsp;null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.getClassLoader());&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;注入
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inject(classLoader,&nbsp;context);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(Exception&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;void&nbsp;inject(DexClassLoader&nbsp;classLoader,&nbsp;Context&nbsp;context)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;获取到系统的DexClassLoader&nbsp;类
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PathClassLoader&nbsp;pathLoader&nbsp;=&nbsp;(PathClassLoader)&nbsp;context.getClassLoader();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;dexElements&nbsp;=&nbsp;combineArray(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getDexElements(getPathList(classLoader)),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getDexElements(getPathList(pathLoader)));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;pathList&nbsp;=&nbsp;getPathList(pathLoader);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setField(pathList,&nbsp;pathList.getClass(),&nbsp;&quot;dexElements&quot;,&nbsp;dexElements);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(Exception&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;通过反射获取DexPathList中dexElements
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;Object&nbsp;getDexElements(Object&nbsp;paramObject)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throws&nbsp;IllegalArgumentException,&nbsp;NoSuchFieldException,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IllegalAccessException&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;getField(paramObject,&nbsp;paramObject.getClass(),&nbsp;&quot;dexElements&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;通过反射获取BaseDexClassLoader中的PathList对象
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;Object&nbsp;getPathList(Object&nbsp;baseDexClassLoader)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throws&nbsp;IllegalArgumentException,&nbsp;NoSuchFieldException,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IllegalAccessException,&nbsp;ClassNotFoundException&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;getField(baseDexClassLoader,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class.forName(&quot;dalvik.system.BaseDexClassLoader&quot;),&nbsp;&quot;pathList&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;通过反射获取指定字段的值
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;Object&nbsp;getField(Object&nbsp;obj,&nbsp;Class&lt;?&gt;&nbsp;cl,&nbsp;String&nbsp;field)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throws&nbsp;NoSuchFieldException,&nbsp;IllegalArgumentException,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IllegalAccessException&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Field&nbsp;localField&nbsp;=&nbsp;cl.getDeclaredField(field);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localField.setAccessible(true);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;localField.get(obj);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;通过反射设置字段值
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;void&nbsp;setField(Object&nbsp;obj,&nbsp;Class&lt;?&gt;&nbsp;cl,&nbsp;String&nbsp;field,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;value)&nbsp;throws&nbsp;NoSuchFieldException,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IllegalArgumentException,&nbsp;IllegalAccessException&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Field&nbsp;localField&nbsp;=&nbsp;cl.getDeclaredField(field);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localField.setAccessible(true);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localField.set(obj,&nbsp;value);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;合并两个数组
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;Object&nbsp;combineArray(Object&nbsp;arrayLhs,&nbsp;Object&nbsp;arrayRhs)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&gt;&nbsp;localClass&nbsp;=&nbsp;arrayLhs.getClass().getComponentType();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;Array.getLength(arrayLhs);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;j&nbsp;=&nbsp;i&nbsp;+&nbsp;Array.getLength(arrayRhs);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;result&nbsp;=&nbsp;Array.newInstance(localClass,&nbsp;j);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;k&nbsp;=&nbsp;0;&nbsp;k&nbsp;&lt;&nbsp;j;&nbsp;++k)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(k&nbsp;&lt;&nbsp;i)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Array.set(result,&nbsp;k,&nbsp;Array.get(arrayLhs,&nbsp;k));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Array.set(result,&nbsp;k,&nbsp;Array.get(arrayRhs,&nbsp;k&nbsp;-&nbsp;i));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result;
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><p><br/></p>','0','2016-11-20 06:30:06') [ RunTime:0.2037s ]

[ 2016-11-20T18:30:07+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000655s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001287s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0075s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 0,10   [ RunTime:0.0027s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:30:19+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000714s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001342s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0074s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:30:40+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000447s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000845s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0048s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0040s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 86  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0041s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 49  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('Android热修复(Hot Fix)案例全剖析（一）','86','49','<p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; 说到热修复技术，我们不得不先谈一下什么是冷修复。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>冷修复</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;当我们发现上线的应用APK存在Bug，我们通过发布新的应用APK，去替换旧的应用APK，以达到解决Bug的目的，但是这样做存在很大的缺点，需要用户二次下载APK，浪费用户流量，费时、费力、用户体验差。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>热修复</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;当我们发现上线的应用APK存在Bug，我们在用户使用过程中就把Bug修复了，优点是其过程中用户不需要把应用程序停止、卸载、重新安装、重启，大大改善了用户体验。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>热修复原理解析</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;通常作为一款应用，最容易出现Bug的地方，是<a href=\"http://lib.csdn.net/base/javaee\" class=\"replace_word\" title=\"Java EE知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Java</a>代码。我们知道<a href=\"http://lib.csdn.net/base/oracle\" class=\"replace_word\" title=\"Oracle知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Oracle</a>的套路，java源文件是被编译成.class文件,用ClassLoader加载.class；而<a href=\"http://lib.csdn.net/base/android\" class=\"replace_word\" title=\"Android知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">安卓</a>使用Dalvik/ART虚拟机，由于版权问题，谷歌把.class编译成了dex文件，并通过ClassLoader加载dex。我们的热修复方案，其实就是基于我之前博客中讲到的<a href=\"http://lib.csdn.net/base/android\" class=\"replace_word\" title=\"Android知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Android</a>&nbsp;dex多分包方案实现的。想学习了解Android Dex多分包技术的童鞋，请点击链接查看：<a href=\"http://blog.csdn.net/mynameishuangshuai/article/details/52703029\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">彻底掌握Android多分包技术MultiDex-用Ant和Gradle分别构建（一）</a></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">为了便于大家形象具体的理解热修复技术的流程，我给大家画一幅原理图。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161001204410634\" alt=\"这里写图片描述\" title=\"\"/></p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>待修复项目搭建</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;明白了热修复的流程以后，为了方便给大家演示热修复的流程，我们首先新建一个含有Bug的项目，该项目有一个页面，页面中包含两个按钮，一个按钮点击后会执行错误未修复的代码，另一个按钮点击后执行热修复操作。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">MainActivity代码如下：</strong></p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;class&nbsp;MainActivity&nbsp;extends&nbsp;Activity&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;Button&nbsp;btnOpen,&nbsp;btnModify;
&nbsp;&nbsp;&nbsp;&nbsp;NullTest&nbsp;nt&nbsp;=&nbsp;new&nbsp;NullTest();&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;void&nbsp;onCreate(Bundle&nbsp;savedInstanceState)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.onCreate(savedInstanceState);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setContentView(R.layout.activity_main);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;btnOpen&nbsp;=&nbsp;(Button)&nbsp;findViewById(R.id.btn_open);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;btnModify&nbsp;=&nbsp;(Button)&nbsp;findViewById(R.id.btn_modify);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;btnOpen.setOnClickListener(new&nbsp;OnClickListener()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;onClick(View&nbsp;v)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nt.printAbcLength(MainActivity.this);//&nbsp;执行计算
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;btnModify.setOnClickListener(new&nbsp;OnClickListener()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;onClick(View&nbsp;v)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;castielFixMethod();//&nbsp;调用热修复方法
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;&nbsp;}
}123456789101112131415161718192021222324252627123456789101112131415161718192021222324252627</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">出错的NullTest计算工具类：</strong></p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;class&nbsp;NullTest&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;a&nbsp;=&nbsp;8;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;b&nbsp;=&nbsp;0;//&nbsp;故意设置为0

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;printAbcLength(Context&nbsp;context)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;很明用8除0，一定会导致java.lang.ArithmeticException:&nbsp;/&nbsp;by&nbsp;zero异常
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Toast.makeText(context,&nbsp;&quot;count&nbsp;result:&quot;&nbsp;+&nbsp;(a/b),&nbsp;Toast.LENGTH_LONG).show();
&nbsp;&nbsp;&nbsp;&nbsp;}
}123456789123456789</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">布局文件代码：</strong></p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&lt;RelativeLayout&nbsp;xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
&nbsp;&nbsp;&nbsp;&nbsp;xmlns:tools=&quot;http://schemas.android.com/tools&quot;
&nbsp;&nbsp;&nbsp;&nbsp;android:layout_width=&quot;match_parent&quot;
&nbsp;&nbsp;&nbsp;&nbsp;android:layout_height=&quot;match_parent&quot;&nbsp;&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextView
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:id=&quot;@+id/textView1&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_width=&quot;wrap_content&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_height=&quot;wrap_content&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_margin=&quot;10dp&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:text=&quot;猴子搬来的救兵&nbsp;http://blog.csdn.net/mynameishuangshuai&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;ImageView
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:id=&quot;@+id/imageView1&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_width=&quot;wrap_content&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_height=&quot;wrap_content&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_below=&quot;@+id/textView1&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_margin=&quot;10dp&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:src=&quot;@drawable/old&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;Button
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:id=&quot;@+id/btn_open&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_width=&quot;200dp&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_height=&quot;40dp&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_below=&quot;@+id/imageView1&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_margin=&quot;10dp&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:text=&quot;执行操作&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;Button
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:id=&quot;@+id/btn_modify&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_width=&quot;200dp&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_height=&quot;40dp&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_below=&quot;@+id/btn_open&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:layout_margin=&quot;10dp&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:text=&quot;修复Bug&quot;&nbsp;/&gt;

&lt;/RelativeLayout&gt;1234567891011121314151617181920212223242526272829303132333435363712345678910111213141516171819202122232425262728293031323334353637</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;OK，项目源码开发到此为止，接下来，我们通过使用ant命令，对该项目进行多分包构建，这次我们一共构建了两个dex包，特地把出错的NullTest类放到classes2.dex中去，为的就是方便后面的热修复。</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&lt;!--&nbsp;构建多分包dex文件&nbsp;--&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;target&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;multi-dex&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;depends=&quot;compile&quot;&nbsp;&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;echo&nbsp;message=&quot;Generate&nbsp;multi-dex...&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;exec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;executable=&quot;${tools.dx}&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failonerror=&quot;true&quot;&nbsp;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;--dex&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;--multi-dex&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;--set-max-idx-number=10000&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;--main-dex-list&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;主包包含class文件列表&nbsp;--&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;${main-dex-rule}&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;--minimal-main-dex&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;--output=${bin}&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;${bin}&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;&lt;arg&nbsp;value=&quot;${libs}&quot;&nbsp;/&gt;&nbsp;--&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/exec&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/target&gt;12345678910111213141516171819202122231234567891011121314151617181920212223</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">主包配置文件清单：</strong></p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">com/castiel/demo/MainActivity.class11</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;完成以上所有操作后，我们将构建出来的APK安装到手机上，然后<a href=\"http://lib.csdn.net/base/softwaretest\" class=\"replace_word\" title=\"软件测试知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">测试</a>，点击执行操作按钮，发现项目崩溃并闪退。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161002155010980\" alt=\"这里写图片描述\" title=\"\"/></p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>开发热修复补丁dex文件</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">1.发现并修改Bug</strong></p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;class&nbsp;NullTest&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;a&nbsp;=&nbsp;8;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;b&nbsp;=&nbsp;1;//&nbsp;这里我们将出错的0改为1

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;printAbcLength(Context&nbsp;context)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Toast.makeText(context,&nbsp;&quot;count&nbsp;result:&quot;&nbsp;+&nbsp;(a/b),&nbsp;Toast.LENGTH_LONG).show();
&nbsp;&nbsp;&nbsp;&nbsp;}
}1234567812345678</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">2.生成补丁dex文件</strong>&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;修改错误代码后，我们clean一下项目，在项目的bin目录中找到生成的新的NullTest.class文件，连同该文件的包目录一并拷贝出来（注意其他的类文件通通去掉），这里我拷贝到桌面上的castiel文件夹中，同时在该文件夹中新建一个castieloutput文件夹，用于稍后存放编译的dex文件。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161002161810229\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;然后在cmd命令行中，利用SDK的dx工具编译生成新的dex文件</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161002162322232\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;成功后，我们将生成的dex文件反编译，可以看到新的修复补丁文件已经将0改为1</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161002162046068\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;到这里本篇博客就结束了，下一篇博客我们要做的事情就是用我们 classes2.dex（修复好的包）去动态替换classes2.dex（有Bug的包），实现热修复操作。</p><p><br/></p>','0','2016-11-20 06:30:40') [ RunTime:0.1133s ]

[ 2016-11-20T18:30:42+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000886s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002554s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0073s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 0,10   [ RunTime:0.0017s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0006s ]

[ 2016-11-20T18:30:48+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000443s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000841s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0042s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%安卓%' AND a.member_id = '86' LIMIT 30,10   [ RunTime:0.0006s ]
NOTIC: [8] Undefined index: rows D:\wamp\www\think_blog\Application\Home\Controller\CommonController.class.php 第 111 行.
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%%安卓%%' AND a.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:30:56+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000979s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002117s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0061s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 30,10   [ RunTime:0.0007s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:31:21+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000720s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001155s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0038s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:31:35+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000581s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000962s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0046s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0040s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 86  [ RunTime:0.0004s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0045s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 49  [ RunTime:0.0002s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('彻底掌握Android多分包技术MultiDex-用Ant和Gradle分别构建（二）','86','49','<p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; 在上一篇博客中，我给大家详细介绍了ant实现<a href=\"http://lib.csdn.net/base/android\" class=\"replace_word\" title=\"Android知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Android</a>多分包技术，具体可以点击查看：<a href=\"http://blog.csdn.net/mynameishuangshuai/article/details/52703029\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">彻底掌握Android多分包技术MultiDex-用Ant和Gradle分别构建（一）</a>；接下来的这篇博客我将带领大家一起学习使用Gradle构建Android项目多分包。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>增加多分包配置</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;说到Gradle，就不得不提到使用AndroidStudio进行开发，首先看一下在AndroidStudio中我们整个项目的框架。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161001170348106\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;这里，为了实现多分包技术，我们首先需要使用Android SDK Build Tools 21.1及以上的版本，接着修改工程中app目录下的build.gradle文件，在defaultConfig中添加multiDexEnabled true这个配置项。完成后还需要在dependencies中添加multidex的依赖：</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">compile&nbsp;&#39;com.android.support:multidex:1.0.0&#39;11</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">具体代码如下：</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">apply&nbsp;plugin:&nbsp;&#39;com.android.application&#39;android&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;compileSdkVersion&nbsp;23
&nbsp;&nbsp;&nbsp;&nbsp;buildToolsVersion&nbsp;&quot;24.0.1&quot;
&nbsp;&nbsp;&nbsp;&nbsp;defaultConfig&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;applicationId&nbsp;&quot;com.xingyu.castiel&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minSdkVersion&nbsp;15
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;targetSdkVersion&nbsp;23
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;versionCode&nbsp;1
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;versionName&nbsp;&quot;1.0&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;testInstrumentationRunner&nbsp;&quot;android.support.test.runner.AndroidJUnitRunner&quot;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;multiDexEnabled&nbsp;true
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;buildTypes&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;release&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minifyEnabled&nbsp;false
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proguardFiles&nbsp;getDefaultProguardFile(&#39;proguard-android.txt&#39;),&nbsp;&#39;proguard-rules.pro&#39;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
}

dependencies&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;compile&nbsp;fileTree(dir:&nbsp;&#39;libs&#39;,&nbsp;include:&nbsp;[&#39;*.jar&#39;])
&nbsp;&nbsp;&nbsp;&nbsp;androidTestCompile(&#39;com.android.support.test.espresso:espresso-core:2.2.2&#39;,&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exclude&nbsp;group:&nbsp;&#39;com.android.support&#39;,&nbsp;module:&nbsp;&#39;support-annotations&#39;
&nbsp;&nbsp;&nbsp;&nbsp;})

&nbsp;&nbsp;&nbsp;&nbsp;compile&nbsp;&#39;com.android.support:multidex:1.0.0&#39;

&nbsp;&nbsp;&nbsp;&nbsp;testCompile&nbsp;&#39;junit:junit:4.12&#39;}123456789101112131415161718192021222324252627282930313233123456789101112131415161718192021222324252627282930313233</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>代码中加入multidex功能</h2><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>方案一：在manifest文件中指定Application为MultiDexApplication</h3><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&lt;application
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:name=&quot;android.support.multidex.MultiDexApplication&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:allowBackup=&quot;true&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:icon=&quot;@mipmap/ic_launcher&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:label=&quot;@string/app_name&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:theme=&quot;@style/AppTheme&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……&gt;12345671234567</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>方案二：让应用的Application继承MultiDexApplication</h3><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;class&nbsp;MyApplication&nbsp;extends&nbsp;MultiDexApplication{……
}123123</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>方案三：重写Application的attachBaseContext方法，该方法放到onCreate前执行</h3><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;class&nbsp;MyApplication&nbsp;extends&nbsp;Application{@Override
&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;void&nbsp;attachBaseContext(Context&nbsp;base)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.attachBaseContext(base);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MultiDex.install(this);
&nbsp;&nbsp;&nbsp;&nbsp;}
}1234567812345678</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>指定dex文件所包含的类</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">通常我们在build.gradle文件中添加afterEvaluate区域，并在其内部采用–main-dex-list选项来指定主dex中要包含的类。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161001173217580\" alt=\"这里写图片描述\" title=\"\"/></p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>自定义的主包类列表</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">castielmaindexlist.txt</strong>&nbsp;<br/>需要注意的是，multidex的jar包中的9个类必须也要打到主包中，否则程序会因为找不到multidex相关类而抛出异常。</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">//&nbsp;我主包中包含的类com/xingyu/castiel/MainActivity.class//&nbsp;multidexandroid/support/multidex/MultiDex.class&nbsp;&nbsp;android/support/multidex/MultiDexApplication.class&nbsp;&nbsp;android/support/multidex/MultiDexExtractor$1.class&nbsp;&nbsp;android/support/multidex/MultiDexExtractor.class&nbsp;&nbsp;android/support/multidex/MultiDex$V14.class&nbsp;&nbsp;android/support/multidex/MultiDex$V19.class&nbsp;&nbsp;android/support/multidex/MultiDex$V4.class&nbsp;&nbsp;android/support/multidex/ZipUtil$CentralDirectory.class&nbsp;&nbsp;android/support/multidex/ZipUtil.class</pre><p><br/></p>','0','2016-11-20 06:31:34') [ RunTime:0.1432s ]

[ 2016-11-20T18:31:36+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001225s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002236s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0048s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 0,10   [ RunTime:0.0017s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0018s ]

[ 2016-11-20T18:31:45+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000725s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001178s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0038s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:32:08+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000561s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000977s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0042s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0050s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 86  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0071s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 49  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('彻底掌握Android多分包技术MultiDex-用Ant和Gradle分别构建（一）','86','49','<p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp;Andrid多分包技术在大型项目编译方面起着至关重要的作用，作为一个高级开发者我们有必要掌握此技能，现在我带领大家统一学习此项技能，并教会大家分别使用Ant和Gradle构建。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>什么是Dex</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;Dex是Dalvik VM executes的全称，即<a href=\"http://lib.csdn.net/base/android\" class=\"replace_word\" title=\"Android知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Android</a>&nbsp;Dalvik执行程序。在Android中单个Dex文件所能包含的最大方法数为65536，这包含Android FrameWork、依赖的Jar包，以及应用本身的代码中所有的方法。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>65536产生的原因</h3><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>Android系统中，一个Dex文件中存储方法id用的是short类型数据，所以导致你的dex中方法不能超过65536</p></li><li><p>在2.3系统之前，虚拟机内存只分配了5M</p></li></ul><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>多分包技术的应用</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;一句话为了解决单个dex包65536方法数限制问题&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;针对于65536的问题，我们在应用层是无法改变Android系统的结构的，所以我们无法将数据类型从short改变为int或者其他类型，也就是说一个dex中的方法数不能超过65536是我们无法逾越的鸿沟，我们只能通过优化项目代码达到减少一个dex中的方法数的目的，但是随着时间的推移和功能的增加，总有一天还是会出现方法数超过65536的情况，因此根据谷歌官方建议，我们使用多分包技术。&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;其实我们日常使用的大多数软件都使用到了多分包技术，比如下面就是我们解压了一款知名应用的APK包，我们可以看到他们使用了多分包技术，APK中包含三个dex文件，分别是classes.dex，classes2.dex，classes3.dex</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20160929171015139\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">本篇博客首先给大家讲解使用ant构建。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Ant构建MultiDex</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Ant是一种基于<a href=\"http://lib.csdn.net/base/javaee\" class=\"replace_word\" title=\"Java EE知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Java</a>的build工具。理论上来说，它有些类似于(Unix)C中的make ，但没有make的缺陷。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>（一）搭建Ant编译环境</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">1.首先下载Ant：<a href=\"http://ant.apache.org/bindownload.cgi\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">http://ant.apache.org/bindownload.cgi</a></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20160929173206762\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">下载后，我们解压到指定路径，这里我解压到D盘</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20160929174313853\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">2.配置NDK环境变量</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">打开我的电脑–属性–高级–环境变量</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">新建系统变量ANT_HOME&nbsp;<br/>变量名：ANT_HOME&nbsp;<br/>变量值：D:\\apache-ant-1.9.7</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20160929174046819\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">选择“系统变量”中变量名为“Path”的环境变量，双击该变量，把ANT安装目录的绝对路径，添加到Path变量的值中，并使用半角的分号和已有的路径进行分隔。&nbsp;<br/>变量名：Path&nbsp;<br/>变量值：%ANT_HOME%\\bin;</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20160929174055819\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">完成以上操作后，ANT环境变量配置结束，我们<a href=\"http://lib.csdn.net/base/softwaretest\" class=\"replace_word\" title=\"软件测试知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">测试</a>环境变量的配置成功与否。在cmd命令行窗口输入“ant -version”，输出以下信息即为配置正确。如图：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20160929174034975\" alt=\"这里写图片描述\" title=\"\"/></p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>（二）编写Ant构建脚本</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">通常我们的Ant构建文件都放在SDK根目录下的tools夹下，在里面我们找到ant目录，进去后找到buildxml文件。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20160929174853119\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">这里我们可以把这个build.xml文件拷贝到项目目录中去，然后进行修改。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20160929181033031\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">下面是我配置的build.xml源码</strong></p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&lt;?xml&nbsp;version=&quot;1.0&quot;&nbsp;encoding=&quot;UTF-8&quot;?&gt;&lt;!--&nbsp;版权所有，未经同意请勿转载！猴子搬来的救兵&nbsp;http://blog.csdn.net/mynameishuangshuai&nbsp;--&gt;&lt;!--&nbsp;project项目标签&nbsp;--&gt;&lt;project&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;MultiDex&quot;
&nbsp;&nbsp;&nbsp;&nbsp;default=&quot;release&quot;&nbsp;&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;项目编译环境配置&nbsp;--&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;sdk-folder&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;D:\\adt-bundle-windows-x86_64-20140702\\sdk&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;platform-folder&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;${sdk-folder}\\platforms\\android-20&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;platform-tools-folder&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;${sdk-folder}\\build-tools\\android-4.4W&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;jdk-folder&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;C:\\Program&nbsp;Files\\Java\\jdk1.7.0_17&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;android-jar&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;${platform-folder}\\android.jar&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;tools.aapt&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;${platform-tools-folder}/aapt.exe&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;tools.javac&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;${jdk-folder}\\bin\\javac.exe&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;tools.dx&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;${platform-tools-folder}\\dx.bat&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;tools.apkbuilder&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;${sdk-folder}\\tools\\apkbuilder.bat&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;tools.jarsigner&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;${jdk-folder}\\bin\\jarsigner.exe&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;项目输入目录配置&nbsp;--&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;project-dir&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;.&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;assets&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;${project-dir}\\assets&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;res&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;${project-dir}\\res&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;src&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;${project-dir}\\src&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;libs&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;${project-dir}\\libs&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;项目输出目录配置&nbsp;--&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;bin&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;${project-dir}\\bin&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;gen&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;${project-dir}\\gen&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;manifest&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;${project-dir}\\AndroidManifest.xml&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;生成文件放置地方&nbsp;--&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;java-file-gen&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;${gen}\\com\\castiel\\demo\\*.java&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;java-file-src&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;${src}\\com\\castiel\\demo\\*.java&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;main-dex-name&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;${bin}\\classes.dex&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;sub-dex-name&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;${bin}\\classes2.dex&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;package-temp-name&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;${bin}\\${ant.project.name}.arsc&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;未签名包&nbsp;--&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;unsigned-apk-name&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;${ant.project.name}_unsigned.apk&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;unsigned-apk-path&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;${bin}\\${unsigned-apk-name}&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;签名包&nbsp;--&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;signed-apk-name&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;${ant.project.name}.apk&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;signed-apk-path&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;${bin}\\${signed-apk-name}&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;密钥&nbsp;--&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;keystore-name&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;${project-dir}\\castiel_key.keystore&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;keystore-alias&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;castiel&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;main-dex-rule&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;${project-dir}\\main-dex-rule.txt&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;taskdef&nbsp;resource=&quot;net/sf/antcontrib/antlib.xml&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;初始化target&nbsp;--&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;target&nbsp;name=&quot;init&quot;&nbsp;&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;echo&nbsp;message=&quot;init...&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;delete&nbsp;includeemptydirs=&quot;true&quot;&nbsp;&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;fileset&nbsp;dir=&quot;${bin}&quot;&nbsp;&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;include&nbsp;name=&quot;**/*&quot;&nbsp;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/include&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/fileset&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/delete&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;mkdir&nbsp;dir=&quot;${bin}&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/target&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;生成R.java类文件&nbsp;--&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;target&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;gen-R&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;depends=&quot;init&quot;&nbsp;&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;echo&nbsp;message=&quot;Generating&nbsp;R.java&nbsp;from&nbsp;the&nbsp;resources.&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;exec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;executable=&quot;${tools.aapt}&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failonerror=&quot;true&quot;&nbsp;&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;package表示打包&nbsp;--&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;package&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;-f&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;-m&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;-J&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;${gen}&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;-S&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;${res}&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;-M&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;${manifest}&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;-I&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;${android-jar}&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/exec&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/target&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;编译源文件生成对应的class文件&nbsp;--&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;target&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;compile&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;depends=&quot;gen-R&quot;&nbsp;&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;echo&nbsp;message=&quot;compile...&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;javac&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bootclasspath=&quot;${android-jar}&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;compiler=&quot;javac1.7&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;destdir=&quot;${bin}&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;encoding=&quot;utf-8&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;includeantruntime=&quot;false&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listfiles=&quot;true&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target=&quot;1.7&quot;&nbsp;&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;src&nbsp;path=&quot;${project-dir}&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;classpath&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;引入第三方jar包所需要引用，用于辅助编译，并没有将jar打包进去。&nbsp;--&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;fileset&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dir=&quot;${libs}&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;includes=&quot;*.jar&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/classpath&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/javac&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/target&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;构建多分包dex文件&nbsp;--&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;target&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;multi-dex&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;depends=&quot;compile&quot;&nbsp;&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;echo&nbsp;message=&quot;Generate&nbsp;multi-dex...&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;exec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;executable=&quot;${tools.dx}&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failonerror=&quot;true&quot;&nbsp;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;--dex&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;--multi-dex&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;多分包命令，每个包最大的方法数为10000&nbsp;--&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;--set-max-idx-number=10000&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;--main-dex-list&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;主包包含class文件列表&nbsp;--&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;${main-dex-rule}&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;--minimal-main-dex&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;--output=${bin}&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;把bin下所有class打包&nbsp;--&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;${bin}&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;把libs下所有jar打包&nbsp;--&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;&lt;arg&nbsp;value=&quot;${libs}&quot;&nbsp;/&gt;&nbsp;--&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/exec&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/target&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;打包资源文件(包括res、assets、AndroidManifest.xml)&nbsp;--&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;target&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;package&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;depends=&quot;multi-dex&quot;&nbsp;&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;echo&nbsp;message=&quot;package-res-and-assets...&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;exec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;executable=&quot;${tools.aapt}&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failonerror=&quot;true&quot;&nbsp;&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;package&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;-f&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;-S&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;${res}&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;-A&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;${assets}&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;-M&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;${manifest}&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;-I&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;${android-jar}&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;-F&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;放到临时目录中&nbsp;--&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;${package-temp-name}&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/exec&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/target&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;对临时目录进行打包&nbsp;--&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;target&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;build-unsigned-apk&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;depends=&quot;package&quot;&nbsp;&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;echo&nbsp;message=&quot;Build-unsigned-apk&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;java&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;classname=&quot;com.android.sdklib.build.ApkBuilderMain&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;classpath=&quot;${sdk-folder}/tools/lib/sdklib.jar&quot;&nbsp;&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;输出路径&nbsp;--&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;${unsigned-apk-path}&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;-u&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;-z&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;${package-temp-name}&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;-f&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;${main-dex-name}&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;-rf&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;${src}&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;-rj&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;${libs}&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/java&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/target&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;拷贝文件到apk项目的根目录下&nbsp;--&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;target&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;copy_dex&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;depends=&quot;build-unsigned-apk&quot;&nbsp;&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;echo&nbsp;message=&quot;copy&nbsp;dex...&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;copy&nbsp;todir=&quot;${project-dir}&quot;&nbsp;&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;fileset&nbsp;dir=&quot;${bin}&quot;&nbsp;&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;include&nbsp;name=&quot;classes*.dex&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/fileset&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/copy&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/target&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;循环遍历bin目录下的所有dex文件&nbsp;--&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;target&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;add-subdex-toapk&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;depends=&quot;copy_dex&quot;&nbsp;&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;echo&nbsp;message=&quot;Add&nbsp;subdex&nbsp;to&nbsp;apk...&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;foreach&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;param=&quot;dir.name&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target=&quot;aapt-add-dex&quot;&nbsp;&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;path&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;fileset&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dir=&quot;${bin}&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;includes=&quot;classes*.dex&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/path&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/foreach&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/target&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;使用aapt命令添加dex文件&nbsp;--&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;target&nbsp;name=&quot;aapt-add-dex&quot;&nbsp;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;echo&nbsp;message=&quot;${dir.name}&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;echo&nbsp;message=&quot;执行了app&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;使用正则表达式获取classes的文件名&nbsp;--&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;propertyregex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;casesensitive=&quot;false&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input=&quot;${dir.name}&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;property=&quot;dexfile&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;regexp=&quot;classes(.*).dex&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;select=&quot;\\0&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;if&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;equals&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg1=&quot;${dexfile}&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg2=&quot;classes.dex&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;then&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;echo&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;${dexfile}&nbsp;is&nbsp;not&nbsp;handle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/echo&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/then&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;else&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;echo&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;${dexfile}&nbsp;is&nbsp;handle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/echo&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;exec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;executable=&quot;${tools.aapt}&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failonerror=&quot;true&quot;&nbsp;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;add&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;${unsigned-apk-path}&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;${dexfile}&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/exec&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/else&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/if&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;delete&nbsp;file=&quot;${project-dir}\\${dexfile}&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/target&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;生成签名的apk&nbsp;--&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;target&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;sign-apk&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;depends=&quot;add-subdex-toapk&quot;&nbsp;&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;echo&nbsp;message=&quot;Sign&nbsp;apk...&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;exec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;executable=&quot;${tools.jarsigner}&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failonerror=&quot;true&quot;&nbsp;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;keystore&nbsp;--&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;-keystore&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;${keystore-name}&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;秘钥&nbsp;--&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;-storepass&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;123456&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;秘钥口令&nbsp;--&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;-keypass&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;123456&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;-signedjar&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;签名的apk&nbsp;--&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;${signed-apk-path}&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;未签名的apk&nbsp;--&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;${unsigned-apk-path}&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;别名&nbsp;--&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;arg&nbsp;value=&quot;${keystore-alias}&quot;&nbsp;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/exec&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/target&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;签名发布&nbsp;--&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&lt;target&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=&quot;release&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;depends=&quot;sign-apk&quot;&nbsp;&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;delete&nbsp;file=&quot;${package-temp-name}&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;delete&nbsp;file=&quot;${unsigned-apk-path}&quot;&nbsp;/&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;echo&gt;APK&nbsp;is&nbsp;released.path:${signed-apk-path}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/echo&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/target&gt;&lt;/project&gt;&nbsp;&lt;!--&nbsp;版权所有，未经同意请勿转载！猴子搬来的救兵&nbsp;http://blog.csdn.net/mynameishuangshuai&nbsp;--&gtpre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">为了方便大家理解，这里我们对build的流程进行分析，详见下图：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20160930181823031\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">main-dex-rule.txt</strong>&nbsp;<br/>该文件中只放置了一个class文件</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">com/castiel/demo/MainActivity.class11</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">ant编译前整个项目结构</strong></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20160930180116347\" alt=\"这里写图片描述\" title=\"\"/></p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>ant脚本编译过程</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">在执行cmd命令，进入项目根目录路径，然后执行ant命令</strong></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20160930180637265\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20160930180644969\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">编译成功后，解压APK可以看到我们成功的实现了多分包技术，生成两个dex文件。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20160930180521576\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">最后成功运行项目</strong></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20160930180045066\" alt=\"这里写图片描述\" title=\"\"/></p><p><br/></p>','0','2016-11-20 06:32:08') [ RunTime:0.1069s ]

[ 2016-11-20T18:32:09+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000791s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001641s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0057s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 0,10   [ RunTime:0.0015s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0005s ]

[ 2016-11-20T18:32:17+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000704s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001178s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0034s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '86'  [ RunTime:0.0002s ]

[ 2016-11-20T18:32:29+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000716s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001152s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0046s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0037s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 86  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0042s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 49  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('Android中Service和Thread的区别','86','49','<p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;最近有位朋友问我，<a href=\"http://lib.csdn.net/base/android\" class=\"replace_word\" title=\"Android知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Android</a>中Service和Thread有什么区别，为什么有时候放着方便的Thread不用，而要使用Service呢?&nbsp;<br/>要解答这个问题，首先我们要弄明白Service和Thread分别是怎么定义的：</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>Thread 是程序执行的最小单元，它是分配CPU的基本单位。可以用 Thread 来执行一些异步的操作。</p></li><li><p>Service是Android的四大组件之一，被用来执行长时间的后台任务。默认情况下Service是运行在主线程中的。</p></li></ul><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\">二者的使用上的区别</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">1.在Android中，Thread只是一个用来执行后台任务的工具类，它可以在Activity中被创建，也可以在Service中被创建。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">2.Service组件主要有两个作用：后台运行和跨进程访问。service可以在android系统后台独立运行，线程是不可以。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">3.Service类是可以供其他应用程序来调用这个Service的而Thread只是在本类中在使用，如果本类关闭那么这个thread也就下岗了而Service类则不会。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">4.如果需要执行复杂耗时的操作，必须在Service中再创建一个Thread来执行任务。Service的优先级高于后台挂起的Activity，当然也高于Activity所创建的Thread，因此，系统可能在内存不足的时候优先杀死后台的Activity或者Thread，而不会轻易杀死Service组件，即使被迫杀死Service，也会在资源可用时重启被杀死的Service。</p><p><br/></p>','0','2016-11-20 06:32:29') [ RunTime:0.0826s ]

[ 2016-11-20T18:32:30+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000916s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001531s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0061s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 0,10   [ RunTime:0.0015s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0005s ]

[ 2016-11-20T18:32:44+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000603s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001061s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0043s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%安卓%' AND a.member_id = '86' LIMIT 0,10   [ RunTime:0.0015s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%%安卓%%' AND a.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:33:16+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000721s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001162s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0042s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%安卓%' AND a.member_id = '86' LIMIT 20,10   [ RunTime:0.0009s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%%安卓%%' AND a.member_id = '86'  [ RunTime:0.0005s ]

[ 2016-11-20T18:33:18+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000711s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001160s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0036s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%安卓%' AND a.member_id = '86' LIMIT 0,10   [ RunTime:0.0014s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%%安卓%%' AND a.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:33:18+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001084s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001795s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0043s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%安卓%' AND a.member_id = '86' LIMIT 10,10   [ RunTime:0.0012s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%%安卓%%' AND a.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:33:19+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000950s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001505s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0051s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%安卓%' AND a.member_id = '86' LIMIT 20,10   [ RunTime:0.0009s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%%安卓%%' AND a.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:33:20+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000613s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000994s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0036s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%安卓%' AND a.member_id = '86' LIMIT 10,10   [ RunTime:0.0013s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%%安卓%%' AND a.member_id = '86'  [ RunTime:0.0004s ]

[ 2016-11-20T18:33:20+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000729s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001167s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0047s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%安卓%' AND a.member_id = '86' LIMIT 0,10   [ RunTime:0.0013s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%%安卓%%' AND a.member_id = '86'  [ RunTime:0.0004s ]

[ 2016-11-20T18:33:22+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000778s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001273s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0048s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%安卓%' AND a.member_id = '86' LIMIT 10,10   [ RunTime:0.0011s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%%安卓%%' AND a.member_id = '86'  [ RunTime:0.0004s ]

[ 2016-11-20T18:33:22+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000736s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001234s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0043s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%安卓%' AND a.member_id = '86' LIMIT 20,10   [ RunTime:0.0009s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%%安卓%%' AND a.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:33:23+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000748s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001188s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0048s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%安卓%' AND a.member_id = '86' LIMIT 0,10   [ RunTime:0.0013s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%%安卓%%' AND a.member_id = '86'  [ RunTime:0.0004s ]

[ 2016-11-20T18:33:25+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001615s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002747s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0055s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%安卓%' AND a.member_id = '86' LIMIT 20,10   [ RunTime:0.0009s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%%安卓%%' AND a.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:33:30+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000766s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001206s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0041s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 0,10   [ RunTime:0.0011s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0004s ]

[ 2016-11-20T18:33:31+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000732s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001189s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0043s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86' LIMIT 30,10   [ RunTime:0.0009s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '86'  [ RunTime:0.0003s ]

[ 2016-11-20T18:33:42+08:00 ] ::1 /think_blog/Home/Article/articleListPage
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001539s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002390s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0052s ]
SQL: SELECT `id`,`title`,date_format(create_time,'%Y-%m-%d') as create_time FROM `article` WHERE `article_type_id` = 49 LIMIT 20,20   [ RunTime:0.0003s ]
SQL: SELECT COUNT(id) as count FROM `article` WHERE `article_type_id` = 49  [ RunTime:0.0002s ]

[ 2016-11-20T18:33:45+08:00 ] ::1 /think_blog/Home/Article/articleListPage
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000718s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001165s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0042s ]
SQL: SELECT `id`,`title`,date_format(create_time,'%Y-%m-%d') as create_time FROM `article` WHERE `article_type_id` = 49 LIMIT 0,20   [ RunTime:0.0005s ]
SQL: SELECT COUNT(id) as count FROM `article` WHERE `article_type_id` = 49  [ RunTime:0.0004s ]

[ 2016-11-20T18:34:15+08:00 ] ::1 /think_blog/Home/Photo/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000773s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001223s ]
SQL: SHOW COLUMNS FROM `photo` [ RunTime:0.0042s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0036s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 86  [ RunTime:0.0003s ]
SQL: INSERT INTO `photo` (`photo_title`,`member_id`) VALUES ('安卓开发','86') [ RunTime:0.1134s ]

[ 2016-11-20T18:34:17+08:00 ] ::1 /think_blog/Home/Member/personPhoto
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001175s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001875s ]
SQL: SHOW COLUMNS FROM `photo` [ RunTime:0.0059s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0042s ]
SQL: SELECT p.id AS `photo_id`,p.photo_title AS `photo_title`,COUNT(pi.id) AS `photo_count` FROM `photo_img` `pi` RIGHT JOIN photo p ON p.id=pi.photo_id  WHERE p.member_id = '86' GROUP BY p.id LIMIT 0,10   [ RunTime:0.0004s ]
SQL: SELECT COUNT(p.id) AS `count` FROM photo p WHERE p.member_id = '86'  [ RunTime:0.0004s ]

[ 2016-11-20T18:36:07+08:00 ] ::1 /think_blog/Home/PhotoImg/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000919s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001416s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0042s ]
NOTIC: [2] call_user_func() expects parameter 1 to be a valid callback, no array or string given D:\wamp\www\think_blog\ThinkPHP\Library\Think\Upload.class.php 第 170 行.
SQL: INSERT INTO `photo_img` (`photo_id`,`member_id`,`img_title`,`img_src`) VALUES ('32','86','Android中的显示单位','photo_img/photo_img_1479638167.png') [ RunTime:0.0938s ]

[ 2016-11-20T18:36:08+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001258s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002225s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0046s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32' LIMIT 0,10   [ RunTime:0.0004s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32'  [ RunTime:0.0002s ]

[ 2016-11-20T21:28:51+08:00 ] ::1 /think_blog/Home/PhotoImg/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000905s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001354s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0045s ]
NOTIC: [2] call_user_func() expects parameter 1 to be a valid callback, no array or string given D:\wamp\www\think_blog\ThinkPHP\Library\Think\Upload.class.php 第 170 行.
SQL: INSERT INTO `photo_img` (`photo_id`,`member_id`,`img_title`,`img_src`) VALUES ('32','86','Android触摸事件分发流程图','photo_img/photo_img_1479648530.png') [ RunTime:0.1090s ]

[ 2016-11-20T21:28:52+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001373s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002153s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0073s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32' LIMIT 0,10   [ RunTime:0.0005s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32'  [ RunTime:0.0006s ]

[ 2016-11-20T21:32:32+08:00 ] ::1 /think_blog/Home/PhotoImg/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000878s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001325s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0037s ]
NOTIC: [2] call_user_func() expects parameter 1 to be a valid callback, no array or string given D:\wamp\www\think_blog\ThinkPHP\Library\Think\Upload.class.php 第 170 行.
SQL: INSERT INTO `photo_img` (`photo_id`,`member_id`,`img_title`,`img_src`) VALUES ('32','86','自定义注解工具库','photo_img/photo_img_1479648752.png') [ RunTime:0.1170s ]

[ 2016-11-20T21:32:35+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001121s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001884s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0066s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32' LIMIT 0,10   [ RunTime:0.0004s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32'  [ RunTime:0.0002s ]

[ 2016-11-20T21:33:34+08:00 ] ::1 /think_blog/Home/PhotoImg/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001069s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001561s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0057s ]
NOTIC: [2] call_user_func() expects parameter 1 to be a valid callback, no array or string given D:\wamp\www\think_blog\ThinkPHP\Library\Think\Upload.class.php 第 170 行.
SQL: INSERT INTO `photo_img` (`photo_id`,`member_id`,`img_title`,`img_src`) VALUES ('32','86','MVC的通信方式','photo_img/photo_img_1479648814.png') [ RunTime:0.1511s ]

[ 2016-11-20T21:33:35+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002019s ]
INFO: [ app_begin ] --END-- [ RunTime:0.003972s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0047s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32' LIMIT 0,10   [ RunTime:0.0013s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32'  [ RunTime:0.0006s ]

[ 2016-11-20T21:33:57+08:00 ] ::1 /think_blog/Home/PhotoImg/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000900s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001553s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0059s ]
NOTIC: [2] call_user_func() expects parameter 1 to be a valid callback, no array or string given D:\wamp\www\think_blog\ThinkPHP\Library\Think\Upload.class.php 第 170 行.
SQL: INSERT INTO `photo_img` (`photo_id`,`member_id`,`img_title`,`img_src`) VALUES ('32','86','MVP的通信方式','photo_img/photo_img_1479648837.png') [ RunTime:0.2042s ]

[ 2016-11-20T21:33:58+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001509s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002658s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0051s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32' LIMIT 0,10   [ RunTime:0.0004s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32'  [ RunTime:0.0002s ]

[ 2016-11-20T21:34:17+08:00 ] ::1 /think_blog/Home/PhotoImg/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000777s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001247s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0043s ]
NOTIC: [2] call_user_func() expects parameter 1 to be a valid callback, no array or string given D:\wamp\www\think_blog\ThinkPHP\Library\Think\Upload.class.php 第 170 行.
SQL: INSERT INTO `photo_img` (`photo_id`,`member_id`,`img_title`,`img_src`) VALUES ('32','86','MVVM的通信方式','photo_img/photo_img_1479648857.png') [ RunTime:0.1084s ]

[ 2016-11-20T21:34:19+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001347s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002534s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0037s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32' LIMIT 0,10   [ RunTime:0.0003s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32'  [ RunTime:0.0002s ]

[ 2016-11-20T21:34:38+08:00 ] ::1 /think_blog/Home/PhotoImg/personInfo
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000655s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001128s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0041s ]
SQL: SELECT * FROM `photo_img` WHERE `id` = '100'  [ RunTime:0.0003s ]

[ 2016-11-20T21:35:26+08:00 ] ::1 /think_blog/Home/PhotoImg/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000638s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000995s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0039s ]
NOTIC: [2] call_user_func() expects parameter 1 to be a valid callback, no array or string given D:\wamp\www\think_blog\ThinkPHP\Library\Think\Upload.class.php 第 170 行.
SQL: INSERT INTO `photo_img` (`photo_id`,`member_id`,`img_title`,`img_src`) VALUES ('32','86','传统项目结构','photo_img/photo_img_1479648926.png') [ RunTime:0.0568s ]

[ 2016-11-20T21:35:27+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002303s ]
INFO: [ app_begin ] --END-- [ RunTime:0.003520s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0040s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32' LIMIT 0,10   [ RunTime:0.0003s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32'  [ RunTime:0.0002s ]

[ 2016-11-20T21:37:56+08:00 ] ::1 /think_blog/Home/Photo/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000789s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001266s ]
SQL: SHOW COLUMNS FROM `photo` [ RunTime:0.0043s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0052s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 86  [ RunTime:0.0003s ]
SQL: INSERT INTO `photo` (`photo_title`,`member_id`) VALUES ('数据结构','86') [ RunTime:0.0951s ]

[ 2016-11-20T21:37:57+08:00 ] ::1 /think_blog/Home/Member/personPhoto
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001297s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001818s ]
SQL: SHOW COLUMNS FROM `photo` [ RunTime:0.0085s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0045s ]
SQL: SELECT p.id AS `photo_id`,p.photo_title AS `photo_title`,COUNT(pi.id) AS `photo_count` FROM `photo_img` `pi` RIGHT JOIN photo p ON p.id=pi.photo_id  WHERE p.member_id = '86' GROUP BY p.id LIMIT 0,10   [ RunTime:0.0004s ]
SQL: SELECT COUNT(p.id) AS `count` FROM photo p WHERE p.member_id = '86'  [ RunTime:0.0002s ]

[ 2016-11-20T21:38:21+08:00 ] ::1 /think_blog/Home/PhotoImg/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000732s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001144s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0039s ]
NOTIC: [8] Undefined index: upload D:\wamp\www\think_blog\Application\Home\Model\PhotoImgModel.class.php 第 232 行.

[ 2016-11-20T21:38:24+08:00 ] ::1 /think_blog/Home/PhotoImg/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000682s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001070s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0041s ]
NOTIC: [8] Undefined index: upload D:\wamp\www\think_blog\Application\Home\Model\PhotoImgModel.class.php 第 232 行.

[ 2016-11-20T21:39:47+08:00 ] ::1 /think_blog/Home/PhotoImg/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000697s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001088s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0046s ]
NOTIC: [2] call_user_func() expects parameter 1 to be a valid callback, no array or string given D:\wamp\www\think_blog\ThinkPHP\Library\Think\Upload.class.php 第 170 行.
SQL: INSERT INTO `photo_img` (`photo_id`,`member_id`,`img_title`,`img_src`) VALUES ('33','86','双链回环循环链表 ','photo_img/photo_img_1479649187.png') [ RunTime:0.1941s ]

[ 2016-11-20T21:39:49+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001275s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002005s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0049s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '33' LIMIT 0,10   [ RunTime:0.0003s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '33'  [ RunTime:0.0002s ]

[ 2016-11-20T21:40:25+08:00 ] ::1 /think_blog/Home/PhotoImg/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000646s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001011s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0042s ]
NOTIC: [2] call_user_func() expects parameter 1 to be a valid callback, no array or string given D:\wamp\www\think_blog\ThinkPHP\Library\Think\Upload.class.php 第 170 行.
SQL: INSERT INTO `photo_img` (`photo_id`,`member_id`,`img_title`,`img_src`) VALUES ('33','86','经典的哈希表实现方式图','photo_img/photo_img_1479649225.png') [ RunTime:0.0936s ]

[ 2016-11-20T21:40:26+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001396s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002474s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0043s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '33' LIMIT 0,10   [ RunTime:0.0004s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '33'  [ RunTime:0.0002s ]

[ 2016-11-20T21:40:56+08:00 ] ::1 /think_blog/Home/PhotoImg/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000672s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001036s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0045s ]
NOTIC: [2] call_user_func() expects parameter 1 to be a valid callback, no array or string given D:\wamp\www\think_blog\ThinkPHP\Library\Think\Upload.class.php 第 170 行.
SQL: INSERT INTO `photo_img` (`photo_id`,`member_id`,`img_title`,`img_src`) VALUES ('33','86','拉链法','photo_img/photo_img_1479649256.png') [ RunTime:0.0928s ]

[ 2016-11-20T21:40:57+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001781s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002734s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0059s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '33' LIMIT 0,10   [ RunTime:0.0020s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '33'  [ RunTime:0.0012s ]

[ 2016-11-20T21:41:33+08:00 ] ::1 /think_blog/Home/PhotoImg/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000776s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001213s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0048s ]
NOTIC: [2] call_user_func() expects parameter 1 to be a valid callback, no array or string given D:\wamp\www\think_blog\ThinkPHP\Library\Think\Upload.class.php 第 170 行.
SQL: INSERT INTO `photo_img` (`photo_id`,`member_id`,`img_title`,`img_src`) VALUES ('33','86','线性表的顺序存储结构','photo_img/photo_img_1479649293.png') [ RunTime:0.1223s ]

[ 2016-11-20T21:41:34+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001305s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002121s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0066s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '33' LIMIT 0,10   [ RunTime:0.0003s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '33'  [ RunTime:0.0002s ]

[ 2016-11-20T21:43:07+08:00 ] ::1 /think_blog/Home/PhotoImg/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000720s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001140s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0048s ]
NOTIC: [2] call_user_func() expects parameter 1 to be a valid callback, no array or string given D:\wamp\www\think_blog\ThinkPHP\Library\Think\Upload.class.php 第 170 行.
SQL: INSERT INTO `photo_img` (`photo_id`,`member_id`,`img_title`,`img_src`) VALUES ('32','86','Activity分类','photo_img/photo_img_1479649387.png') [ RunTime:0.1026s ]

[ 2016-11-20T21:43:08+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001132s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001895s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0036s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32' LIMIT 0,10   [ RunTime:0.0003s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32'  [ RunTime:0.0002s ]

[ 2016-11-20T21:43:54+08:00 ] ::1 /think_blog/Home/PhotoImg/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000620s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001008s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0044s ]
NOTIC: [2] call_user_func() expects parameter 1 to be a valid callback, no array or string given D:\wamp\www\think_blog\ThinkPHP\Library\Think\Upload.class.php 第 170 行.
SQL: INSERT INTO `photo_img` (`photo_id`,`member_id`,`img_title`,`img_src`) VALUES ('32','86','category的匹配规则','photo_img/photo_img_1479649434.png') [ RunTime:0.2011s ]

[ 2016-11-20T21:43:55+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000868s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001619s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0035s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32' LIMIT 0,10   [ RunTime:0.0003s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32'  [ RunTime:0.0002s ]

[ 2016-11-20T21:44:28+08:00 ] ::1 /think_blog/Home/PhotoImg/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000638s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000996s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0040s ]
NOTIC: [2] call_user_func() expects parameter 1 to be a valid callback, no array or string given D:\wamp\www\think_blog\ThinkPHP\Library\Think\Upload.class.php 第 170 行.
SQL: INSERT INTO `photo_img` (`photo_id`,`member_id`,`img_title`,`img_src`) VALUES ('32','86','传统模式的编辑域','photo_img/photo_img_1479649468.png') [ RunTime:0.0988s ]

[ 2016-11-20T21:44:29+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001360s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002195s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0058s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32' LIMIT 0,10   [ RunTime:0.0004s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32'  [ RunTime:0.0002s ]

[ 2016-11-20T21:44:44+08:00 ] ::1 /think_blog/Home/PhotoImg/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000612s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000995s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0043s ]
NOTIC: [2] call_user_func() expects parameter 1 to be a valid callback, no array or string given D:\wamp\www\think_blog\ThinkPHP\Library\Think\Upload.class.php 第 170 行.
SQL: INSERT INTO `photo_img` (`photo_id`,`member_id`,`img_title`,`img_src`) VALUES ('32','86','护眼模式的编辑域','photo_img/photo_img_1479649484.png') [ RunTime:0.1256s ]

[ 2016-11-20T21:44:45+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001733s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002843s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0047s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32' LIMIT 0,10   [ RunTime:0.0008s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32'  [ RunTime:0.0003s ]

[ 2016-11-20T21:45:02+08:00 ] ::1 /think_blog/Home/PhotoImg/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000655s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001036s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0041s ]
NOTIC: [2] call_user_func() expects parameter 1 to be a valid callback, no array or string given D:\wamp\www\think_blog\ThinkPHP\Library\Think\Upload.class.php 第 170 行.
SQL: INSERT INTO `photo_img` (`photo_id`,`member_id`,`img_title`,`img_src`) VALUES ('32','86','设置保护视力颜色 #C7EDCC（护眼绿）','photo_img/photo_img_1479649502.png') [ RunTime:0.0500s ]

[ 2016-11-20T21:45:03+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001342s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002212s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0042s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32' LIMIT 0,10   [ RunTime:0.0017s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32'  [ RunTime:0.0003s ]

[ 2016-11-20T21:45:45+08:00 ] ::1 /think_blog/Home/PhotoImg/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000724s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001098s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0037s ]
NOTIC: [2] call_user_func() expects parameter 1 to be a valid callback, no array or string given D:\wamp\www\think_blog\ThinkPHP\Library\Think\Upload.class.php 第 170 行.
SQL: INSERT INTO `photo_img` (`photo_id`,`member_id`,`img_title`,`img_src`) VALUES ('32','86','系统调色盘','photo_img/photo_img_1479649545.png') [ RunTime:0.1142s ]

[ 2016-11-20T21:45:46+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001074s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001797s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0076s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32' LIMIT 0,10   [ RunTime:0.0008s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32'  [ RunTime:0.0006s ]

[ 2016-11-20T21:45:49+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000615s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000994s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0060s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32' LIMIT 10,10   [ RunTime:0.0003s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32'  [ RunTime:0.0002s ]

[ 2016-11-20T21:45:50+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000627s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001079s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0037s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32' LIMIT 0,10   [ RunTime:0.0005s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32'  [ RunTime:0.0003s ]

[ 2016-11-20T21:47:29+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000744s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001283s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0039s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32' LIMIT 10,10   [ RunTime:0.0004s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32'  [ RunTime:0.0004s ]

[ 2016-11-20T21:47:30+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000760s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001213s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0038s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32' LIMIT 0,10   [ RunTime:0.0004s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32'  [ RunTime:0.0002s ]

[ 2016-11-20T21:47:32+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000843s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001464s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0039s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32' LIMIT 10,10   [ RunTime:0.0004s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32'  [ RunTime:0.0003s ]

[ 2016-11-20T21:47:33+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000622s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001013s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0037s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32' LIMIT 0,10   [ RunTime:0.0004s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32'  [ RunTime:0.0002s ]

[ 2016-11-20T21:47:35+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000639s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000997s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0042s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32' LIMIT 10,10   [ RunTime:0.0003s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32'  [ RunTime:0.0002s ]

[ 2016-11-20T21:47:36+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000778s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001449s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0042s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32' LIMIT 0,10   [ RunTime:0.0004s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32'  [ RunTime:0.0002s ]

[ 2016-11-20T21:47:40+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000628s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001021s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0038s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32' LIMIT 10,10   [ RunTime:0.0003s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32'  [ RunTime:0.0002s ]

[ 2016-11-20T21:47:41+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000811s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001334s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0043s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32' LIMIT 0,10   [ RunTime:0.0004s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32'  [ RunTime:0.0002s ]

[ 2016-11-20T21:47:43+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002298s ]
INFO: [ app_begin ] --END-- [ RunTime:0.003354s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0050s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32' LIMIT 10,10   [ RunTime:0.0003s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32'  [ RunTime:0.0002s ]

[ 2016-11-20T21:47:44+08:00 ] ::1 /think_blog/Home/Member/personPhotoImg
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001167s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001904s ]
SQL: SHOW COLUMNS FROM `photo_img` [ RunTime:0.0038s ]
SQL: SELECT pi.id AS `id`,pi.img_title AS `img_title`,pi.img_src AS `img_src` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32' LIMIT 0,10   [ RunTime:0.0004s ]
SQL: SELECT COUNT(pi.id) AS `count` FROM photo_img pi LEFT JOIN photo p ON pi.photo_id=p.id  WHERE pi.photo_id = '32'  [ RunTime:0.0003s ]

[ 2016-11-20T21:51:28+08:00 ] ::1 /think_blog/Home/Member/register
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000807s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001255s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 6 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0039s ]
SQL: SELECT `id` FROM `member` WHERE `member_name` = 'shixinzhang'  [ RunTime:0.0003s ]
NOTIC: [2] call_user_func() expects parameter 1 to be a valid callback, no array or string given D:\wamp\www\think_blog\ThinkPHP\Library\Think\Upload.class.php 第 170 行.
SQL: INSERT INTO `member` (`member_name`,`passwd`,`sex`,`email`,`tel`,`address`,`question`,`answer`,`head_pic`,`hitnum`,`is_freeze`,`last_ip`,`last_time`) VALUES ('shixinzhang','e10adc3949ba59abbe56e057f20f883e','1','kouxin@gmail.com','15080190604','福建省福州市','Long way to go','shixinzhang','head_pic/head_pic_shixinzhang.jpg','0','0','0.0.0.0','2016-11-20 09:51:28') [ RunTime:0.1095s ]

[ 2016-11-20T21:52:08+08:00 ] ::1 /think_blog/Home/ArticleType/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000791s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001317s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0044s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0048s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: INSERT INTO `article_type` (`article_type_name`,`member_id`) VALUES ('Java','87') [ RunTime:0.1034s ]

[ 2016-11-20T21:52:09+08:00 ] ::1 /think_blog/Home/Member/personArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001297s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002361s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0037s ]
SQL: SELECT at.id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article_type at WHERE at.member_id = '87' LIMIT 0,10   [ RunTime:0.0003s ]
SQL: SELECT COUNT(at.id) AS `count` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0002s ]

[ 2016-11-20T21:52:18+08:00 ] ::1 /think_blog/Home/ArticleType/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000638s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001000s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0043s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0046s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: INSERT INTO `article_type` (`article_type_name`,`member_id`) VALUES ('Git','87') [ RunTime:0.1139s ]

[ 2016-11-20T21:52:19+08:00 ] ::1 /think_blog/Home/Member/personArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001780s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002859s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0039s ]
SQL: SELECT at.id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article_type at WHERE at.member_id = '87' LIMIT 0,10   [ RunTime:0.0003s ]
SQL: SELECT COUNT(at.id) AS `count` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0001s ]

[ 2016-11-20T21:52:30+08:00 ] ::1 /think_blog/Home/ArticleType/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000768s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001209s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0038s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0046s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: INSERT INTO `article_type` (`article_type_name`,`member_id`) VALUES ('网络基础','87') [ RunTime:0.1016s ]

[ 2016-11-20T21:52:31+08:00 ] ::1 /think_blog/Home/Member/personArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001441s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002363s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0034s ]
SQL: SELECT at.id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article_type at WHERE at.member_id = '87' LIMIT 0,10   [ RunTime:0.0003s ]
SQL: SELECT COUNT(at.id) AS `count` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0002s ]

[ 2016-11-20T21:52:46+08:00 ] ::1 /think_blog/Home/ArticleType/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000845s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001400s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0038s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0045s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: INSERT INTO `article_type` (`article_type_name`,`member_id`) VALUES ('IT菜鸟的进阶之路','87') [ RunTime:0.0732s ]

[ 2016-11-20T21:52:48+08:00 ] ::1 /think_blog/Home/Member/personArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001780s ]
INFO: [ app_begin ] --END-- [ RunTime:0.003065s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0039s ]
SQL: SELECT at.id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article_type at WHERE at.member_id = '87' LIMIT 0,10   [ RunTime:0.0042s ]
SQL: SELECT COUNT(at.id) AS `count` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T21:52:50+08:00 ] ::1 /think_blog/Home/ArticleType/personInfo
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000754s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001238s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0039s ]
SQL: SELECT * FROM `article_type` WHERE `id` = '50'  [ RunTime:0.0002s ]

[ 2016-11-20T21:52:54+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000624s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001080s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0039s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T21:54:07+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000514s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000900s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0060s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0045s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0046s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 50  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('Java Random 种子的作用、含参与不含参构造函数区别','87','50','<h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\">Random 通常用来作为随机数生成器，它有两个构造方法：</h2><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Random&nbsp;random&nbsp;=&nbsp;new&nbsp;Random();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Random&nbsp;random2&nbsp;=&nbsp;new&nbsp;Random(50);</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">1.不含参构造方法：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;Random()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;setSeed(System.nanoTime()&nbsp;+&nbsp;seedBase);
&nbsp;&nbsp;&nbsp;&nbsp;++seedBase;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">2.含参构造方法：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;Random(long&nbsp;seed)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;setSeed(seed);
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">都调用的 setSeed 方法：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;synchronized&nbsp;void&nbsp;setSeed(long&nbsp;seed)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;this.seed&nbsp;=&nbsp;(seed&nbsp;^&nbsp;multiplier)&nbsp;&amp;&nbsp;((1L&nbsp;&lt;&lt;&nbsp;48)&nbsp;-&nbsp;1);
&nbsp;&nbsp;&nbsp;&nbsp;haveNextNextGaussian&nbsp;=&nbsp;false;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>可以看到，不含参构造方法每次都使用当前时间作为种子，而含参构造方法是以一个固定值作为种子</h3><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>什么是种子 seed 呢？</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">seed 是 Random 生成随机数时使用的参数：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Random 中最重要的就是 next(int) 方法，使用 seed 进行计算:</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">protected&nbsp;synchronized&nbsp;int&nbsp;next(int&nbsp;bits)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;seed&nbsp;=&nbsp;(seed&nbsp;*&nbsp;multiplier&nbsp;+&nbsp;0xbL)&nbsp;&amp;&nbsp;((1L&nbsp;&lt;&lt;&nbsp;48)&nbsp;-&nbsp;1);
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(int)&nbsp;(seed&nbsp;&gt;&gt;&gt;&nbsp;(48&nbsp;-&nbsp;bits));
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">其他 nextXXX 方法都是调用的 next()。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">比如 nextInt(int):</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;int&nbsp;nextInt(int&nbsp;n)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(n&nbsp;&lt;=&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IllegalArgumentException(&quot;n&nbsp;&lt;=&nbsp;0:&nbsp;&quot;&nbsp;+&nbsp;n);
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;((n&nbsp;&amp;&nbsp;-n)&nbsp;==&nbsp;n)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//调用&nbsp;next()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(int)&nbsp;((n&nbsp;*&nbsp;(long)&nbsp;next(31))&nbsp;&gt;&gt;&nbsp;31);
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;bits,&nbsp;val;
&nbsp;&nbsp;&nbsp;&nbsp;do&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bits&nbsp;=&nbsp;next(31);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val&nbsp;=&nbsp;bits&nbsp;%&nbsp;n;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;while&nbsp;(bits&nbsp;-&nbsp;val&nbsp;+&nbsp;(n&nbsp;-&nbsp;1)&nbsp;&lt;&nbsp;0);
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;val;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">再比如 nextBoolean():</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">//也是调用的&nbsp;next()
public&nbsp;boolean&nbsp;nextBoolean()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;next(1)&nbsp;!=&nbsp;0;
}</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>举个栗子：</h2><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">@Test
public&nbsp;void&nbsp;testRandomParameter(){
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Random&nbsp;不含参构造方法：&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;5;&nbsp;i++)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Random&nbsp;random&nbsp;=&nbsp;new&nbsp;Random();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;j&nbsp;=&nbsp;0;&nbsp;j&nbsp;&lt;&nbsp;8;&nbsp;j++)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(&quot;&nbsp;&quot;&nbsp;+&nbsp;random.nextInt(100)&nbsp;+&nbsp;&quot;,&nbsp;&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Random&nbsp;含参构造方法：&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;5;&nbsp;i++)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Random&nbsp;random&nbsp;=&nbsp;new&nbsp;Random(50);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;j&nbsp;=&nbsp;0;&nbsp;j&nbsp;&lt;&nbsp;8;&nbsp;j++)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(&quot;&nbsp;&quot;&nbsp;+&nbsp;random.nextInt(100)&nbsp;+&nbsp;&quot;,&nbsp;&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">分别用含参构造方法和不含参构造方法创建 5 个随机生成器对象，每个随机生成器再生产 8 个随机数，对比下结果：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161030105332800\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">再运行一次：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161030105425114\" alt=\"这里写图片描述\" title=\"\"/></p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>总结：</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">通过上述例子可以发现：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">随机数是种子经过计算生成的</strong>。</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>不含参的构造函数每次都使用当前时间作为种子，随机性更强</p></li><li><p>而含参的构造函数其实是伪随机，更有可预见性</p></li></ul><p><br/></p>','0','2016-11-20 09:54:07') [ RunTime:0.0492s ]

[ 2016-11-20T21:54:08+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000840s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001511s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0077s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0007s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0005s ]

[ 2016-11-20T21:54:31+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000512s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000901s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0041s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T21:54:52+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000425s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000771s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0039s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0045s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0041s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 50  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('Java 集合深入理解（6）：AbstractList','87','50','<h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\">什么是 AbstractList</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161016143722734\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">AbstractList 继承自&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52829912\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">AbstractCollection 抽象类</a>，实现了&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52802849\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">List 接口</a>&nbsp;，是 ArrayList 和 AbstractSequentiaList 的父类。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">它实现了 List 的一些位置相关操作(比如 get,set,add,remove)，是<strong style=\"box-sizing: border-box;\">第一个</strong>实现随机访问方法的集合类，但<strong style=\"box-sizing: border-box;\">不支持添加和替换</strong>。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">在&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52829912\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">AbstractCollection 抽象类</a>&nbsp;中我们知道，AbstractCollection 要求子类必须实现两个方法： iterator() 和 size()。 AbstractList 实现了 iterator()方法：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;Iterator&lt;E&gt;&nbsp;iterator()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;Itr();
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">但没有实现 size() 方法，此外还提供了一个抽象方法 get()：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;abstract&nbsp;E&nbsp;get(int&nbsp;location);</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">因此<strong style=\"box-sizing: border-box;\">子类必须要实现 get(), size() 方法</strong>。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">另外，如果子类想要能够修改元素，还需要重写 add(), set(), remove() 方法，否则会报&nbsp;<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; padding: 2px 4px; font-size: 12.6px; color: rgb(63, 63, 63); background-color: rgba(128, 128, 128, 0.0745098); white-space: nowrap; border-radius: 0px;\">UnsupportedOperationException</code>&nbsp;错。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>实现的方法</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">1.默认不支持的 add(), set(),remove():</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;boolean&nbsp;add(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;add(size(),&nbsp;e);
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
}

public&nbsp;void&nbsp;add(int&nbsp;index,&nbsp;E&nbsp;element)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;UnsupportedOperationException();
}

public&nbsp;E&nbsp;set(int&nbsp;index,&nbsp;E&nbsp;element)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;UnsupportedOperationException();
}

public&nbsp;E&nbsp;remove(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;UnsupportedOperationException();
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">2.indexOf(Object) 获取指定对象&nbsp;<strong style=\"box-sizing: border-box;\">首次出现</strong>&nbsp;的索引：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;int&nbsp;indexOf(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//获取&nbsp;ListIterator，此时游标位置为&nbsp;0&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;ListIterator&lt;E&gt;&nbsp;it&nbsp;=&nbsp;listIterator();
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o==null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//向后遍历
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(it.hasNext())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(it.next()==null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//返回游标的前面元素索引
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;it.previousIndex();
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(it.hasNext())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o.equals(it.next()))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;it.previousIndex();
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;-1;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">在&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52752589\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">ListIterator</a>&nbsp;中我们介绍了&nbsp;<strong style=\"box-sizing: border-box;\">游标</strong>&nbsp;的概念，每次调用&nbsp;<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; padding: 2px 4px; font-size: 12.6px; color: rgb(63, 63, 63); background-color: rgba(128, 128, 128, 0.0745098); white-space: nowrap; border-radius: 0px;\">listIterator.next()</code>&nbsp;方法 游标 都会后移一位，当&nbsp;<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; padding: 2px 4px; font-size: 12.6px; color: rgb(63, 63, 63); background-color: rgba(128, 128, 128, 0.0745098); white-space: nowrap; border-radius: 0px;\">listIterator.next() == o</code>&nbsp;时（即找到我们需要的的元素），游标已经在 o 的后面，所以需要返回 游标的&nbsp;<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; padding: 2px 4px; font-size: 12.6px; color: rgb(63, 63, 63); background-color: rgba(128, 128, 128, 0.0745098); white-space: nowrap; border-radius: 0px;\">previousIndex()</code>.</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">3.lastIndexOf(Object) 获取指定对象最后一次出现的位置:</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;int&nbsp;lastIndexOf(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//获取&nbsp;ListIterator，此时游标在最后一位
&nbsp;&nbsp;&nbsp;&nbsp;ListIterator&lt;E&gt;&nbsp;it&nbsp;=&nbsp;listIterator(size());
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o==null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//向前遍历
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(it.hasPrevious())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(it.previous()==null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//返回&nbsp;it.nextIndex()&nbsp;原因类似&nbsp;2
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;it.nextIndex();
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(it.hasPrevious())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o.equals(it.previous()))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;it.nextIndex();
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;-1;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">4.clear(), removeRange(int, int), 全部/范围 删除元素：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;void&nbsp;clear()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//传入由子类实现的&nbsp;size()
&nbsp;&nbsp;&nbsp;&nbsp;removeRange(0,&nbsp;size());
}

protected&nbsp;void&nbsp;removeRange(int&nbsp;fromIndex,&nbsp;int&nbsp;toIndex)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//获取&nbsp;ListIterator&nbsp;来进行迭代删除
&nbsp;&nbsp;&nbsp;&nbsp;ListIterator&lt;E&gt;&nbsp;it&nbsp;=&nbsp;listIterator(fromIndex);
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i=0,&nbsp;n=toIndex-fromIndex;&nbsp;i&lt;n;&nbsp;i++)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;it.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;it.remove();
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">5.addAll(int,Collection</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>两种内部迭代器</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">与其他集合实现类不同，AbstractList 内部已经提供了 Iterator, ListIterator 迭代器的实现类，分别为 Itr, ListItr, 不需要我们去帮他实现。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Itr 代码分析：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">private&nbsp;class&nbsp;Itr&nbsp;implements&nbsp;Iterator&lt;E&gt;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//游标
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;cursor&nbsp;=&nbsp;0;

&nbsp;&nbsp;&nbsp;&nbsp;//上一次迭代到的元素的位置，每次使用完就会置为&nbsp;-1
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;lastRet&nbsp;=&nbsp;-1;

&nbsp;&nbsp;&nbsp;&nbsp;//用来判断是否发生并发操作的标示，如果这两个值不一致，就会报错
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;expectedModCount&nbsp;=&nbsp;modCount;

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;hasNext()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cursor&nbsp;!=&nbsp;size();
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;E&nbsp;next()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//时刻检查是否有并发修改操作
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;cursor;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//调用&nbsp;子类实现的&nbsp;get()&nbsp;方法获取元素
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;next&nbsp;=&nbsp;get(i);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//有迭代操作后就会记录上次迭代的位置
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastRet&nbsp;=&nbsp;i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor&nbsp;=&nbsp;i&nbsp;+&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;next;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IndexOutOfBoundsException&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;remove()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(lastRet&nbsp;&lt;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IllegalStateException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//调用需要子类实现的&nbsp;remove()方法
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AbstractList.this.remove(lastRet);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(lastRet&nbsp;&lt;&nbsp;cursor)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor--;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//删除后&nbsp;上次迭代的记录就会置为&nbsp;-1
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastRet&nbsp;=&nbsp;-1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expectedModCount&nbsp;=&nbsp;modCount;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IndexOutOfBoundsException&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//检查是否有并发修改
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;void&nbsp;checkForComodification()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(modCount&nbsp;!=&nbsp;expectedModCount)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">可以看到 Itr 只是简单实现了 Iterator 的 next, remove 方法。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>ListItr 代码分析:</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">//ListItr&nbsp;是&nbsp;Itr&nbsp;的增强版
private&nbsp;class&nbsp;ListItr&nbsp;extends&nbsp;Itr&nbsp;implements&nbsp;ListIterator&lt;E&gt;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//多了个指定游标位置的构造参数，怎么都不检查是否越界！
&nbsp;&nbsp;&nbsp;&nbsp;ListItr(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor&nbsp;=&nbsp;index;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//除了一开始都有前面元素
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;hasPrevious()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cursor&nbsp;!=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;E&nbsp;previous()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//获取游标前面一位元素
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;cursor&nbsp;-&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;previous&nbsp;=&nbsp;get(i);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//为什么上次操作的位置是&nbsp;游标当前位置呢？哦，看错了，游标也前移了
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastRet&nbsp;=&nbsp;cursor&nbsp;=&nbsp;i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;previous;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IndexOutOfBoundsException&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//下一个元素的位置就是当前游标所在位置
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;nextIndex()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cursor;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;previousIndex()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cursor-1;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;set(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(lastRet&nbsp;&lt;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IllegalStateException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//子类得检查&nbsp;lasRet&nbsp;是否为&nbsp;-1
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AbstractList.this.set(lastRet,&nbsp;e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expectedModCount&nbsp;=&nbsp;modCount;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IndexOutOfBoundsException&nbsp;ex)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;add(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;cursor;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AbstractList.this.add(i,&nbsp;e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//又置为&nbsp;-1&nbsp;了
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastRet&nbsp;=&nbsp;-1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor&nbsp;=&nbsp;i&nbsp;+&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expectedModCount&nbsp;=&nbsp;modCount;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IndexOutOfBoundsException&nbsp;ex)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">ListItr 在 Itr 基础上多了 向前 和 set 操作。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>两种内部类</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">在 subList 方法中我们发现在切分 子序列时会分为两类，RandomAccess or not：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;List&lt;E&gt;&nbsp;subList(int&nbsp;fromIndex,&nbsp;int&nbsp;toIndex)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(this&nbsp;instanceof&nbsp;RandomAccess&nbsp;?
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;RandomAccessSubList&lt;&gt;(this,&nbsp;fromIndex,&nbsp;toIndex)&nbsp;:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;SubList&lt;&gt;(this,&nbsp;fromIndex,&nbsp;toIndex));
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>RandomAccess</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;interface&nbsp;RandomAccess&nbsp;{
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">RandomAccess 是一个空的接口，它用来标识某个类是否支持&nbsp;<strong style=\"box-sizing: border-box;\">随机访问</strong>（随机访问，相对比“按顺序访问”）。一个支持随机访问的类明显可以使用更加高效的<a href=\"http://lib.csdn.net/base/datastructure\" class=\"replace_word\" title=\"算法与数据结构知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">算法</a>。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">List 中支持随机访问最佳的例子就是 ArrayList, 它的<a href=\"http://lib.csdn.net/base/datastructure\" class=\"replace_word\" title=\"算法与数据结构知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">数据结构</a>使得 get(), set(), add()等方法的时间复杂度都是 O(1);</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">反例就是 LinkedList, 链表结构使得它不支持随机访问，只能按序访问，因此在一些操作上性能略逊一筹。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">通常在操作一个 List 对象时，通常会判断是否支持&nbsp;<strong style=\"box-sizing: border-box;\">随机访问</strong>，也就是<em style=\"box-sizing: border-box;\">* 是否为 RandomAccess 的实例*</em>，从而使用不同的算法。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">比如遍历，实现了 RandomAccess 的集合使用 get():</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: &quot;Source Code Pro&quot;, monospace; padding: 5px 5px 5px 60px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">for&nbsp;(int&nbsp;i=0,&nbsp;n=list.size();&nbsp;i&nbsp;&amp;lt;&nbsp;n;&nbsp;i++)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list.get(i);1212</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">比用迭代器更快</strong>：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&nbsp;&nbsp;for&nbsp;(Iterator&nbsp;i=list.iterator();&nbsp;i.hasNext();&nbsp;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i.next();</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">实现了 RandomAccess 接口的类有：&nbsp;<br/>ArrayList, AttributeList, CopyOnWriteArrayList, Vector, Stack 等。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>SubList 源码：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">//&nbsp;AbstractList&nbsp;的子类，表示父&nbsp;List&nbsp;的一部分
class&nbsp;SubList&lt;E&gt;&nbsp;extends&nbsp;AbstractList&lt;E&gt;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;final&nbsp;AbstractList&lt;E&gt;&nbsp;l;
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;final&nbsp;int&nbsp;offset;
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;int&nbsp;size;

//构造参数:
//list&nbsp;：父&nbsp;List
//fromIndex&nbsp;:&nbsp;从父&nbsp;List&nbsp;中开始的位置
//toIndex&nbsp;:&nbsp;在父&nbsp;List&nbsp;中哪里结束
SubList(AbstractList&lt;E&gt;&nbsp;list,&nbsp;int&nbsp;fromIndex,&nbsp;int&nbsp;toIndex)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(fromIndex&nbsp;&lt;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IndexOutOfBoundsException(&quot;fromIndex&nbsp;=&nbsp;&quot;&nbsp;+&nbsp;fromIndex);
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(toIndex&nbsp;&gt;&nbsp;list.size())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IndexOutOfBoundsException(&quot;toIndex&nbsp;=&nbsp;&quot;&nbsp;+&nbsp;toIndex);
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(fromIndex&nbsp;&gt;&nbsp;toIndex)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IllegalArgumentException(&quot;fromIndex(&quot;&nbsp;+&nbsp;fromIndex&nbsp;+
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;)&nbsp;&gt;&nbsp;toIndex(&quot;&nbsp;+&nbsp;toIndex&nbsp;+&nbsp;&quot;)&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;l&nbsp;=&nbsp;list;
&nbsp;&nbsp;&nbsp;&nbsp;offset&nbsp;=&nbsp;fromIndex;
&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;=&nbsp;toIndex&nbsp;-&nbsp;fromIndex;
&nbsp;&nbsp;&nbsp;&nbsp;//和父类使用同一个&nbsp;modCount
&nbsp;&nbsp;&nbsp;&nbsp;this.modCount&nbsp;=&nbsp;l.modCount;
}

//使用父类的&nbsp;set()
public&nbsp;E&nbsp;set(int&nbsp;index,&nbsp;E&nbsp;element)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;rangeCheck(index);
&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;l.set(index+offset,&nbsp;element);
}

//使用父类的&nbsp;get()
public&nbsp;E&nbsp;get(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;rangeCheck(index);
&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;l.get(index+offset);
}

//子&nbsp;List&nbsp;的大小
public&nbsp;int&nbsp;size()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;size;
}

public&nbsp;void&nbsp;add(int&nbsp;index,&nbsp;E&nbsp;element)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;rangeCheckForAdd(index);
&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;//根据子&nbsp;List&nbsp;开始的位置，加上偏移量，直接在父&nbsp;List&nbsp;上进行添加
&nbsp;&nbsp;&nbsp;&nbsp;l.add(index+offset,&nbsp;element);
&nbsp;&nbsp;&nbsp;&nbsp;this.modCount&nbsp;=&nbsp;l.modCount;
&nbsp;&nbsp;&nbsp;&nbsp;size++;
}

public&nbsp;E&nbsp;remove(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;rangeCheck(index);
&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;//根据子&nbsp;List&nbsp;开始的位置，加上偏移量，直接在父&nbsp;List&nbsp;上进行删除
&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;result&nbsp;=&nbsp;l.remove(index+offset);
&nbsp;&nbsp;&nbsp;&nbsp;this.modCount&nbsp;=&nbsp;l.modCount;
&nbsp;&nbsp;&nbsp;&nbsp;size--;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result;
}

protected&nbsp;void&nbsp;removeRange(int&nbsp;fromIndex,&nbsp;int&nbsp;toIndex)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;//调用父类的&nbsp;局部删除
&nbsp;&nbsp;&nbsp;&nbsp;l.removeRange(fromIndex+offset,&nbsp;toIndex+offset);
&nbsp;&nbsp;&nbsp;&nbsp;this.modCount&nbsp;=&nbsp;l.modCount;
&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;-=&nbsp;(toIndex-fromIndex);
}

public&nbsp;boolean&nbsp;addAll(Collection&lt;?&nbsp;extends&nbsp;E&gt;&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;addAll(size,&nbsp;c);
}

public&nbsp;boolean&nbsp;addAll(int&nbsp;index,&nbsp;Collection&lt;?&nbsp;extends&nbsp;E&gt;&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;rangeCheckForAdd(index);
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;cSize&nbsp;=&nbsp;c.size();
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(cSize==0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;

&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;//还是使用的父类&nbsp;addAll()
&nbsp;&nbsp;&nbsp;&nbsp;l.addAll(offset+index,&nbsp;c);
&nbsp;&nbsp;&nbsp;&nbsp;this.modCount&nbsp;=&nbsp;l.modCount;
&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;+=&nbsp;cSize;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
}

public&nbsp;Iterator&lt;E&gt;&nbsp;iterator()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;listIterator();
}

public&nbsp;ListIterator&lt;E&gt;&nbsp;listIterator(final&nbsp;int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;rangeCheckForAdd(index);

&nbsp;&nbsp;&nbsp;&nbsp;//创建一个&nbsp;匿名内部&nbsp;ListIterator，指向的还是&nbsp;父类的&nbsp;listIterator
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;ListIterator&lt;E&gt;()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;final&nbsp;ListIterator&lt;E&gt;&nbsp;i&nbsp;=&nbsp;l.listIterator(index+offset);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;hasNext()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;nextIndex()&nbsp;&lt;&nbsp;size;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;E&nbsp;next()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(hasNext())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;hasPrevious()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;previousIndex()&nbsp;&gt;=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;E&nbsp;previous()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(hasPrevious())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i.previous();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;nextIndex()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i.nextIndex()&nbsp;-&nbsp;offset;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;previousIndex()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i.previousIndex()&nbsp;-&nbsp;offset;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;remove()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i.remove();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SubList.this.modCount&nbsp;=&nbsp;l.modCount;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size--;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;set(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i.set(e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;add(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i.add(e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SubList.this.modCount&nbsp;=&nbsp;l.modCount;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size++;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;};
}

public&nbsp;List&lt;E&gt;&nbsp;subList(int&nbsp;fromIndex,&nbsp;int&nbsp;toIndex)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;SubList&lt;&gt;(this,&nbsp;fromIndex,&nbsp;toIndex);
}

private&nbsp;void&nbsp;rangeCheck(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(index&nbsp;&lt;&nbsp;0&nbsp;||&nbsp;index&nbsp;&gt;=&nbsp;size)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IndexOutOfBoundsException(outOfBoundsMsg(index));
}

private&nbsp;void&nbsp;rangeCheckForAdd(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(index&nbsp;&lt;&nbsp;0&nbsp;||&nbsp;index&nbsp;&gt;&nbsp;size)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IndexOutOfBoundsException(outOfBoundsMsg(index));
}

private&nbsp;String&nbsp;outOfBoundsMsg(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;Index:&nbsp;&quot;+index+&quot;,&nbsp;Size:&nbsp;&quot;+size;
}

private&nbsp;void&nbsp;checkForComodification()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(this.modCount&nbsp;!=&nbsp;l.modCount)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
}
}</pre><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>总结：SubList 就是吭老族，虽然自立门户，等到要干活时，使用的都是父类的方法，父类的数据。</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">所以可以通过它来间接操作父 List。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>RandomAccessSubList 源码：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">class&nbsp;RandomAccessSubList&lt;E&gt;&nbsp;extends&nbsp;SubList&lt;E&gt;&nbsp;implements&nbsp;RandomAccess&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;RandomAccessSubList(AbstractList&lt;E&gt;&nbsp;list,&nbsp;int&nbsp;fromIndex,&nbsp;int&nbsp;toIndex)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(list,&nbsp;fromIndex,&nbsp;toIndex);
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;List&lt;E&gt;&nbsp;subList(int&nbsp;fromIndex,&nbsp;int&nbsp;toIndex)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;RandomAccessSubList&lt;&gt;(this,&nbsp;fromIndex,&nbsp;toIndex);
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>RandomAccessSubList 只不过是在 SubList 之外加了个 RandomAccess 的标识，表明他可以支持随机访问而已，别无他尔。</h4><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>总结：</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161016225931216\" alt=\"这里写图片描述\" title=\"\"/></p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>AbstractList 作为 List 家族的中坚力量</h4><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>既实现了 List 的期望</p></li><li><p>也继承了 AbstractCollection 的传统</p></li><li><p>还创建了内部的迭代器 Itr, ListItr</p></li><li><p>还有两个内部子类 SubList 和 RandomAccessSublist；</p></li></ul><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">百废俱兴，AbstractList 博采众长，制定了 List 家族的家规，List 家族基础已经搭建的差不多了。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">List 家族在 AbstractList 的指导下出了几个英豪，成为了&nbsp;<a href=\"http://lib.csdn.net/base/javaee\" class=\"replace_word\" title=\"Java EE知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Java</a>&nbsp;世界的栋梁之才，具体细节，我们下回再续。</p><p><br/></p>','0','2016-11-20 09:54:52') [ RunTime:0.1228s ]

[ 2016-11-20T21:54:53+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000939s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001682s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0054s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0011s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T21:54:54+08:00 ] ::1 /think_blog/Home/Article/personInfo
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000515s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000904s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0037s ]
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0041s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,m.member_name AS `member_name`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name`,COUNT(ac.id) AS `article_comment_count` FROM `member` `m` LEFT JOIN article a ON a.member_id=m.id LEFT JOIN article_type at ON a.article_type_id=at.id LEFT JOIN article_comment ac ON a.id=ac.article_id  WHERE a.id = '209' GROUP BY a.id  [ RunTime:0.0006s ]

[ 2016-11-20T21:54:54+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000644s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001178s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0040s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T21:55:07+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000743s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001122s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0031s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T21:55:22+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000624s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001029s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0047s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0054s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0044s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 50  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('Java 集合深入理解（7）：ArrayList','87','50','<h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\">什么是 ArrayList</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161018135020035\" alt=\"这里写图片描述\" title=\"\"/>&nbsp;<br/><img src=\"http://img.blog.csdn.net/20161018134856596\" alt=\"这里写图片描述\" title=\"\"/></p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>ArrayList 是 Java 集合框架中&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52802849\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">List接口</a>&nbsp;的一个实现类。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>可以说 ArrayList 是我们使用最多的 List 集合，它有以下特点：</h4><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>容量不固定，想放多少放多少（当然有最大阈值，但一般达不到）</p></li><li><p>有序的（元素输出顺序与输入顺序一致）</p></li><li><p>元素可以为 null</p></li><li><p>效率高&nbsp;<br/></p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p>size(), isEmpty(), get(), set() iterator(), ListIterator() 方法的时间复杂度都是 O(1)</p></li><li><p>add() 添加操作的时间复杂度平均为 O(n)</p></li><li><p>其他所有操作的时间复杂度几乎都是 O(n)</p></li></ul><li><p>占用空间更小&nbsp;<br/></p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p>对比 LinkedList，不用占用额外空间维护链表结构</p></li></ul></ul><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>那 ArrayList 为什么有这些优点呢？我们通过源码一一解析。</h4><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>ArrayList 的成员变量</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161018135844873\" alt=\"这里写图片描述\" title=\"\"/></p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>1.底层数据结构，数组：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">transient&nbsp;Object[]&nbsp;elementData</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">由于数组类型为 Object，所以允许添加 null 。&nbsp;<br/>transient 说明这个数组无法序列化。&nbsp;<br/>初始时为 DEFAULTCAPACITY_EMPTY_ELEMENTDATA 。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>2.默认的空数组：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">private&nbsp;static&nbsp;final&nbsp;Object[]&nbsp;DEFAULTCAPACITY_EMPTY_ELEMENTDATA&nbsp;=&nbsp;{};

private&nbsp;static&nbsp;final&nbsp;Object[]&nbsp;EMPTY_ELEMENTDATA&nbsp;=&nbsp;{};</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">不清楚它俩啥区别。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>3.数组初始容量为 10：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">private&nbsp;static&nbsp;final&nbsp;int&nbsp;DEFAULT_CAPACITY&nbsp;=&nbsp;10;</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>4.数组中当前元素个数：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">private&nbsp;int&nbsp;size;</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">size &lt;= capacity</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>5.数组最大容量：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">private&nbsp;static&nbsp;final&nbsp;int&nbsp;MAX_ARRAY_SIZE&nbsp;=&nbsp;Integer.MAX_VALUE&nbsp;-&nbsp;8;</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; padding: 2px 4px; font-size: 12.6px; color: rgb(63, 63, 63); background-color: rgba(128, 128, 128, 0.0745098); white-space: nowrap; border-radius: 0px;\">Integer.MAX_VALUE</code>&nbsp;= 0x7fffffff</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">换算成二进制： 2^31 - 1，1111111111111111111111111111111</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">十进制就是 ：2147483647，二十一亿多。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">一些虚拟器需要在数组前加个 头标签，所以减去 8 。&nbsp;<br/>当想要分配比 MAX_ARRAY_SIZE 大的个数就会报&nbsp;<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; padding: 2px 4px; font-size: 12.6px; color: rgb(63, 63, 63); background-color: rgba(128, 128, 128, 0.0745098); white-space: nowrap; border-radius: 0px;\">OutOfMemoryError</code>。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>ArrayList 的关键方法</h2><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>1.构造函数</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">ArrayList 有三种构造函数：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">//初始为空数组
public&nbsp;ArrayList()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;this.elementData&nbsp;=&nbsp;DEFAULTCAPACITY_EMPTY_ELEMENTDATA;
}

//根据指定容量，创建个对象数组
public&nbsp;ArrayList(int&nbsp;initialCapacity)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(initialCapacity&nbsp;&gt;&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.elementData&nbsp;=&nbsp;new&nbsp;Object[initialCapacity];
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if&nbsp;(initialCapacity&nbsp;==&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.elementData&nbsp;=&nbsp;EMPTY_ELEMENTDATA;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IllegalArgumentException(&quot;Illegal&nbsp;Capacity:&nbsp;&quot;+
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initialCapacity);
&nbsp;&nbsp;&nbsp;&nbsp;}
}

//直接创建和指定集合一样内容的&nbsp;ArrayList
public&nbsp;ArrayList(Collection&lt;?&nbsp;extends&nbsp;E&gt;&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;elementData&nbsp;=&nbsp;c.toArray();
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;((size&nbsp;=&nbsp;elementData.length)&nbsp;!=&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;c.toArray&nbsp;有可能不返回一个&nbsp;Object&nbsp;数组
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(elementData.getClass()&nbsp;!=&nbsp;Object[].class)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//使用&nbsp;Arrays.copy&nbsp;方法拷创建一个&nbsp;Object&nbsp;数组
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementData&nbsp;=&nbsp;Arrays.copyOf(elementData,&nbsp;size,&nbsp;Object[].class);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;replace&nbsp;with&nbsp;empty&nbsp;array.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.elementData&nbsp;=&nbsp;EMPTY_ELEMENTDATA;
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>2.添加元素：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;boolean&nbsp;add(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//对数组的容量进行调整
&nbsp;&nbsp;&nbsp;&nbsp;ensureCapacityInternal(size&nbsp;+&nbsp;1);&nbsp;&nbsp;//&nbsp;Increments&nbsp;modCount!!
&nbsp;&nbsp;&nbsp;&nbsp;elementData[size++]&nbsp;=&nbsp;e;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
}

//在指定位置添加一个元素
public&nbsp;void&nbsp;add(int&nbsp;index,&nbsp;E&nbsp;element)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;rangeCheckForAdd(index);

&nbsp;&nbsp;&nbsp;&nbsp;//对数组的容量进行调整
&nbsp;&nbsp;&nbsp;&nbsp;ensureCapacityInternal(size&nbsp;+&nbsp;1);&nbsp;&nbsp;//&nbsp;Increments&nbsp;modCount!!
&nbsp;&nbsp;&nbsp;&nbsp;//整体后移一位，效率不太好啊
&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(elementData,&nbsp;index,&nbsp;elementData,&nbsp;index&nbsp;+&nbsp;1,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;-&nbsp;index);
&nbsp;&nbsp;&nbsp;&nbsp;elementData[index]&nbsp;=&nbsp;element;
&nbsp;&nbsp;&nbsp;&nbsp;size++;
}


//添加一个集合
public&nbsp;boolean&nbsp;addAll(Collection&lt;?&nbsp;extends&nbsp;E&gt;&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//把该集合转为对象数组
&nbsp;&nbsp;&nbsp;&nbsp;Object[]&nbsp;a&nbsp;=&nbsp;c.toArray();
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;numNew&nbsp;=&nbsp;a.length;
&nbsp;&nbsp;&nbsp;&nbsp;//增加容量
&nbsp;&nbsp;&nbsp;&nbsp;ensureCapacityInternal(size&nbsp;+&nbsp;numNew);&nbsp;&nbsp;//&nbsp;Increments&nbsp;modCount
&nbsp;&nbsp;&nbsp;&nbsp;//挨个向后迁移
&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(a,&nbsp;0,&nbsp;elementData,&nbsp;size,&nbsp;numNew);
&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;+=&nbsp;numNew;
&nbsp;&nbsp;&nbsp;&nbsp;//新数组有元素，就返回&nbsp;true
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;numNew&nbsp;!=&nbsp;0;
}

//在指定位置，添加一个集合
public&nbsp;boolean&nbsp;addAll(int&nbsp;index,&nbsp;Collection&lt;?&nbsp;extends&nbsp;E&gt;&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;rangeCheckForAdd(index);

&nbsp;&nbsp;&nbsp;&nbsp;Object[]&nbsp;a&nbsp;=&nbsp;c.toArray();
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;numNew&nbsp;=&nbsp;a.length;
&nbsp;&nbsp;&nbsp;&nbsp;ensureCapacityInternal(size&nbsp;+&nbsp;numNew);&nbsp;&nbsp;//&nbsp;Increments&nbsp;modCount

&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;numMoved&nbsp;=&nbsp;size&nbsp;-&nbsp;index;
&nbsp;&nbsp;&nbsp;&nbsp;//原来的数组挨个向后迁移
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(numMoved&nbsp;&gt;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(elementData,&nbsp;index,&nbsp;elementData,&nbsp;index&nbsp;+&nbsp;numNew,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numMoved);
&nbsp;&nbsp;&nbsp;&nbsp;//把新的集合数组&nbsp;添加到指定位置
&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(a,&nbsp;0,&nbsp;elementData,&nbsp;index,&nbsp;numNew);
&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;+=&nbsp;numNew;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;numNew&nbsp;!=&nbsp;0;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">虽说 System.arraycopy 是底层方法，但每次添加都后移一位还是不太好。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>3.对数组的容量进行调整：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;void&nbsp;ensureCapacity(int&nbsp;minCapacity)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;minExpand&nbsp;=&nbsp;(elementData&nbsp;!=&nbsp;DEFAULTCAPACITY_EMPTY_ELEMENTDATA)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;不是默认的数组，说明已经添加了元素
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;?&nbsp;0
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;默认的容量
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;DEFAULT_CAPACITY;

&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(minCapacity&nbsp;&gt;&nbsp;minExpand)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//当前元素个数比默认容量大
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ensureExplicitCapacity(minCapacity);
&nbsp;&nbsp;&nbsp;&nbsp;}
}

private&nbsp;void&nbsp;ensureCapacityInternal(int&nbsp;minCapacity)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//还没有添加元素
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(elementData&nbsp;==&nbsp;DEFAULTCAPACITY_EMPTY_ELEMENTDATA)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//最小容量取默认容量和&nbsp;当前元素个数&nbsp;最大值
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minCapacity&nbsp;=&nbsp;Math.max(DEFAULT_CAPACITY,&nbsp;minCapacity);
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;ensureExplicitCapacity(minCapacity);
}

private&nbsp;void&nbsp;ensureExplicitCapacity(int&nbsp;minCapacity)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;

&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;容量不够了，需要扩容
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(minCapacity&nbsp;-&nbsp;elementData.length&nbsp;&gt;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grow(minCapacity);
}</pre><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>我们可以主动调用 ensureCapcity 来增加 ArrayList 对象的容量，这样就避免添加元素满了时扩容、挨个复制后移等消耗。</h4><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>4.扩容：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">private&nbsp;void&nbsp;grow(int&nbsp;minCapacity)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;oldCapacity&nbsp;=&nbsp;elementData.length;
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;1.5&nbsp;倍&nbsp;原来容量
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;newCapacity&nbsp;=&nbsp;oldCapacity&nbsp;+&nbsp;(oldCapacity&nbsp;&gt;&gt;&nbsp;1);

&nbsp;&nbsp;&nbsp;&nbsp;//如果当前容量还没达到&nbsp;1.5&nbsp;倍旧容量，就使用当前容量，省的站那么多地方
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(newCapacity&nbsp;-&nbsp;minCapacity&nbsp;&lt;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newCapacity&nbsp;=&nbsp;minCapacity;

&nbsp;&nbsp;&nbsp;&nbsp;//新的容量居然超出了&nbsp;MAX_ARRAY_SIZE
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(newCapacity&nbsp;-&nbsp;MAX_ARRAY_SIZE&nbsp;&gt;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//最大容量可以是&nbsp;Integer.MAX_VALUE
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newCapacity&nbsp;=&nbsp;hugeCapacity(minCapacity);

&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;minCapacity&nbsp;一般跟元素个数&nbsp;size&nbsp;很接近，所以新建的数组容量为&nbsp;newCapacity&nbsp;更宽松些
&nbsp;&nbsp;&nbsp;&nbsp;elementData&nbsp;=&nbsp;Arrays.copyOf(elementData,&nbsp;newCapacity);
}

private&nbsp;static&nbsp;int&nbsp;hugeCapacity(int&nbsp;minCapacity)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(minCapacity&nbsp;&lt;&nbsp;0)&nbsp;//&nbsp;overflow
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;OutOfMemoryError();
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(minCapacity&nbsp;&gt;&nbsp;MAX_ARRAY_SIZE)&nbsp;?
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer.MAX_VALUE&nbsp;:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MAX_ARRAY_SIZE;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>5.查询，修改等操作，直接根据角标对数组操作，都很快：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">E&nbsp;elementData(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(E)&nbsp;elementData[index];
}

//获取
public&nbsp;E&nbsp;get(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;rangeCheck(index);
&nbsp;&nbsp;&nbsp;&nbsp;//直接根据数组角标返回元素，快的一比
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;elementData(index);
}

//修改
public&nbsp;E&nbsp;set(int&nbsp;index,&nbsp;E&nbsp;element)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;rangeCheck(index);
&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;oldValue&nbsp;=&nbsp;elementData(index);

&nbsp;&nbsp;&nbsp;&nbsp;//直接对数组操作
&nbsp;&nbsp;&nbsp;&nbsp;elementData[index]&nbsp;=&nbsp;element;
&nbsp;&nbsp;&nbsp;&nbsp;//返回原来的值
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;oldValue;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>6.删除，还是有点慢：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">//根据位置删除
public&nbsp;E&nbsp;remove(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;rangeCheck(index);

&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;oldValue&nbsp;=&nbsp;elementData(index);

&nbsp;&nbsp;&nbsp;&nbsp;//挨个往前移一位
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;numMoved&nbsp;=&nbsp;size&nbsp;-&nbsp;index&nbsp;-&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(numMoved&nbsp;&gt;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(elementData,&nbsp;index+1,&nbsp;elementData,&nbsp;index,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numMoved);
&nbsp;&nbsp;&nbsp;&nbsp;//原数组中最后一个元素删掉
&nbsp;&nbsp;&nbsp;&nbsp;elementData[--size]&nbsp;=&nbsp;null;&nbsp;//&nbsp;clear&nbsp;to&nbsp;let&nbsp;GC&nbsp;do&nbsp;its&nbsp;work

&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;oldValue;
}

//删除某个元素
public&nbsp;boolean&nbsp;remove(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//挨个遍历找到目标
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;index&nbsp;=&nbsp;0;&nbsp;index&nbsp;&lt;&nbsp;size;&nbsp;index++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(elementData[index]&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//快速删除
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fastRemove(index);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;index&nbsp;=&nbsp;0;&nbsp;index&nbsp;&lt;&nbsp;size;&nbsp;index++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o.equals(elementData[index]))&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fastRemove(index);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
}

//内部方法，“快速删除”，就是把重复的代码移到一个方法里
//没看出来比其他&nbsp;remove&nbsp;哪儿快了&nbsp;-&nbsp;-
private&nbsp;void&nbsp;fastRemove(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;numMoved&nbsp;=&nbsp;size&nbsp;-&nbsp;index&nbsp;-&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(numMoved&nbsp;&gt;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(elementData,&nbsp;index+1,&nbsp;elementData,&nbsp;index,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numMoved);
&nbsp;&nbsp;&nbsp;&nbsp;elementData[--size]&nbsp;=&nbsp;null;&nbsp;//&nbsp;clear&nbsp;to&nbsp;let&nbsp;GC&nbsp;do&nbsp;its&nbsp;work
}

//保留公共的
public&nbsp;boolean&nbsp;retainAll(Collection&lt;?&gt;&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;Objects.requireNonNull(c);
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;batchRemove(c,&nbsp;true);
}

//删除或者保留指定集合中的元素
private&nbsp;boolean&nbsp;batchRemove(Collection&lt;?&gt;&nbsp;c,&nbsp;boolean&nbsp;complement)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Object[]&nbsp;elementData&nbsp;=&nbsp;this.elementData;
&nbsp;&nbsp;&nbsp;&nbsp;//使用两个变量，一个负责向后扫描，一个从&nbsp;0&nbsp;开始，等待覆盖操作
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;r&nbsp;=&nbsp;0,&nbsp;w&nbsp;=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;boolean&nbsp;modified&nbsp;=&nbsp;false;
&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//遍历&nbsp;ArrayList&nbsp;集合
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(;&nbsp;r&nbsp;&lt;&nbsp;size;&nbsp;r++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//如果指定集合中是否有这个元素，根据&nbsp;complement&nbsp;判断是否往前覆盖删除
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(c.contains(elementData[r])&nbsp;==&nbsp;complement)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementData[w++]&nbsp;=&nbsp;elementData[r];
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;finally&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//发生了异常，直接把&nbsp;r&nbsp;后面的复制到&nbsp;w&nbsp;后面
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(r&nbsp;!=&nbsp;size)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(elementData,&nbsp;r,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementData,&nbsp;w,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;-&nbsp;r);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w&nbsp;+=&nbsp;size&nbsp;-&nbsp;r;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(w&nbsp;!=&nbsp;size)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;清除多余的元素，clear&nbsp;to&nbsp;let&nbsp;GC&nbsp;do&nbsp;its&nbsp;work
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;w;&nbsp;i&nbsp;&lt;&nbsp;size;&nbsp;i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementData[i]&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modCount&nbsp;+=&nbsp;size&nbsp;-&nbsp;w;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;=&nbsp;w;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modified&nbsp;=&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;modified;
}

//清楚全部
public&nbsp;void&nbsp;clear()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;//并没有直接使数组指向&nbsp;null,而是逐个把元素置为空
&nbsp;&nbsp;&nbsp;&nbsp;//下次使用时就不用重新&nbsp;new&nbsp;了
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;size;&nbsp;i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementData[i]&nbsp;=&nbsp;null;

&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;=&nbsp;0;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>7.判断状态：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;boolean&nbsp;contains(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;indexOf(o)&nbsp;&gt;=&nbsp;0;
}

//遍历，第一次找到就返回
public&nbsp;int&nbsp;indexOf(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;size;&nbsp;i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(elementData[i]==null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;size;&nbsp;i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o.equals(elementData[i]))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;-1;
}

//倒着遍历
public&nbsp;int&nbsp;lastIndexOf(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;size-1;&nbsp;i&nbsp;&gt;=&nbsp;0;&nbsp;i--)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(elementData[i]==null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;size-1;&nbsp;i&nbsp;&gt;=&nbsp;0;&nbsp;i--)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o.equals(elementData[i]))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;-1;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>8.转换成 数组：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;Object[]&nbsp;toArray()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Arrays.copyOf(elementData,&nbsp;size);
}

public&nbsp;&lt;T&gt;&nbsp;T[]&nbsp;toArray(T[]&nbsp;a)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//如果只是要把一部分转换成数组
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(a.length&nbsp;&lt;&nbsp;size)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Make&nbsp;a&nbsp;new&nbsp;array&nbsp;of&nbsp;a&#39;s&nbsp;runtime&nbsp;type,&nbsp;but&nbsp;my&nbsp;contents:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(T[])&nbsp;Arrays.copyOf(elementData,&nbsp;size,&nbsp;a.getClass());
&nbsp;&nbsp;&nbsp;&nbsp;//全部元素拷贝到&nbsp;数组&nbsp;a
&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(elementData,&nbsp;0,&nbsp;a,&nbsp;0,&nbsp;size);
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(a.length&nbsp;&gt;&nbsp;size)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[size]&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;a;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">看下 Arrays.copyOf() 方法：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;static&nbsp;&lt;T,U&gt;&nbsp;T[]&nbsp;copyOf(U[]&nbsp;original,&nbsp;int&nbsp;newLength,&nbsp;Class&lt;?&nbsp;extends&nbsp;T[]&gt;&nbsp;newType)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;@SuppressWarnings(&quot;unchecked&quot;)
&nbsp;&nbsp;&nbsp;&nbsp;T[]&nbsp;copy&nbsp;=&nbsp;((Object)newType&nbsp;==&nbsp;(Object)Object[].class)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;?&nbsp;(T[])&nbsp;new&nbsp;Object[newLength]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;(T[])&nbsp;Array.newInstance(newType.getComponentType(),&nbsp;newLength);
&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(original,&nbsp;0,&nbsp;copy,&nbsp;0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Math.min(original.length,&nbsp;newLength));
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;copy;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">如果 newType 是一个对象对组，就直接把 original 的元素拷贝到 对象数组中；&nbsp;<br/>否则新建一个 newType 类型的数组。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>ArrayList 的内部实现</h2><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>1.迭代器 Iterator, ListIterator 没什么特别，直接使用角标访问数组的元素，:</h4><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">private&nbsp;class&nbsp;ListItr&nbsp;extends&nbsp;Itr&nbsp;implements&nbsp;ListIterator&lt;E&gt;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;ListItr(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor&nbsp;=&nbsp;index;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;hasPrevious()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cursor&nbsp;!=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;nextIndex()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cursor;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;previousIndex()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cursor&nbsp;-&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;@SuppressWarnings(&quot;unchecked&quot;)
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;E&nbsp;previous()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;cursor&nbsp;-&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(i&nbsp;&lt;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object[]&nbsp;elementData&nbsp;=&nbsp;ArrayList.this.elementData;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(i&nbsp;&gt;=&nbsp;elementData.length)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor&nbsp;=&nbsp;i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(E)&nbsp;elementData[lastRet&nbsp;=&nbsp;i];
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;set(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(lastRet&nbsp;&lt;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IllegalStateException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ArrayList.this.set(lastRet,&nbsp;e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IndexOutOfBoundsException&nbsp;ex)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;add(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;cursor;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ArrayList.this.add(i,&nbsp;e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor&nbsp;=&nbsp;i&nbsp;+&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastRet&nbsp;=&nbsp;-1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expectedModCount&nbsp;=&nbsp;modCount;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IndexOutOfBoundsException&nbsp;ex)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>在&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52834074\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Java 集合深入理解：AbstractList</a>&nbsp;中我们介绍了 RandomAccess，里面提到，支持 RandomAccess 的对象，遍历时使用 get 比 迭代器更快。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>由于 ArrayList 继承自 RandomAccess， 而且它的迭代器都是基于 ArrayList 的方法和数组直接操作，所以遍历时 get 的效率要 &gt;= 迭代器。</h4><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">int&nbsp;i=0,&nbsp;n=list.size();&nbsp;i&nbsp;&amp;lt;&nbsp;n;&nbsp;i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list.get(i);</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">比用迭代器更快：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">for&nbsp;(Iterator&nbsp;i=list.iterator();&nbsp;i.hasNext();&nbsp;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i.next();</pre><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">另外，由于 ArrayList 不是同步的，所以在并发访问时，如果在迭代的同时有其他线程修改了 ArrayList, fail-fast 的迭代器 Iterator/ListIterator 会报 ConcurrentModificationException 错。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>因此我们在并发环境下需要外部给 ArrayList 加个同步锁，或者直接在初始化时用 Collections.synchronizedList 方法进行包装：</h4><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">List&nbsp;list&nbsp;=&nbsp;Collections.synchronizedList(new&nbsp;ArrayList(...));</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Thanks</h2><p><br/></p>','0','2016-11-20 09:55:22') [ RunTime:0.1261s ]

[ 2016-11-20T21:55:23+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000771s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001239s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0054s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0023s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0002s ]

[ 2016-11-20T21:55:34+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000764s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001201s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0041s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T21:55:49+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000623s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001025s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0039s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0038s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0035s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 50  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('Java 集合深入理解（8）：AbstractSequentialList','87','50','<h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\">什么是 AbstractSequentialList</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">（ Sequential 相继的，按次序的）</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">AbstractSequentialList 继承自&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52834074\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">AbstractList</a>，是&nbsp;<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; padding: 2px 4px; font-size: 12.6px; color: rgb(63, 63, 63); background-color: rgba(128, 128, 128, 0.0745098); white-space: nowrap; border-radius: 0px;\">LinkedList</code>&nbsp;的父类，是&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52802849\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">List 接口</a>&nbsp;的简化版实现。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">简化在哪儿呢？简化在 AbstractSequentialList&nbsp;<strong style=\"box-sizing: border-box;\">只支持按次序访问</strong>，而不像&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52834074\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">AbstractList</a>&nbsp;那样支持随机访问。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">想要实现一个支持按次序访问的 List的话，只需要继承这个抽象类，然后把指定的抽象方法实现就好了。需要实现的方法：</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>size()</p></li><li><p>listIterator()，返回一个 ListIterator</p></li></ul><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">你需要实现一个&nbsp;<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; padding: 2px 4px; font-size: 12.6px; color: rgb(63, 63, 63); background-color: rgba(128, 128, 128, 0.0745098); white-space: nowrap; border-radius: 0px;\">ListIterator</code>, 实现它的&nbsp;<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; padding: 2px 4px; font-size: 12.6px; color: rgb(63, 63, 63); background-color: rgba(128, 128, 128, 0.0745098); white-space: nowrap; border-radius: 0px;\">hasNext()</code>,&nbsp;<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; padding: 2px 4px; font-size: 12.6px; color: rgb(63, 63, 63); background-color: rgba(128, 128, 128, 0.0745098); white-space: nowrap; border-radius: 0px;\">hasPrevious()</code>,&nbsp;<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; padding: 2px 4px; font-size: 12.6px; color: rgb(63, 63, 63); background-color: rgba(128, 128, 128, 0.0745098); white-space: nowrap; border-radius: 0px;\">next()</code>,&nbsp;<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; padding: 2px 4px; font-size: 12.6px; color: rgb(63, 63, 63); background-color: rgba(128, 128, 128, 0.0745098); white-space: nowrap; border-radius: 0px;\">previous()</code>, 还有那几个&nbsp;<strong style=\"box-sizing: border-box;\">获取位置</strong>&nbsp;的方法，这样你就得到一个不可变的 ListIterator 了。如果你想让它可修改，还需要实现&nbsp;<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; padding: 2px 4px; font-size: 12.6px; color: rgb(63, 63, 63); background-color: rgba(128, 128, 128, 0.0745098); white-space: nowrap; border-radius: 0px;\">add()</code>,&nbsp;<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; padding: 2px 4px; font-size: 12.6px; color: rgb(63, 63, 63); background-color: rgba(128, 128, 128, 0.0745098); white-space: nowrap; border-radius: 0px;\">remove()</code>,&nbsp;<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; padding: 2px 4px; font-size: 12.6px; color: rgb(63, 63, 63); background-color: rgba(128, 128, 128, 0.0745098); white-space: nowrap; border-radius: 0px;\">set()</code>&nbsp;方法。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">正如在 每个&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52773577\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Collection 接口</a>&nbsp;中提倡的那样，AbstractSequentialList 的子类需要提供两个构造函数，一个无参，一个以 Collection 为参数。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>成员函数</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">AbstractSequentialList 在 AbstractList 的基础上实现了以下方法：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161018235652391\" alt=\"这里写图片描述\" title=\"\"/></p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>1.获取迭代器：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;Iterator&lt;E&gt;&nbsp;iterator()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//调用继承自
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;listIterator();
}

//继承&nbsp;AbstractList&nbsp;的&nbsp;listIterator()
public&nbsp;ListIterator&lt;E&gt;&nbsp;listIterator()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;listIterator(0);
}

//需要实现类实现的方法
public&nbsp;abstract&nbsp;ListIterator&lt;E&gt;&nbsp;listIterator(int&nbsp;index);</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>2.add(int, E) 添加元素到指定位置，将当前处于该位置（如果有的话）和任何后续元素的元素移到右边（添加一个到它们的索引）：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;void&nbsp;add(int&nbsp;index,&nbsp;E&nbsp;element)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//调用&nbsp;ListIterator.add()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listIterator(index).add(element);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(NoSuchElementException&nbsp;exc)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IndexOutOfBoundsException(&quot;Index:&nbsp;&quot;+index);
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>如果 Listerator 的实现类实现 add() 方法，会报&nbsp;<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; padding: 2px 4px; font-size: 12.6px; color: rgb(63, 63, 63); background-color: rgba(128, 128, 128, 0.0745098); white-space: nowrap; border-radius: 0px;\">UnsupportedOperationException</code>&nbsp;错。</h4><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>3.addAll(int index, Collection</h3><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>用获取到的 listIterator 逐个添加集合中的元素,这就要考验 ListIterator.add 方法的实现效率了，总不能每次都后移一位吧</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">的确在目前集合框架中 AbstractSequentialList 的唯一实现类 LinkedList 实现的 ListIterator 中，由于 LinkedList 的双休链表特性，每次 add 只需要调整指针指向就可以了。</h4><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>4.get(int index) 获取指定位置的元素：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;E&nbsp;get(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;listIterator(index).next();
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(NoSuchElementException&nbsp;exc)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IndexOutOfBoundsException(&quot;Index:&nbsp;&quot;+index);
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>5.set(int index, E element) 修改指定位置的元素为新的：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;E&nbsp;set(int&nbsp;index,&nbsp;E&nbsp;element)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListIterator&lt;E&gt;&nbsp;e&nbsp;=&nbsp;listIterator(index);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;oldVal&nbsp;=&nbsp;e.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.set(element);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;oldVal;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(NoSuchElementException&nbsp;exc)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IndexOutOfBoundsException(&quot;Index:&nbsp;&quot;+index);
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>6.remove(int index) 删除指定位置的元素：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;E&nbsp;remove(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListIterator&lt;E&gt;&nbsp;e&nbsp;=&nbsp;listIterator(index);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;outCast&nbsp;=&nbsp;e.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.remove();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;outCast;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(NoSuchElementException&nbsp;exc)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IndexOutOfBoundsException(&quot;Index:&nbsp;&quot;+index);
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>总结</h2><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>可以看到， AbstractSequentialList 把父类&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52834074\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">AbstractList</a>&nbsp;中没有实现或者没有支持的操作都实现了，而且都是<strong style=\"box-sizing: border-box;\">调用的&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52834074\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">ListIterator</a>&nbsp;相关方法</strong>进行操作。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>在&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52834074\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Java 集合深入理解：AbstractList</a>&nbsp;中我们介绍了 RandomAccess，里面提到，支持 RandomAccess 的对象，遍历时使用 get 比 迭代器更快。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">而 AbstractSequentialList 只支持迭代器按顺序 访问，不支持 RandomAccess，所以遍历 AbstractSequentialList 的子类，使用 for 循环 get() 的效率要 &lt;= 迭代器遍历：</h4><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">int&nbsp;i=0,&nbsp;n=list.size();&nbsp;i&nbsp;&amp;lt;&nbsp;n;&nbsp;i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list.get(i);</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">get()太慢，还不如用迭代器：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">for&nbsp;(Iterator&nbsp;i=list.iterator();&nbsp;i.hasNext();&nbsp;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i.next();</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Thanks</h2><p><br/></p>','0','2016-11-20 09:55:49') [ RunTime:0.0955s ]

[ 2016-11-20T21:55:50+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001137s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001834s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0070s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0011s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0004s ]

[ 2016-11-20T21:56:07+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000691s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001056s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0040s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T21:56:21+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000359s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000734s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0039s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0045s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0037s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 50  [ RunTime:0.0002s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('Java 集合深入理解（9）：Queue 队列','87','50','<h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\">什么是队列</h2><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>队列是数据结构中比较重要的一种类型，它支持 FIFO，尾部添加、头部删除（先进队列的元素先出队列），跟我们生活中的排队类似。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>队列有两种：</h4><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>单队列</p></li><li><p>循环队列</p></li></ul><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>单队列就是常见的队列, 每次添加元素时，都是添加到队尾：</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">以数组实现的队列为例，初始时队列长度固定为 4，font 和 rear 均为 0：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161019143750127\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">每添加一个元素，rear 后移一位。当添加四个元素后， rear 到了索引为 4 的位置：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161019144154538\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">这时 a1,a2 出队，front 后移动到 2：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161019144302583\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">这时想要再添加两个元素，但 rear 后移两位后就会越界：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161019144441240\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">明明有三个空位，却只能再放入一个！这就是单队列的“<strong style=\"box-sizing: border-box;\">假溢出</strong>”情况。</p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>（上述参考借鉴自&nbsp;<a href=\"http://www.nowamagic.net/librarys/veda/detail/2350\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">http://www.nowamagic.net/librarys/veda/detail/2350</a>）</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">针对这种情况，解决办法就是后面满了，就再从头开始，也就是头尾相接的循环。这就是&nbsp;<strong style=\"box-sizing: border-box;\">“循环队列”</strong>&nbsp;的概念。</p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>循环队列:</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">循环队列中，&nbsp;<br/>rear = (rear - size) % size</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">接着上面的例子，当 rear 大于 队列长度时，rear = ( 5 - 5) % 5 = 0 :</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161019152522910\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">这样继续添加时，还可以添加几个元素：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161019152853540\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">那如何判断队列是否装满元素了呢，单使用 front == rear 无法判断究竟是空的还是满了。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">两种方法：</p><ol style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>加个标志 flag ,初始为 false，添加满了置为 true；</p></li><li><p>不以 front = rear 为放满标志，改为 (rear - front) % size = 1。</p></li></ol><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">法 2 的公式放满元素时<strong style=\"box-sizing: border-box;\">空余了一个位置</strong>，这个公式是什么意思呢？</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161019163758572\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">接着上面的情况，当 rear 从后面添加元素跑到前面 0 时，再添加一个元素 a6，rear 后移一位到 1，这时 front = 2, (1 - 2) % 5 = 1, 满足放满条件。</p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>因此，当 rear &gt; font 时，队列中元素个数 = rear - font;</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>当 rear &lt; font 时，队列中元素分为两部分： size - font 和 rear ,也就是 rear + size - font。以上述图片为例，队列中元素个数 = 1 + 5 - 2 = 4.</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161019142319417\" alt=\"这里写图片描述\" title=\"\"/></p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>接着我们介绍 Java 集合框架中的队列 Queue</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161019004310645\" alt=\"这里写图片描述\" title=\"\"/></p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Java 集合中的 Queue 继承自&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52773577\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Collection 接口</a>&nbsp;，Deque, LinkedList, PriorityQueue, BlockingQueue 等类都实现了它。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Queue 用来存放 等待处理元素 的集合，这种场景一般用于缓冲、并发访问。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>除了继承 Collection 接口的一些方法，Queue 还添加了额外的 添加、删除、查询操作。</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161019004500256\" alt=\"这里写图片描述\" title=\"\"/></p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>添加、删除、查询这些个操作都提供了两种形式，其中一种在操作失败时直接抛出异常，而另一种则返回一个特殊的值：</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161019111111582\" alt=\"这里写图片描述\" title=\"\"/></p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Queue 方法介绍：</h2><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>1.add(E), offer(E) 在尾部添加:</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">boolean&nbsp;add(E&nbsp;e);

boolean&nbsp;offer(E&nbsp;e);</pre><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>他们的共同之处是不允许添加 null 元素，否则会报空指针 NullPointerException；</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>不同之处在于 add() 方法在添加失败（比如队列已满）时会报 一些运行时错误 错；而 offer() 方法即使在添加失败时也不会奔溃，只会返回 false。</h4><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>2.remove(), poll() 删除并返回头部：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">E&nbsp;remove();

E&nbsp;poll();</pre><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>当队列为空时 remove() 方法会报 NoSuchElementException 错; 而 poll() 不会奔溃，只会返回 null。</h4><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>3.element(), peek() 获取但不删除：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">E&nbsp;element();

E&nbsp;peek();</pre><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>当队列为空时 element() 抛出异常；peek() 不会奔溃，只会返回 null。</h4><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>其他</h2><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">1.虽然 LinkedList 没有禁止添加 null，但是一般情况下 Queue 的实现类都不允许添加 null 元素，为啥呢？因为 poll(), peek() 方法在异常的时候会返回 null，你添加了 null　以后，当获取时不好分辨究竟是否正确返回。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>2.Queue 一般都是 FIFO 的，但是也有例外，比如优先队列 priority queue（它的顺序是根据自然排序或者自定义 comparator 的）；再比如 LIFO 的队列（跟栈一样，后来进去的先出去）。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>不论进入、出去的先后顺序是怎样的，使用 remove()，poll() 方法操作的都是 头部 的元素；而插入的位置则不一定是在队尾了，不同的 queue 会有不同的插入逻辑。</h4><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Thanks</h2><p><br/></p>','0','2016-11-20 09:56:20') [ RunTime:0.1085s ]

[ 2016-11-20T21:56:22+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000895s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001747s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0072s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0013s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0006s ]

[ 2016-11-20T21:56:32+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000781s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001218s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0035s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T21:56:42+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000362s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000806s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0040s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0038s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0040s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 50  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('Java 集合深入理解（10）：Deque 双端队列','87','50','<h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\">什么是 Deque</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161019171159193\" alt=\"这里写图片描述\" title=\"\"/></p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a><em style=\"box-sizing: border-box;\">Deque</em>&nbsp;是&nbsp;<em style=\"box-sizing: border-box;\">Double ended queue (双端队列)</em>&nbsp;的缩写,读音和 deck 一样，蛋壳。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Deque 继承自&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52860924\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Queue</a>,直接实现了它的有 LinkedList, ArayDeque, ConcurrentLinkedDeque 等。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Deque 支持容量受限的双端队列，也支持大小不固定的。一般双端队列大小不确定。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Deque 接口定义了一些从头部和尾部访问元素的方法。比如分别在头部、尾部进行插入、删除、获取元素。和&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52860924\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Queue</a></h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">类似，每个操作都有两种方法，一种在异常情况下直接抛出异常奔溃，另一种则不会抛异常，而是返回特殊的值，比如 false, null …</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161019193301571\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">插入（Insert）方法的第二种是针对固定大小的双端队列设计的。大多数情况下 插入都不会失败。</p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Deque 继承了 Queue 接口的方法。当 Deque 当做 队列使用时（FIFO），添加元素是添加到队尾，删除时删除的是头部元素。从 Queue 接口继承的方法对应容器的方法如图所示：</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161019194500774\" alt=\"这里写图片描述\" title=\"\"/></p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Deque 也能当栈用（后进先出）。这时入栈、出栈元素都是在 双端队列的头部 进行。Deque 中和栈对应的方法如图所示：</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161019232902599\" alt=\"这里写图片描述\" title=\"\"/></p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Deque 包含的方法如下图所示：</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161019192113886\" alt=\"这里写图片描述\" title=\"\"/></p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>根据名字就能看到功能，具体实现我们下篇看 LinkedList 源码时介绍。</h4><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Deque 的实现类</h2><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Deque 的实现类主要分为两种场景：</h3><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>一般场景&nbsp;<br/></p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p>LinkedList 大小可变的<strong style=\"box-sizing: border-box;\">链表</strong>双端队列，允许元素为 null</p></li><li><p>ArrayDeque 大下可变的<strong style=\"box-sizing: border-box;\">数组</strong>双端队列，不允许 null</p></li></ul><li><p>并发场景&nbsp;<br/></p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p>LinkedBlockingDeque 如果队列为空时，获取操作将会阻塞，知道有元素添加</p></li></ul></ul><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Deque 与 工作密取</h2><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>在并发编程 中，双端队列 Deque 还用于 “工作密取” 模式。</h4><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>什么是工作密取呢？</h3><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>在 生产者-消费者 模式中，所有消费者都从一个工作队列中取元素，一般使用阻塞队列实现；</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>而在 工作密取 模式中，每个消费者有其单独的工作队列，如果它完成了自己双端队列中的全部工作，那么它就可以从其他消费者的双端<strong style=\"box-sizing: border-box;\">队列末尾</strong>秘密地获取工作。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">工作密取 模式 对比传统的 生产者-消费者 模式，更为灵活，因为多个线程不会因为在同一个工作队列中抢占内容发生竞争。在大多数时候，它们只是访问自己的双端队列。即使需要访问另一个队列时，也是从 队列的尾部获取工作，降低了队列上的竞争程度。</h4><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Thanks</h2><p><br/></p>','0','2016-11-20 09:56:42') [ RunTime:0.1144s ]

[ 2016-11-20T21:56:43+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000876s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001965s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0068s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0015s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0006s ]

[ 2016-11-20T21:56:58+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000443s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000900s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0041s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T21:57:18+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000695s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001089s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0036s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0041s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0040s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 50  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('Java 集合深入理解（11）：LinkedList','87','50','<h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">日常开发中，保存一组数据使用的最多的就是&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52853989\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">ArrayList</a>， 其次就是 LinkedList 了。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>我们知道 ArrayList 是以数组实现的，遍历时很快，但是插入、删除时都需要移动后面的元素，效率略差些。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>而LinkedList 是以链表实现的，插入、删除时只需要改变前后两个节点指针指向即可，省事不少。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>今天来看下 LinkedList 源码。</h4><h1 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>#</h1><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>LinkedList 继承结构</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161020000003925\" alt=\"这里写图片描述\" title=\"\"/></p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>LinkedList 继承自&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52854681\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">AbstractSequentialList 接口</a>，同时了还实现了&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52865173\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Deque</a>,&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52860924\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Queue</a>&nbsp;接口。</h4><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>LinkedList 双向链表实现</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161020160301181\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">可以看到， LinkedList 的成员变量只有三个：</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>头节点 first</p></li><li><p>尾节点 last</p></li><li><p>容量 size</p></li></ul><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">节点是一个双向节点：&nbsp;<br/><img src=\"http://img.blog.csdn.net/20161020160716308\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">用一副图表示节点：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161020161332351\" alt=\"这里写图片描述\" title=\"\"/></p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>LinkedList 的方法</h2><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>1.关键的几个内部方法（头部添加删除，尾部添加删除，获取指定节点，指定节点的添加删除）</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">//插入到头部
private&nbsp;void&nbsp;linkFirst(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//获取头节点
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&lt;E&gt;&nbsp;f&nbsp;=&nbsp;first;
&nbsp;&nbsp;&nbsp;&nbsp;//新建一个节点，尾部指向之前的&nbsp;头元素&nbsp;first
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&lt;E&gt;&nbsp;newNode&nbsp;=&nbsp;new&nbsp;Node&lt;&gt;(null,&nbsp;e,&nbsp;f);
&nbsp;&nbsp;&nbsp;&nbsp;//first&nbsp;指向新建的节点
&nbsp;&nbsp;&nbsp;&nbsp;first&nbsp;=&nbsp;newNode;
&nbsp;&nbsp;&nbsp;&nbsp;//如果之前是空链表，新建的节点&nbsp;也是最后一个节点
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(f&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last&nbsp;=&nbsp;newNode;
&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//原来的第一个节点（现在的第二个）头部指向新建的头结点
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.prev&nbsp;=&nbsp;newNode;
&nbsp;&nbsp;&nbsp;&nbsp;size++;
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
}

//插入到尾部
void&nbsp;linkLast(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//获取尾部节点
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&lt;E&gt;&nbsp;l&nbsp;=&nbsp;last;
&nbsp;&nbsp;&nbsp;&nbsp;//新建一个节点，头部指向之前的&nbsp;尾节点&nbsp;last
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&lt;E&gt;&nbsp;newNode&nbsp;=&nbsp;new&nbsp;Node&lt;&gt;(l,&nbsp;e,&nbsp;null);
&nbsp;&nbsp;&nbsp;&nbsp;//last&nbsp;指向新建的节点
&nbsp;&nbsp;&nbsp;&nbsp;last&nbsp;=&nbsp;newNode;
&nbsp;&nbsp;&nbsp;&nbsp;//如果之前是空链表，&nbsp;新建的节点也是第一个节点
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(l&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;first&nbsp;=&nbsp;newNode;
&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//原来的尾节点尾部指向新建的尾节点
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l.next&nbsp;=&nbsp;newNode;
&nbsp;&nbsp;&nbsp;&nbsp;size++;
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
}

//在&nbsp;指定节点&nbsp;前插入一个元素，这里假设&nbsp;指定节点不为&nbsp;null
void&nbsp;linkBefore(E&nbsp;e,&nbsp;Node&lt;E&gt;&nbsp;succ)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;获取指定节点&nbsp;succ&nbsp;前面的一个节点
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&lt;E&gt;&nbsp;pred&nbsp;=&nbsp;succ.prev;
&nbsp;&nbsp;&nbsp;&nbsp;//新建一个节点，头部指向&nbsp;succ&nbsp;前面的节点，尾部指向&nbsp;succ&nbsp;节点，数据为&nbsp;e
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&lt;E&gt;&nbsp;newNode&nbsp;=&nbsp;new&nbsp;Node&lt;&gt;(pred,&nbsp;e,&nbsp;succ);
&nbsp;&nbsp;&nbsp;&nbsp;//让&nbsp;succ&nbsp;节点头部指向&nbsp;新建的节点
&nbsp;&nbsp;&nbsp;&nbsp;succ.prev&nbsp;=&nbsp;newNode;
&nbsp;&nbsp;&nbsp;&nbsp;//如果&nbsp;succ&nbsp;前面的节点为空，说明&nbsp;succ&nbsp;就是第一个节点，那现在新建的节点就变成第一个节点了
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(pred&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;first&nbsp;=&nbsp;newNode;
&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//如果前面有节点，让前面的节点
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred.next&nbsp;=&nbsp;newNode;
&nbsp;&nbsp;&nbsp;&nbsp;size++;
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
}

//删除头节点并返回该节点上的数据，假设不为&nbsp;null
private&nbsp;E&nbsp;unlinkFirst(Node&lt;E&gt;&nbsp;f)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;获取数据，一会儿返回
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;E&nbsp;element&nbsp;=&nbsp;f.item;
&nbsp;&nbsp;&nbsp;&nbsp;//获取头节点后面一个节点
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&lt;E&gt;&nbsp;next&nbsp;=&nbsp;f.next;
&nbsp;&nbsp;&nbsp;&nbsp;//使头节点上数据为空，尾部指向空
&nbsp;&nbsp;&nbsp;&nbsp;f.item&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;f.next&nbsp;=&nbsp;null;&nbsp;//&nbsp;help&nbsp;GC
&nbsp;&nbsp;&nbsp;&nbsp;//现在头节点后边的节点变成第一个了
&nbsp;&nbsp;&nbsp;&nbsp;first&nbsp;=&nbsp;next;
&nbsp;&nbsp;&nbsp;&nbsp;//如果头节点后面的节点为&nbsp;null，说明移除这个节点后，链表里没节点了
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(next&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next.prev&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;size--;
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;element;
}

//删除尾部节点并返回，假设不为空
private&nbsp;E&nbsp;unlinkLast(Node&lt;E&gt;&nbsp;l)&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;E&nbsp;element&nbsp;=&nbsp;l.item;
&nbsp;&nbsp;&nbsp;&nbsp;//获取倒数第二个节点
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&lt;E&gt;&nbsp;prev&nbsp;=&nbsp;l.prev;
&nbsp;&nbsp;&nbsp;&nbsp;//尾节点数据、尾指针置为空
&nbsp;&nbsp;&nbsp;&nbsp;l.item&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;l.prev&nbsp;=&nbsp;null;&nbsp;//&nbsp;help&nbsp;GC
&nbsp;&nbsp;&nbsp;&nbsp;//现在倒数第二变成倒数第一了
&nbsp;&nbsp;&nbsp;&nbsp;last&nbsp;=&nbsp;prev;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(prev&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;first&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prev.next&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;size--;
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;element;
}

//删除某个指定节点
E&nbsp;unlink(Node&lt;E&gt;&nbsp;x)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;假设&nbsp;x&nbsp;不为空
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;E&nbsp;element&nbsp;=&nbsp;x.item;
&nbsp;&nbsp;&nbsp;&nbsp;//获取指定节点前面、后面的节点
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&lt;E&gt;&nbsp;next&nbsp;=&nbsp;x.next;
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&lt;E&gt;&nbsp;prev&nbsp;=&nbsp;x.prev;

&nbsp;&nbsp;&nbsp;&nbsp;//如果前面没有节点，说明&nbsp;x&nbsp;是第一个
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(prev&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;first&nbsp;=&nbsp;next;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//前面有节点，让前面节点跨过&nbsp;x&nbsp;直接指向&nbsp;x&nbsp;后面的节点
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prev.next&nbsp;=&nbsp;next;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x.prev&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//如果后面没有节点，说&nbsp;x&nbsp;是最后一个节点
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(next&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last&nbsp;=&nbsp;prev;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//后面有节点，让后面的节点指向&nbsp;x&nbsp;前面的
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next.prev&nbsp;=&nbsp;prev;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x.next&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;x.item&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;size--;
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;element;
}

//获取指定位置的节点
Node&lt;E&gt;&nbsp;node(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;假设指定位置有元素

&nbsp;&nbsp;&nbsp;&nbsp;//二分一下，如果小于&nbsp;size&nbsp;的一半，从头开始遍历
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(index&nbsp;&lt;&nbsp;(size&nbsp;&gt;&gt;&nbsp;1))&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;x&nbsp;=&nbsp;first;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;index;&nbsp;i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;x.next;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//大于&nbsp;size&nbsp;一半，从尾部倒着遍历
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;x&nbsp;=&nbsp;last;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;size&nbsp;-&nbsp;1;&nbsp;i&nbsp;&gt;&nbsp;index;&nbsp;i--)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;x.prev;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x;
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">这些内部方法实现了对 链表节点的 基本修改操作，每次操作都只要修改前后节点的指针，时间复杂度为 O(1)。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">很多公开方法都是通过调用它们实现的。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>2.公开的添加方法：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">//普通的在尾部添加元素
public&nbsp;boolean&nbsp;add(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;linkLast(e);
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
}

//在指定位置添加元素
public&nbsp;void&nbsp;add(int&nbsp;index,&nbsp;E&nbsp;element)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;checkPositionIndex(index);
&nbsp;&nbsp;&nbsp;&nbsp;//指定位置也有可能是在尾部
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(index&nbsp;==&nbsp;size)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linkLast(element);
&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linkBefore(element,&nbsp;node(index));
}

//添加一个集合的元素
public&nbsp;boolean&nbsp;addAll(Collection&lt;?&nbsp;extends&nbsp;E&gt;&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;addAll(size,&nbsp;c);
}

public&nbsp;boolean&nbsp;addAll(int&nbsp;index,&nbsp;Collection&lt;?&nbsp;extends&nbsp;E&gt;&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;checkPositionIndex(index);

&nbsp;&nbsp;&nbsp;&nbsp;//把&nbsp;要添加的集合转成一个&nbsp;数组
&nbsp;&nbsp;&nbsp;&nbsp;Object[]&nbsp;a&nbsp;=&nbsp;c.toArray();
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;numNew&nbsp;=&nbsp;a.length;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(numNew&nbsp;==&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;

&nbsp;&nbsp;&nbsp;&nbsp;//创建两个节点，分别指向要插入位置前面和后面的节点
&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;pred,&nbsp;succ;
&nbsp;&nbsp;&nbsp;&nbsp;//要添加到尾部
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(index&nbsp;==&nbsp;size)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;succ&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred&nbsp;=&nbsp;last;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//要添加到中间，&nbsp;succ&nbsp;指向&nbsp;index&nbsp;位置的节点，pred&nbsp;指向它前一个
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;succ&nbsp;=&nbsp;node(index);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred&nbsp;=&nbsp;succ.prev;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//遍历要添加内容的数组
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Object&nbsp;o&nbsp;:&nbsp;a)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@SuppressWarnings(&quot;unchecked&quot;)&nbsp;E&nbsp;e&nbsp;=&nbsp;(E)&nbsp;o;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//创建新节点，头指针指向&nbsp;pred
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;newNode&nbsp;=&nbsp;new&nbsp;Node&lt;&gt;(pred,&nbsp;e,&nbsp;null);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//如果&nbsp;pred&nbsp;为空，说明新建的这个是头节点
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(pred&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;first&nbsp;=&nbsp;newNode;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//pred&nbsp;指向新建的节点
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred.next&nbsp;=&nbsp;newNode;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//pred&nbsp;后移一位
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred&nbsp;=&nbsp;newNode;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//添加完后需要修改尾指针&nbsp;last
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(succ&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//如果&nbsp;succ&nbsp;为空，说明要插入的位置就是尾部，现在&nbsp;pred&nbsp;已经到最后了
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last&nbsp;=&nbsp;pred;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//否则&nbsp;pred&nbsp;指向后面的元素
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred.next&nbsp;=&nbsp;succ;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;succ.prev&nbsp;=&nbsp;pred;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//元素个数增加
&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;+=&nbsp;numNew;
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
}

//添加到头部，时间复杂度为&nbsp;O(1)
public&nbsp;void&nbsp;addFirst(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;linkFirst(e);
}

//添加到尾部，时间复杂度为&nbsp;O(1)
public&nbsp;void&nbsp;addLast(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;linkLast(e);
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">继承自双端队列的添加方法：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">//入栈，其实就是在头部添加元素
public&nbsp;void&nbsp;push(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;addFirst(e);
}

//安全的添加操作，在尾部添加
public&nbsp;boolean&nbsp;offer(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;add(e);
}

//在头部添加
public&nbsp;boolean&nbsp;offerFirst(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;addFirst(e);
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
}

//尾部添加
public&nbsp;boolean&nbsp;offerLast(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;addLast(e);
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>3.删除方法：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">//删除头部节点
public&nbsp;E&nbsp;remove()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;removeFirst();
}

//删除指定位置节点
public&nbsp;E&nbsp;remove(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;checkElementIndex(index);
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;unlink(node(index));
}

//删除包含指定元素的节点，这就得遍历了
public&nbsp;boolean&nbsp;remove(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//遍历终止条件，不等于&nbsp;null
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Node&lt;E&gt;&nbsp;x&nbsp;=&nbsp;first;&nbsp;x&nbsp;!=&nbsp;null;&nbsp;x&nbsp;=&nbsp;x.next)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(x.item&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unlink(x);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Node&lt;E&gt;&nbsp;x&nbsp;=&nbsp;first;&nbsp;x&nbsp;!=&nbsp;null;&nbsp;x&nbsp;=&nbsp;x.next)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o.equals(x.item))&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unlink(x);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
}

//删除头部元素
public&nbsp;E&nbsp;removeFirst()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&lt;E&gt;&nbsp;f&nbsp;=&nbsp;first;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(f&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException();
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;unlinkFirst(f);
}

//删除尾部元素
public&nbsp;E&nbsp;removeLast()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&lt;E&gt;&nbsp;l&nbsp;=&nbsp;last;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(l&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException();
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;unlinkLast(l);
}

//删除首次出现的指定元素，从头遍历
public&nbsp;boolean&nbsp;removeFirstOccurrence(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;remove(o);
}

//删除最后一次出现的指定元素，倒过来遍历
public&nbsp;boolean&nbsp;removeLastOccurrence(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Node&lt;E&gt;&nbsp;x&nbsp;=&nbsp;last;&nbsp;x&nbsp;!=&nbsp;null;&nbsp;x&nbsp;=&nbsp;x.prev)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(x.item&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unlink(x);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Node&lt;E&gt;&nbsp;x&nbsp;=&nbsp;last;&nbsp;x&nbsp;!=&nbsp;null;&nbsp;x&nbsp;=&nbsp;x.prev)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o.equals(x.item))&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unlink(x);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">继承自双端队列的删除方法：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;E&nbsp;pop()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;removeFirst();
}

public&nbsp;E&nbsp;pollFirst()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&lt;E&gt;&nbsp;f&nbsp;=&nbsp;first;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(f&nbsp;==&nbsp;null)&nbsp;?&nbsp;null&nbsp;:&nbsp;unlinkFirst(f);
}

public&nbsp;E&nbsp;pollLast()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&lt;E&gt;&nbsp;l&nbsp;=&nbsp;last;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(l&nbsp;==&nbsp;null)&nbsp;?&nbsp;null&nbsp;:&nbsp;unlinkLast(l);
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">清除全部元素其实只需要把首尾都置为 null, 这个链表就已经是空的，因为无法访问元素。&nbsp;<br/>但是为了避免浪费空间，需要把中间节点都置为 null：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;void&nbsp;clear()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Node&lt;E&gt;&nbsp;x&nbsp;=&nbsp;first;&nbsp;x&nbsp;!=&nbsp;null;&nbsp;)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;next&nbsp;=&nbsp;x.next;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x.item&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x.next&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x.prev&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;next;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;first&nbsp;=&nbsp;last&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>3.公开的修改方法，只有一个 set :</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">//set&nbsp;很简单，找到这个节点，替换数据就好了
public&nbsp;E&nbsp;set(int&nbsp;index,&nbsp;E&nbsp;element)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;checkElementIndex(index);
&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;x&nbsp;=&nbsp;node(index);
&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;oldVal&nbsp;=&nbsp;x.item;
&nbsp;&nbsp;&nbsp;&nbsp;x.item&nbsp;=&nbsp;element;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;oldVal;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>4.公开的查询方法：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">//挨个遍历，获取第一次出现位置
public&nbsp;int&nbsp;indexOf(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;index&nbsp;=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Node&lt;E&gt;&nbsp;x&nbsp;=&nbsp;first;&nbsp;x&nbsp;!=&nbsp;null;&nbsp;x&nbsp;=&nbsp;x.next)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(x.item&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;index;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index++;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Node&lt;E&gt;&nbsp;x&nbsp;=&nbsp;first;&nbsp;x&nbsp;!=&nbsp;null;&nbsp;x&nbsp;=&nbsp;x.next)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o.equals(x.item))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;index;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index++;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;-1;
}

//倒着遍历，查询最后一次出现的位置
public&nbsp;int&nbsp;lastIndexOf(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;index&nbsp;=&nbsp;size;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Node&lt;E&gt;&nbsp;x&nbsp;=&nbsp;last;&nbsp;x&nbsp;!=&nbsp;null;&nbsp;x&nbsp;=&nbsp;x.prev)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index--;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(x.item&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;index;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Node&lt;E&gt;&nbsp;x&nbsp;=&nbsp;last;&nbsp;x&nbsp;!=&nbsp;null;&nbsp;x&nbsp;=&nbsp;x.prev)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index--;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o.equals(x.item))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;index;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;-1;
}

//是否包含指定元素
public&nbsp;boolean&nbsp;contains(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;indexOf(o)&nbsp;!=&nbsp;-1;
}

//获取指定位置的元素，需要遍历
public&nbsp;E&nbsp;get(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;checkElementIndex(index);
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;node(index).item;
}

//获取第一个元素，很快
public&nbsp;E&nbsp;getFirst()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&lt;E&gt;&nbsp;f&nbsp;=&nbsp;first;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(f&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException();
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;f.item;
}

//获取第一个，同时删除它
public&nbsp;E&nbsp;poll()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&lt;E&gt;&nbsp;f&nbsp;=&nbsp;first;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(f&nbsp;==&nbsp;null)&nbsp;?&nbsp;null&nbsp;:&nbsp;unlinkFirst(f);
}

//也是获取第一个，和&nbsp;poll&nbsp;不同的是不删除
public&nbsp;E&nbsp;peek()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&lt;E&gt;&nbsp;f&nbsp;=&nbsp;first;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(f&nbsp;==&nbsp;null)&nbsp;?&nbsp;null&nbsp;:&nbsp;f.item;
}

//长得一样嘛
public&nbsp;E&nbsp;peekFirst()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&lt;E&gt;&nbsp;f&nbsp;=&nbsp;first;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(f&nbsp;==&nbsp;null)&nbsp;?&nbsp;null&nbsp;:&nbsp;f.item;
&nbsp;}

//最后一个元素，也很快
public&nbsp;E&nbsp;getLast()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&lt;E&gt;&nbsp;l&nbsp;=&nbsp;last;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(l&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException();
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;l.item;
}

public&nbsp;E&nbsp;peekLast()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&lt;E&gt;&nbsp;l&nbsp;=&nbsp;last;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(l&nbsp;==&nbsp;null)&nbsp;?&nbsp;null&nbsp;:&nbsp;l.item;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>关键方法介绍完了，接下来是内部实现的迭代器，需要注意的是 LinkedList 实现了一个倒序迭代器 DescendingIterator；还实现了一个 ListIterator ，名叫 ListItr</h3><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>迭代器</h2><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>1.DescendingIterator 倒序迭代器</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">//很简单，就是游标直接在&nbsp;迭代器尾部，然后颠倒黑白，说是向后遍历，实际是向前遍历
private&nbsp;class&nbsp;DescendingIterator&nbsp;implements&nbsp;Iterator&lt;E&gt;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;final&nbsp;ListItr&nbsp;itr&nbsp;=&nbsp;new&nbsp;ListItr(size());
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;hasNext()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;itr.hasPrevious();
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;E&nbsp;next()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;itr.previous();
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;remove()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;itr.remove();
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>2. ListItr 操作基本都是调用的内部关键方法，没什么特别的</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">private&nbsp;class&nbsp;ListItr&nbsp;implements&nbsp;ListIterator&lt;E&gt;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Node&lt;E&gt;&nbsp;lastReturned;
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Node&lt;E&gt;&nbsp;next;
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;int&nbsp;nextIndex;
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;int&nbsp;expectedModCount&nbsp;=&nbsp;modCount;

&nbsp;&nbsp;&nbsp;&nbsp;ListItr(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;二分遍历，指定游标位置
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next&nbsp;=&nbsp;(index&nbsp;==&nbsp;size)&nbsp;?&nbsp;null&nbsp;:&nbsp;node(index);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nextIndex&nbsp;=&nbsp;index;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;hasNext()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;nextIndex&nbsp;&lt;&nbsp;size;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;E&nbsp;next()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!hasNext())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//很简单，后移一位
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastReturned&nbsp;=&nbsp;next;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next&nbsp;=&nbsp;next.next;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nextIndex++;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;lastReturned.item;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;hasPrevious()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;nextIndex&nbsp;&gt;&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;E&nbsp;previous()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!hasPrevious())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastReturned&nbsp;=&nbsp;next&nbsp;=&nbsp;(next&nbsp;==&nbsp;null)&nbsp;?&nbsp;last&nbsp;:&nbsp;next.prev;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nextIndex--;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;lastReturned.item;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;nextIndex()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;nextIndex;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;previousIndex()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;nextIndex&nbsp;-&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;remove()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(lastReturned&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IllegalStateException();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;lastNext&nbsp;=&nbsp;lastReturned.next;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unlink(lastReturned);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(next&nbsp;==&nbsp;lastReturned)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next&nbsp;=&nbsp;lastNext;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nextIndex--;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastReturned&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expectedModCount++;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;set(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(lastReturned&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IllegalStateException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastReturned.item&nbsp;=&nbsp;e;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;add(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastReturned&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(next&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linkLast(e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linkBefore(e,&nbsp;next);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nextIndex++;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expectedModCount++;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;forEachRemaining(Consumer&lt;?&nbsp;super&nbsp;E&gt;&nbsp;action)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Objects.requireNonNull(action);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(modCount&nbsp;==&nbsp;expectedModCount&nbsp;&amp;&amp;&nbsp;nextIndex&nbsp;&lt;&nbsp;size)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action.accept(next.item);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastReturned&nbsp;=&nbsp;next;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next&nbsp;=&nbsp;next.next;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nextIndex++;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;void&nbsp;checkForComodification()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(modCount&nbsp;!=&nbsp;expectedModCount)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>还有个 LLSpliterator 继承自 Spliterator， JDK 8 出来的新东东，这里暂不研究</h2><blockquote style=\"box-sizing: border-box; margin: 0px 0px 1.1em; padding: 15px 20px; border-left: 10px solid rgba(128, 128, 128, 0.0745098); background-color: rgba(128, 128, 128, 0.0470588); border-radius: 0px 5px 5px 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; line-height: 1.25;\">Spliterator 是&nbsp;<a href=\"http://lib.csdn.net/base/java\" class=\"replace_word\" title=\"Java 知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Java&nbsp;</a>8 引入的新接口，顾名思义，Spliterator 可以理解为 Iterator 的 Split 版本（但用途要丰富很多）。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; line-height: 1.25;\">使用 Iterator 的时候，我们可以顺序地遍历容器中的元素，使用 Spliterator 的时候，我们可以将元素<strong style=\"box-sizing: border-box;\">分割成多份</strong>，分别交于不于的线程去遍历，以提高效率。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; line-height: 1.25;\">使用 Spliterator 每次可以处理某个元素集合中的一个元素 — 不是从 Spliterator 中获取元素，而是使用 tryAdvance() 或 forEachRemaining() 方法对元素应用操作。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; line-height: 1.25;\">但 Spliterator 还可以用于估计其中保存的元素数量，而且还可以像细胞分裂一样变为一分为二。这些新增加的能力让流并行处理代码可以很方便地将工作分布到多个可用线程上完成。</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; box-sizing: border-box; line-height: 1.25;\">转自&nbsp;<a href=\"http://blog.sina.com.cn/s/blog_3fe961ae0102wxdb.html\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">http://blog.sina.com.cn/s/blog_3fe961ae0102wxdb.html</a></p></blockquote><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>总结</h2><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>吐个槽，估计是很多人维护的，有些方法功能代码完全一样</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">比如：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">private&nbsp;boolean&nbsp;isElementIndex(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;index&nbsp;&gt;=&nbsp;0&nbsp;&amp;&amp;&nbsp;index&nbsp;&lt;&nbsp;size;
}

private&nbsp;boolean&nbsp;isPositionIndex(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;index&nbsp;&gt;=&nbsp;0&nbsp;&amp;&amp;&nbsp;index&nbsp;&lt;=&nbsp;size;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>LinkedList 特点</h3><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>双向链表实现</p></li><li><p>元素时有序的，输出顺序与输入顺序一致</p></li><li><p>允许元素为 null</p></li><li><p>所有指定位置的操作都是从头开始遍历进行的</p></li><li><p>和 ArrayList 一样，不是同步容器</p></li></ul><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>并发访问注意事项</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">linkedList 和 ArrayList 一样，不是同步容器。所以需要外部做同步操作，或者直接用&nbsp;<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; padding: 2px 4px; font-size: 12.6px; color: rgb(63, 63, 63); background-color: rgba(128, 128, 128, 0.0745098); white-space: nowrap; border-radius: 0px;\">Collections.synchronizedList</code>&nbsp;方法包一下，最好在创建时就报一下：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">List&nbsp;list&nbsp;=&nbsp;Collections.synchronizedList(new&nbsp;LinkedList(...));</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">LinkedList 的迭代器都是 fail-fast 的: 如果在并发环境下，其他线程使用迭代器以外的方法修改数据，会导致 ConcurrentModificationException.</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>ArrayList VS LinkedList</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161020160411557\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">ArrayList</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>基于数组，在数组中搜索和读取数据是很快的。因此 ArrayList 获取数据的时间复杂度是O(1);</p></li><li><p>但是添加、删除时该元素后面的所有元素都要移动，所以添加/删除数据效率不高；</p></li><li><p>另外其实还是有容量的，每次达到阈值需要扩容，这个操作比较影响效率。</p></li></ul><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">LinkedList</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>基于双端链表，添加/删除元素只会影响周围的两个节点，开销很低；</p></li><li><p>只能顺序遍历，无法按照索引获得元素，因此查询效率不高；</p></li><li><p>没有固定容量，不需要扩容；</p></li><li><p>需要更多的内存，如文章开头图片所示 LinkedList 每个节点中需要多存储前后节点的信息，占用空间更多些。</p></li></ul><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>拓展</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">两个队列实现一个栈 ？</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://www.cnblogs.com/kaituorensheng/archive/2013/03/02/2939690.html\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">http://www.cnblogs.com/kaituorensheng/archive/2013/03/02/2939690.html</a></p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Thanks</h2><p><br/></p>','0','2016-11-20 09:57:18') [ RunTime:0.1014s ]

[ 2016-11-20T21:57:19+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002651s ]
INFO: [ app_begin ] --END-- [ RunTime:0.004029s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0039s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0010s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T21:57:28+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000812s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001543s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0042s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0004s ]

[ 2016-11-20T21:57:45+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000361s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000738s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0041s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0045s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0043s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 50  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('Java 集合深入理解（12）：古老的 Vector','87','50','<h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\">什么是 Vector</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161021113111379\" alt=\"这里写图片描述\" title=\"\"/></p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Vector 和 ArrayList 一样，都是继承自&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52834074\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">AbstractList</a>。它是 Stack 的父类。英文的意思是 “矢量”。</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161021114436771\" alt=\"这里写图片描述\" title=\"\"/></p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Vector 成员变量</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161021233315132\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">1.底层也是个数组</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">protected&nbsp;Object[]&nbsp;elementData;</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">2.数组元素个数，为啥不就叫 size 呢？奇怪</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">protected&nbsp;int&nbsp;elementCount;</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">3.扩容时增长数量，允许用户自己设置。如果这个值是 0 或者 负数，扩容时会扩大 2 倍，而不是 1.5</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">protected&nbsp;int&nbsp;capacityIncrement;</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">4.默认容量</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">private&nbsp;static&nbsp;final&nbsp;int&nbsp;DEFAULT_SIZE&nbsp;=&nbsp;10;</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Vector 的 4 种构造方法</h2><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">//创建默认容量&nbsp;10&nbsp;的数组，同时增长量为&nbsp;0&nbsp;
public&nbsp;Vector()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;this(DEFAULT_SIZE,&nbsp;0);
}

//创建一个用户指定容量的数组，同时增长量为&nbsp;0&nbsp;
public&nbsp;Vector(int&nbsp;capacity)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;this(capacity,&nbsp;0);
}

//创建指定容量大小的数组，设置增长量。如果增长量为&nbsp;非正数，扩容时会扩大两倍
public&nbsp;Vector(int&nbsp;capacity,&nbsp;int&nbsp;capacityIncrement)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(capacity&nbsp;&lt;&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IllegalArgumentException(&quot;capacity&nbsp;&lt;&nbsp;0:&nbsp;&quot;&nbsp;+&nbsp;capacity);
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;elementData&nbsp;=&nbsp;newElementArray(capacity);
&nbsp;&nbsp;&nbsp;&nbsp;elementCount&nbsp;=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;this.capacityIncrement&nbsp;=&nbsp;capacityIncrement;
}

//创建一个包含指定集合的数组
public&nbsp;Vector(Collection&lt;?&nbsp;extends&nbsp;E&gt;&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//转成数组，赋值
&nbsp;&nbsp;&nbsp;&nbsp;elementData&nbsp;=&nbsp;c.toArray();
&nbsp;&nbsp;&nbsp;&nbsp;elementCount&nbsp;=&nbsp;elementData.length;

&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;c.toArray&nbsp;might&nbsp;(incorrectly)&nbsp;not&nbsp;return&nbsp;Object[]&nbsp;(see&nbsp;6260652)
&nbsp;&nbsp;&nbsp;&nbsp;//可能有这个神奇的&nbsp;bug，用&nbsp;Arrays.copyOf&nbsp;重新创建、复制
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(elementData.getClass()&nbsp;!=&nbsp;Object[].class)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementData&nbsp;=&nbsp;Arrays.copyOf(elementData,&nbsp;elementCount,&nbsp;Object[].class);
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">一个内部方法，返回一个新数组：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">private&nbsp;E[]&nbsp;newElementArray(int&nbsp;size)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(E[])&nbsp;new&nbsp;Object[size];
}</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Vector 的成员方法</h2><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>1.先来看 JDK 7 中 Vector 的 3 种扩容方式：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">//根据指定的容量进行扩容&nbsp;&nbsp;&nbsp;
private&nbsp;void&nbsp;grow(int&nbsp;newCapacity)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//创建个指定容量的新数组，这里假设指定的容量比当前数组元素个数多
&nbsp;&nbsp;&nbsp;&nbsp;E[]&nbsp;newData&nbsp;=&nbsp;newElementArray(newCapacity);
&nbsp;&nbsp;&nbsp;&nbsp;//把当前数组复制到新创建的数组
&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(elementData,&nbsp;0,&nbsp;newData,&nbsp;0,&nbsp;elementCount);
&nbsp;&nbsp;&nbsp;&nbsp;//当前数组指向新数组
&nbsp;&nbsp;&nbsp;&nbsp;elementData&nbsp;=&nbsp;newData;
}

//默认增长一倍的扩容
private&nbsp;void&nbsp;growByOne()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;adding&nbsp;=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;//扩容量&nbsp;capacityIncrement&nbsp;不大于&nbsp;0，就增长一倍
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(capacityIncrement&nbsp;&lt;=&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;((adding&nbsp;=&nbsp;elementData.length)&nbsp;==&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;adding&nbsp;=&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//否则按扩容量走
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;adding&nbsp;=&nbsp;capacityIncrement;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//创建个新数组，大小为当前容量加上&nbsp;adding
&nbsp;&nbsp;&nbsp;&nbsp;E[]&nbsp;newData&nbsp;=&nbsp;newElementArray(elementData.length&nbsp;+&nbsp;adding);
&nbsp;&nbsp;&nbsp;&nbsp;//复制，赋值
&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(elementData,&nbsp;0,&nbsp;newData,&nbsp;0,&nbsp;elementCount);
&nbsp;&nbsp;&nbsp;&nbsp;elementData&nbsp;=&nbsp;newData;
}

//指定默认扩容数量的扩容
private&nbsp;void&nbsp;growBy(int&nbsp;required)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;adding&nbsp;=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;//扩容量&nbsp;capacityIncrement&nbsp;不大于&nbsp;0
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(capacityIncrement&nbsp;&lt;=&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//如果当前数组内没有元素，就按指定的数量扩容
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;((adding&nbsp;=&nbsp;elementData.length)&nbsp;==&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;adding&nbsp;=&nbsp;required;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//增加扩容数量到&nbsp;指定的以上
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(adding&nbsp;&lt;&nbsp;required)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;adding&nbsp;+=&nbsp;adding;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//扩容量大于&nbsp;0&nbsp;，还是按指定的扩容数量走啊
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;adding&nbsp;=&nbsp;(required&nbsp;/&nbsp;capacityIncrement)&nbsp;*&nbsp;capacityIncrement;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//不过也可能出现偏差，因为是&nbsp;int&nbsp;做除法，所以扩容值至少是&nbsp;指定扩容量的一倍以上
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(adding&nbsp;&lt;&nbsp;required)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;adding&nbsp;+=&nbsp;capacityIncrement;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;//创建，复制，赋值一条龙
&nbsp;&nbsp;&nbsp;&nbsp;E[]&nbsp;newData&nbsp;=&nbsp;newElementArray(elementData.length&nbsp;+&nbsp;adding);
&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(elementData,&nbsp;0,&nbsp;newData,&nbsp;0,&nbsp;elementCount);
&nbsp;&nbsp;&nbsp;&nbsp;elementData&nbsp;=&nbsp;newData;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>2.（我能说一开始看错了，看成 JDK7 的了吗 - -）再来看JDK 8 中的扩容机制，变成一种了：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">//扩容，传入最小容量，跟&nbsp;ArrayList.grow(int)&nbsp;很相似，只是扩大量不同&nbsp;
private&nbsp;void&nbsp;grow(int&nbsp;minCapacity)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;oldCapacity&nbsp;=&nbsp;elementData.length;
&nbsp;&nbsp;&nbsp;&nbsp;//如果增长量&nbsp;capacityIncrement&nbsp;不大于&nbsp;0&nbsp;，就扩容&nbsp;2&nbsp;倍
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;newCapacity&nbsp;=&nbsp;oldCapacity&nbsp;+&nbsp;((capacityIncrement&nbsp;&gt;&nbsp;0)&nbsp;?
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;capacityIncrement&nbsp;:&nbsp;oldCapacity);
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(newCapacity&nbsp;-&nbsp;minCapacity&nbsp;&lt;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newCapacity&nbsp;=&nbsp;minCapacity;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(newCapacity&nbsp;-&nbsp;MAX_ARRAY_SIZE&nbsp;&gt;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newCapacity&nbsp;=&nbsp;hugeCapacity(minCapacity);
&nbsp;&nbsp;&nbsp;&nbsp;//
&nbsp;&nbsp;&nbsp;&nbsp;elementData&nbsp;=&nbsp;Arrays.copyOf(elementData,&nbsp;newCapacity);
}

private&nbsp;static&nbsp;int&nbsp;hugeCapacity(int&nbsp;minCapacity)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(minCapacity&nbsp;&lt;&nbsp;0)&nbsp;//&nbsp;overflow
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;OutOfMemoryError();
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(minCapacity&nbsp;&gt;&nbsp;MAX_ARRAY_SIZE)&nbsp;?
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer.MAX_VALUE&nbsp;:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MAX_ARRAY_SIZE;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>3.Vector中的 5 种添加元素的方法</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">//扩容前兆，检查数量
private&nbsp;void&nbsp;ensureCapacityHelper(int&nbsp;minCapacity)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(minCapacity&nbsp;-&nbsp;elementData.length&nbsp;&gt;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grow(minCapacity);
}

//在指定位置插入一个元素，同步的
public&nbsp;synchronized&nbsp;void&nbsp;insertElementAt(E&nbsp;obj,&nbsp;int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(index&nbsp;&gt;&nbsp;elementCount)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ArrayIndexOutOfBoundsException(index
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;&quot;&nbsp;&gt;&nbsp;&quot;&nbsp;+&nbsp;elementCount);
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;ensureCapacityHelper(elementCount&nbsp;+&nbsp;1);
&nbsp;&nbsp;&nbsp;&nbsp;//扩容后就把插入点后面的元素统一后移一位
&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(elementData,&nbsp;index,&nbsp;elementData,&nbsp;index&nbsp;+&nbsp;1,&nbsp;elementCount&nbsp;-&nbsp;index);
&nbsp;&nbsp;&nbsp;&nbsp;//赋值
&nbsp;&nbsp;&nbsp;&nbsp;elementData[index]&nbsp;=&nbsp;obj;
&nbsp;&nbsp;&nbsp;&nbsp;elementCount++;
}

//尾部插入元素，同步的
public&nbsp;synchronized&nbsp;void&nbsp;addElement(E&nbsp;obj)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;ensureCapacityHelper(elementCount&nbsp;+&nbsp;1);
&nbsp;&nbsp;&nbsp;&nbsp;elementData[elementCount++]&nbsp;=&nbsp;obj;
}

public&nbsp;void&nbsp;add(int&nbsp;index,&nbsp;E&nbsp;element)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;insertElementAt(element,&nbsp;index);
}

//添加一个集合到尾部，同步的
public&nbsp;synchronized&nbsp;boolean&nbsp;addAll(Collection&lt;?&nbsp;extends&nbsp;E&gt;&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;//转成数组
&nbsp;&nbsp;&nbsp;&nbsp;Object[]&nbsp;a&nbsp;=&nbsp;c.toArray();
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;numNew&nbsp;=&nbsp;a.length;
&nbsp;&nbsp;&nbsp;&nbsp;//扩容，复制到数组后面
&nbsp;&nbsp;&nbsp;&nbsp;ensureCapacityHelper(elementCount&nbsp;+&nbsp;numNew);
&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(a,&nbsp;0,&nbsp;elementData,&nbsp;elementCount,&nbsp;numNew);
&nbsp;&nbsp;&nbsp;&nbsp;elementCount&nbsp;+=&nbsp;numNew;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;numNew&nbsp;!=&nbsp;0;
}

//添加一个结合到指定位置，同步的
public&nbsp;synchronized&nbsp;boolean&nbsp;addAll(int&nbsp;index,&nbsp;Collection&lt;?&nbsp;extends&nbsp;E&gt;&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(index&nbsp;&lt;&nbsp;0&nbsp;||&nbsp;index&nbsp;&gt;&nbsp;elementCount)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ArrayIndexOutOfBoundsException(index);

&nbsp;&nbsp;&nbsp;&nbsp;Object[]&nbsp;a&nbsp;=&nbsp;c.toArray();
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;numNew&nbsp;=&nbsp;a.length;
&nbsp;&nbsp;&nbsp;&nbsp;ensureCapacityHelper(elementCount&nbsp;+&nbsp;numNew);

&nbsp;&nbsp;&nbsp;&nbsp;//要移动多少个元素
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;numMoved&nbsp;=&nbsp;elementCount&nbsp;-&nbsp;index;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(numMoved&nbsp;&gt;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//把插入位置后面的元素后移这么多位
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(elementData,&nbsp;index,&nbsp;elementData,&nbsp;index&nbsp;+&nbsp;numNew,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numMoved);
&nbsp;&nbsp;&nbsp;&nbsp;//复制元素到数组中
&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(a,&nbsp;0,&nbsp;elementData,&nbsp;index,&nbsp;numNew);
&nbsp;&nbsp;&nbsp;&nbsp;elementCount&nbsp;+=&nbsp;numNew;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;numNew&nbsp;!=&nbsp;0;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">最后还有个 ListIterator 的添加方法</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;add(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;cursor;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(Vector.this)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vector.this.add(i,&nbsp;e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expectedModCount&nbsp;=&nbsp;modCount;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor&nbsp;=&nbsp;i&nbsp;+&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastRet&nbsp;=&nbsp;-1;
&nbsp;&nbsp;&nbsp;&nbsp;}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>4.Vector 中的 9 种删除方法</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">//删除指定位置的元素，同步的
public&nbsp;synchronized&nbsp;void&nbsp;removeElementAt(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(index&nbsp;&gt;=&nbsp;elementCount)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ArrayIndexOutOfBoundsException(index&nbsp;+&nbsp;&quot;&nbsp;&gt;=&nbsp;&quot;&nbsp;+
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementCount);
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;if&nbsp;(index&nbsp;&lt;&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ArrayIndexOutOfBoundsException(index);
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;j&nbsp;=&nbsp;elementCount&nbsp;-&nbsp;index&nbsp;-&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(j&nbsp;&gt;&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//把删除位置后面的元素往前移一位
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(elementData,&nbsp;index&nbsp;+&nbsp;1,&nbsp;elementData,&nbsp;index,&nbsp;j);
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;elementCount--;
&nbsp;&nbsp;&nbsp;&nbsp;//最后多余的一位置为&nbsp;null
&nbsp;&nbsp;&nbsp;&nbsp;elementData[elementCount]&nbsp;=&nbsp;null;&nbsp;/*&nbsp;to&nbsp;let&nbsp;gc&nbsp;do&nbsp;its&nbsp;work&nbsp;*/
}

//删除指定元素，同步的
public&nbsp;synchronized&nbsp;boolean&nbsp;removeElement(Object&nbsp;obj)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;indexOf(obj);
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(i&nbsp;&gt;=&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;removeElementAt(i);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
}

E&nbsp;elementData(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(E)&nbsp;elementData[index];
}

//删除指定位置的元素
public&nbsp;synchronized&nbsp;E&nbsp;remove(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(index&nbsp;&gt;=&nbsp;elementCount)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ArrayIndexOutOfBoundsException(index);
&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;oldValue&nbsp;=&nbsp;elementData(index);

&nbsp;&nbsp;&nbsp;&nbsp;//找到删除该元素后，后面有多少位元素需要前移一位
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;numMoved&nbsp;=&nbsp;elementCount&nbsp;-&nbsp;index&nbsp;-&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(numMoved&nbsp;&gt;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//迁移一位
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(elementData,&nbsp;index+1,&nbsp;elementData,&nbsp;index,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numMoved);
&nbsp;&nbsp;&nbsp;&nbsp;//最后一位置为&nbsp;null，不浪费空间
&nbsp;&nbsp;&nbsp;&nbsp;elementData[--elementCount]&nbsp;=&nbsp;null;&nbsp;//&nbsp;Let&nbsp;gc&nbsp;do&nbsp;its&nbsp;work

&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;oldValue;
}

public&nbsp;boolean&nbsp;remove(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;removeElement(o);
}

//删除指定集合的所有元素，同步的
public&nbsp;synchronized&nbsp;boolean&nbsp;removeAll(Collection&lt;?&gt;&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//直接调用&nbsp;AbstractCollection&nbsp;的&nbsp;removeAll&nbsp;方法，用迭代器挨个删除
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;super.removeAll(c);
}

//删除所有元素，同步的
public&nbsp;synchronized&nbsp;void&nbsp;removeAllElements()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;挨个置为空，Let&nbsp;gc&nbsp;do&nbsp;its&nbsp;work
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;elementCount;&nbsp;i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementData[i]&nbsp;=&nbsp;null;

&nbsp;&nbsp;&nbsp;&nbsp;elementCount&nbsp;=&nbsp;0;
}

//删除指定范围的元素,同步的
protected&nbsp;synchronized&nbsp;void&nbsp;removeRange(int&nbsp;fromIndex,&nbsp;int&nbsp;toIndex)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;//把结束位置以后的元素向前移动&nbsp;指定数量个位置，覆盖
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;numMoved&nbsp;=&nbsp;elementCount&nbsp;-&nbsp;toIndex;
&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(elementData,&nbsp;toIndex,&nbsp;elementData,&nbsp;fromIndex,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numMoved);

&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;把多余的位置置为&nbsp;null
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;newElementCount&nbsp;=&nbsp;elementCount&nbsp;-&nbsp;(toIndex-fromIndex);
&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(elementCount&nbsp;!=&nbsp;newElementCount)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementData[--elementCount]&nbsp;=&nbsp;null;
}

//排除异己，同步的
public&nbsp;synchronized&nbsp;boolean&nbsp;retainAll(Collection&lt;?&gt;&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;super.retainAll(c);
}

//JDK&nbsp;1.8&nbsp;新增的
public&nbsp;synchronized&nbsp;boolean&nbsp;removeIf(Predicate&lt;?&nbsp;super&nbsp;E&gt;&nbsp;filter)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;Objects.requireNonNull(filter);
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;将要删除的内容加入&nbsp;removeSet
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;removeCount&nbsp;=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;int&nbsp;size&nbsp;=&nbsp;elementCount;
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;BitSet&nbsp;removeSet&nbsp;=&nbsp;new&nbsp;BitSet(size);
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;int&nbsp;expectedModCount&nbsp;=&nbsp;modCount;
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i=0;&nbsp;modCount&nbsp;==&nbsp;expectedModCount&nbsp;&amp;&amp;&nbsp;i&nbsp;&lt;&nbsp;size;&nbsp;i++)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@SuppressWarnings(&quot;unchecked&quot;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;E&nbsp;element&nbsp;=&nbsp;(E)&nbsp;elementData[i];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(filter.test(element))&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;removeSet.set(i);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;removeCount++;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(modCount&nbsp;!=&nbsp;expectedModCount)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;遍历，删除
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;boolean&nbsp;anyToRemove&nbsp;=&nbsp;removeCount&nbsp;&gt;&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(anyToRemove)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;int&nbsp;newSize&nbsp;=&nbsp;size&nbsp;-&nbsp;removeCount;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i=0,&nbsp;j=0;&nbsp;(i&nbsp;&lt;&nbsp;size)&nbsp;&amp;&amp;&nbsp;(j&nbsp;&lt;&nbsp;newSize);&nbsp;i++,&nbsp;j++)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i&nbsp;=&nbsp;removeSet.nextClearBit(i);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementData[j]&nbsp;=&nbsp;elementData[i];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;k=newSize;&nbsp;k&nbsp;&lt;&nbsp;size;&nbsp;k++)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementData[k]&nbsp;=&nbsp;null;&nbsp;&nbsp;//&nbsp;Let&nbsp;gc&nbsp;do&nbsp;its&nbsp;work
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementCount&nbsp;=&nbsp;newSize;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(modCount&nbsp;!=&nbsp;expectedModCount)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;anyToRemove;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">写“同步的”写的手抽筋，还是统计不是同步的方法吧 - -。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>5. Vector 中的修改方法</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">//修改指定位置为指定元素
public&nbsp;synchronized&nbsp;E&nbsp;set(int&nbsp;index,&nbsp;E&nbsp;element)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(index&nbsp;&gt;=&nbsp;elementCount)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ArrayIndexOutOfBoundsException(index);
&nbsp;&nbsp;&nbsp;&nbsp;//找到这个元素，直接设置新值
&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;oldValue&nbsp;=&nbsp;elementData(index);
&nbsp;&nbsp;&nbsp;&nbsp;elementData[index]&nbsp;=&nbsp;element;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;oldValue;
}

//修改指定位置为指定元素
public&nbsp;synchronized&nbsp;void&nbsp;setElementAt(E&nbsp;obj,&nbsp;int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(index&nbsp;&gt;=&nbsp;elementCount)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ArrayIndexOutOfBoundsException(index&nbsp;+&nbsp;&quot;&nbsp;&gt;=&nbsp;&quot;&nbsp;+
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementCount);
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;//数组就是方便，直接更新就好了
&nbsp;&nbsp;&nbsp;&nbsp;elementData[index]&nbsp;=&nbsp;obj;
}

//修改数组容量
public&nbsp;synchronized&nbsp;void&nbsp;setSize(int&nbsp;newSize)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;//元素个数超出容量就要扩容
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(newSize&nbsp;&gt;&nbsp;elementCount)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ensureCapacityHelper(newSize);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//新增&nbsp;elementCount&nbsp;-&nbsp;newSize&nbsp;个元素
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;newSize&nbsp;;&nbsp;i&nbsp;&lt;&nbsp;elementCount&nbsp;;&nbsp;i++)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementData[i]&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;elementCount&nbsp;=&nbsp;newSize;
}

//排序，修改顺序
public&nbsp;synchronized&nbsp;void&nbsp;sort(Comparator&lt;?&nbsp;super&nbsp;E&gt;&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;int&nbsp;expectedModCount&nbsp;=&nbsp;modCount;
&nbsp;&nbsp;&nbsp;&nbsp;//用的是&nbsp;Arrays.sort&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;Arrays.sort((E[])&nbsp;elementData,&nbsp;0,&nbsp;elementCount,&nbsp;c);
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(modCount&nbsp;!=&nbsp;expectedModCount)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
}

//缩小数组容量，减少占用资源
public&nbsp;synchronized&nbsp;void&nbsp;trimToSize()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;oldCapacity&nbsp;=&nbsp;elementData.length;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(elementCount&nbsp;&lt;&nbsp;oldCapacity)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//新建个小点的数组，赋值
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementData&nbsp;=&nbsp;Arrays.copyOf(elementData,&nbsp;elementCount);
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>6. Vector 中的查询</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">//查找&nbsp;o&nbsp;从指定位置&nbsp;index&nbsp;开始第一次出现的位置
public&nbsp;synchronized&nbsp;int&nbsp;indexOf(Object&nbsp;o,&nbsp;int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;index&nbsp;;&nbsp;i&nbsp;&lt;&nbsp;elementCount&nbsp;;&nbsp;i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(elementData[i]==null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;index&nbsp;;&nbsp;i&nbsp;&lt;&nbsp;elementCount&nbsp;;&nbsp;i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o.equals(elementData[i]))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;-1;
}

//查找&nbsp;o&nbsp;在数组中首次出现的位置
public&nbsp;int&nbsp;indexOf(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;indexOf(o,&nbsp;0);
}

//是否包含&nbsp;O&nbsp;
public&nbsp;boolean&nbsp;contains(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;indexOf(o,&nbsp;0)&nbsp;&gt;=&nbsp;0;
}

//是否包含整个集合
public&nbsp;synchronized&nbsp;boolean&nbsp;containsAll(Collection&lt;?&gt;&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//调用&nbsp;AbstractCollection&nbsp;的方法，使用迭代器挨个遍历查找，两重循环
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;super.containsAll(c);
}

//第一个元素，其实提供了&nbsp;get()&nbsp;方法就够了
public&nbsp;synchronized&nbsp;E&nbsp;firstElement()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(elementCount&nbsp;==&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException();
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;elementData(0);
}

//最后一个元素，其实提供了&nbsp;get()&nbsp;方法就够了
public&nbsp;synchronized&nbsp;E&nbsp;lastElement()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(elementCount&nbsp;==&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException();
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;elementData(elementCount&nbsp;-&nbsp;1);
}

public&nbsp;synchronized&nbsp;boolean&nbsp;isEmpty()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;elementCount&nbsp;==&nbsp;0;
}

//实际包含元素个数
public&nbsp;synchronized&nbsp;int&nbsp;size()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;elementCount;
}

//数组大小，&gt;=&nbsp;元素个数
public&nbsp;synchronized&nbsp;int&nbsp;capacity()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;elementData.length;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>7. Vector 也可以转成数组</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;synchronized&nbsp;Object[]&nbsp;toArray()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Arrays.copyOf(elementData,&nbsp;elementCount);
}

//跟&nbsp;ArrayList&nbsp;简直一样
public&nbsp;synchronized&nbsp;&lt;T&gt;&nbsp;T[]&nbsp;toArray(T[]&nbsp;a)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(a.length&nbsp;&lt;&nbsp;elementCount)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(T[])&nbsp;Arrays.copyOf(elementData,&nbsp;elementCount,&nbsp;a.getClass());

&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(elementData,&nbsp;0,&nbsp;a,&nbsp;0,&nbsp;elementCount);

&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(a.length&nbsp;&gt;&nbsp;elementCount)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[elementCount]&nbsp;=&nbsp;null;

&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;a;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>8. Vector 中的迭代器</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">普通迭代器　Iterator:</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;synchronized&nbsp;Iterator&lt;E&gt;&nbsp;iterator()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;Itr();
}

private&nbsp;class&nbsp;Itr&nbsp;implements&nbsp;Iterator&lt;E&gt;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;cursor;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;index&nbsp;of&nbsp;next&nbsp;element&nbsp;to&nbsp;return
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;lastRet&nbsp;=&nbsp;-1;&nbsp;//&nbsp;index&nbsp;of&nbsp;last&nbsp;element&nbsp;returned;&nbsp;-1&nbsp;if&nbsp;no&nbsp;such
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;expectedModCount&nbsp;=&nbsp;modCount;

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;hasNext()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;调用&nbsp;next()&nbsp;前的检查
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cursor&nbsp;!=&nbsp;elementCount;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;E&nbsp;next()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//注意了，Vector&nbsp;连迭代器的方法也加了同步
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(Vector.this)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;cursor;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(i&nbsp;&gt;=&nbsp;elementCount)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor&nbsp;=&nbsp;i&nbsp;+&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;elementData(lastRet&nbsp;=&nbsp;i);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;remove()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(lastRet&nbsp;==&nbsp;-1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IllegalStateException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//注意了，Vector&nbsp;连迭代器的方法也加了同步
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(Vector.this)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vector.this.remove(lastRet);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expectedModCount&nbsp;=&nbsp;modCount;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor&nbsp;=&nbsp;lastRet;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastRet&nbsp;=&nbsp;-1;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//大概看下这个&nbsp;1.8&nbsp;的方法
&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;forEachRemaining(Consumer&lt;?&nbsp;super&nbsp;E&gt;&nbsp;action)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Objects.requireNonNull(action);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(Vector.this)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;int&nbsp;size&nbsp;=&nbsp;elementCount;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;cursor;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(i&nbsp;&gt;=&nbsp;size)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;@SuppressWarnings(&quot;unchecked&quot;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;E[]&nbsp;elementData&nbsp;=&nbsp;(E[])&nbsp;Vector.this.elementData;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(i&nbsp;&gt;=&nbsp;elementData.length)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(i&nbsp;!=&nbsp;size&nbsp;&amp;&amp;&nbsp;modCount&nbsp;==&nbsp;expectedModCount)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action.accept(elementData[i++]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;update&nbsp;once&nbsp;at&nbsp;end&nbsp;of&nbsp;iteration&nbsp;to&nbsp;reduce&nbsp;heap&nbsp;write&nbsp;traffic
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor&nbsp;=&nbsp;i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastRet&nbsp;=&nbsp;i&nbsp;-&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;void&nbsp;checkForComodification()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(modCount&nbsp;!=&nbsp;expectedModCount)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">ListIterator:</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;synchronized&nbsp;ListIterator&lt;E&gt;&nbsp;listIterator(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(index&nbsp;&lt;&nbsp;0&nbsp;||&nbsp;index&nbsp;&gt;&nbsp;elementCount)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IndexOutOfBoundsException(&quot;Index:&nbsp;&quot;+index);
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;ListItr(index);
}

final&nbsp;class&nbsp;ListItr&nbsp;extends&nbsp;Itr&nbsp;implements&nbsp;ListIterator&lt;E&gt;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;ListItr(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor&nbsp;=&nbsp;index;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;hasPrevious()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cursor&nbsp;!=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;nextIndex()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cursor;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;previousIndex()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cursor&nbsp;-&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;E&nbsp;previous()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(Vector.this)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;cursor&nbsp;-&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(i&nbsp;&lt;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor&nbsp;=&nbsp;i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;elementData(lastRet&nbsp;=&nbsp;i);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;set(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(lastRet&nbsp;==&nbsp;-1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IllegalStateException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(Vector.this)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vector.this.set(lastRet,&nbsp;e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;add(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;cursor;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(Vector.this)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vector.this.add(i,&nbsp;e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expectedModCount&nbsp;=&nbsp;modCount;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor&nbsp;=&nbsp;i&nbsp;+&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastRet&nbsp;=&nbsp;-1;
&nbsp;&nbsp;&nbsp;&nbsp;}
}

//1.8&nbsp;新增的略过。。。

//还多了个&nbsp;sort&nbsp;方法，自己传入的集合需要实现比较器
@SuppressWarnings(&quot;unchecked&quot;)
@Override
public&nbsp;synchronized&nbsp;void&nbsp;sort(Comparator&lt;?&nbsp;super&nbsp;E&gt;&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;int&nbsp;expectedModCount&nbsp;=&nbsp;modCount;
&nbsp;&nbsp;&nbsp;&nbsp;Arrays.sort((E[])&nbsp;elementData,&nbsp;0,&nbsp;elementCount,&nbsp;c);
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(modCount&nbsp;!=&nbsp;expectedModCount)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Vector 还支持 Enumeration　迭代：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;Enumeration&lt;E&gt;&nbsp;elements()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;Enumeration&lt;E&gt;()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;count&nbsp;=&nbsp;0;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;hasMoreElements()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;count&nbsp;&lt;&nbsp;elementCount;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;E&nbsp;nextElement()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(Vector.this)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(count&nbsp;&lt;&nbsp;elementCount)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;elementData(count++);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException(&quot;Vector&nbsp;Enumeration&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;};
}</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>总结</h2><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Vector 特点</h3><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>底层由一个可以增长的数组组成</p></li><li><p>Vector 通过 capacity (容量) 和 capacityIncrement (增长数量) 来尽量少的占用空间</p></li><li><p>扩容时默认扩大两倍</p></li><li><p>最好在插入大量元素前增加 vector 容量，那样可以减少重新申请内存的次数</p></li><li><p>通过 iterator 和 lastIterator 获得的迭代器是 fail-fast 的</p></li><li><p>通过 elements 获得的老版迭代器 Enumeration 不是 fail-fast 的</p></li><li><p>同步类，每个方法前都有同步锁 synchronized</p></li><li><p>在 JDK 2.0 以后，经过优化，Vector 也加入了 Java 集合框架大家族</p></li></ul><p><br/></p>','0','2016-11-20 09:57:45') [ RunTime:0.0764s ]

[ 2016-11-20T21:57:46+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000860s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001696s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0054s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0014s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0015s ]

[ 2016-11-20T21:57:58+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000445s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000908s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0038s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T21:58:09+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000641s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001003s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0036s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0047s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0005s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0045s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 50  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('Java 集合深入理解（13）：Stack 栈','87','50','<h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\">数据结构中的 栈</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://lib.csdn.net/base/datastructure\" class=\"replace_word\" title=\"算法与数据结构知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">数据结构</a>中，栈是一种线性数据结构，遵从 LIFO（后进先出）的操作顺序，所有操作都是在顶部进行</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161023122559358\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">有点像羽毛球筒：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161023122848425\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">栈通常有三种操作：</strong></p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>push 入栈</p></li><li><p>pop 栈顶元素出栈，并返回</p></li><li><p>peek 获取栈顶元素，并不删除</p></li></ul><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">我们自定义一个 栈 时只要实现上述三个主要操作即可，本文中将使用&nbsp;<a href=\"http://lib.csdn.net/base/javaee\" class=\"replace_word\" title=\"Java EE知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Java</a>&nbsp;中的 LinkedList　实现一个栈。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"box-sizing: border-box;\">栈的使用场景：</strong></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">栈最主要的意义就在于：入栈和出栈的对称性。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">在&nbsp;<a href=\"http://lib.csdn.net/base/android\" class=\"replace_word\" title=\"Android知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Android</a>&nbsp;开发中，我们经常需要开启、回退一个 Activity，其实这里就有栈的应用，每次开启Activity，如果不是特殊的启动模式，就会在栈顶加入一个 Activity，点击返回后，之前的 Activity 出栈 。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">其他场景比如递归（斐波那契数列，汉诺塔）。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161023125933294\" alt=\"这里写图片描述\" title=\"\"/></p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Java 集合框架中的栈 Stack</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161023121612835\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161023132347177\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Java 集合框架中的 Stack 继承自&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52900893\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Vector</a>：</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>由于 Vector 有 4 个构造函数，加上 Stack 本身的一种，也就是说有 5 中创建 Stack 的方法</p></li><li><p>跟 Vector 一样，它是&nbsp;<strong style=\"box-sizing: border-box;\">数组实现的栈</strong>。</p></li></ul><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Stack 的方法</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Stack 中新建的方法比较少：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161023121637601\" alt=\"这里写图片描述\" title=\"\"/></p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>1.构造函数</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">//构建一个空栈
public&nbsp;Stack()&nbsp;{
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>2.入栈</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">//调用的&nbsp;Vector.addElement()
public&nbsp;E&nbsp;push(E&nbsp;item)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;addElement(item);

&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;item;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Vector 的 addElement() 方法，就是在数组尾部添加元素：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;synchronized&nbsp;void&nbsp;addElement(E&nbsp;obj)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;ensureCapacityHelper(elementCount&nbsp;+&nbsp;1);
&nbsp;&nbsp;&nbsp;&nbsp;elementData[elementCount++]&nbsp;=&nbsp;obj;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>3.获取顶端元素，但不删除</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;synchronized&nbsp;E&nbsp;peek()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//调用&nbsp;Vector.size()&nbsp;返回元素个数
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;len&nbsp;=&nbsp;size();

&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(len&nbsp;==&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;EmptyStackException();
&nbsp;&nbsp;&nbsp;&nbsp;//调用&nbsp;Vector.elementAt&nbsp;得到栈顶元素
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;elementAt(len&nbsp;-&nbsp;1);
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Vector.elementAt(int):</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;synchronized&nbsp;E&nbsp;elementAt(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(index&nbsp;&gt;=&nbsp;elementCount)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ArrayIndexOutOfBoundsException(index&nbsp;+&nbsp;&quot;&nbsp;&gt;=&nbsp;&quot;&nbsp;+&nbsp;elementCount);
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;elementData(index);
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Vector.elementData(int):</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">E&nbsp;elementData(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(E)&nbsp;elementData[index];
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>4.出栈</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;synchronized&nbsp;E&nbsp;pop()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;obj;
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;len&nbsp;=&nbsp;size();

&nbsp;&nbsp;&nbsp;&nbsp;//调用&nbsp;peek()&nbsp;获取顶端元素，一会儿返回
&nbsp;&nbsp;&nbsp;&nbsp;obj&nbsp;=&nbsp;peek();
&nbsp;&nbsp;&nbsp;&nbsp;//调用&nbsp;Vector.removeElementAt&nbsp;删除顶端元素
&nbsp;&nbsp;&nbsp;&nbsp;removeElementAt(len&nbsp;-&nbsp;1);

&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;obj;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Vector.removeElementAt(int):</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;synchronized&nbsp;void&nbsp;removeElementAt(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(index&nbsp;&gt;=&nbsp;elementCount)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ArrayIndexOutOfBoundsException(index&nbsp;+&nbsp;&quot;&nbsp;&gt;=&nbsp;&quot;&nbsp;+
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementCount);
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;if&nbsp;(index&nbsp;&lt;&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ArrayIndexOutOfBoundsException(index);
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;j&nbsp;=&nbsp;elementCount&nbsp;-&nbsp;index&nbsp;-&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(j&nbsp;&gt;&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(elementData,&nbsp;index&nbsp;+&nbsp;1,&nbsp;elementData,&nbsp;index,&nbsp;j);
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;elementCount--;
&nbsp;&nbsp;&nbsp;&nbsp;elementData[elementCount]&nbsp;=&nbsp;null;&nbsp;/*&nbsp;to&nbsp;let&nbsp;gc&nbsp;do&nbsp;its&nbsp;work&nbsp;*/
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>5.查找元素是否在栈中</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;synchronized&nbsp;int&nbsp;search(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;lastIndexOf(o);

&nbsp;&nbsp;&nbsp;&nbsp;//返回的是栈顶到该元素出现的位置的距离
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(i&nbsp;&gt;=&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;size()&nbsp;-&nbsp;i;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;-1;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>6.是否为空</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;boolean&nbsp;empty()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;size()&nbsp;==&nbsp;0;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Vector.size():</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;synchronized&nbsp;int&nbsp;size()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;elementCount;
}</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>总结</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Java 集合框架中的 Stack 具有以下特点：</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>继承自 Vector</p></li><li><p>有 5 种创建 Stack 的方法</p></li><li><p>采用数组实现</p></li><li><p>除了 push()，剩下的方法都是同步的</p></li></ul><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>用链表实现一个栈？</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">由于 Stack　是用数组实现的，我们用链表实现一下吧，这里就选择　<a href=\"http://blog.csdn.net/u011240877/article/details/52876543\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">LinkedList</a>&nbsp;来实现：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">/**
&nbsp;*&nbsp;description:LinkedList&nbsp;模拟&nbsp;Stack
&nbsp;*&nbsp;&lt;br/&gt;
&nbsp;*&nbsp;author:&nbsp;shixinzhang
&nbsp;*&nbsp;&lt;br/&gt;
&nbsp;*&nbsp;data:&nbsp;10/23/2016
&nbsp;*/
public&nbsp;class&nbsp;LinkedListStack&nbsp;extends&nbsp;LinkedList{
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;LinkedListStack(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;push(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.push(o);
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Object&nbsp;pop()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;super.pop();
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Object&nbsp;peek()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;super.peek();
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;isEmpty()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;super.isEmpty();
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;search(Object&nbsp;o){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;indexOf(o);
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">调用：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">@Test
public&nbsp;void&nbsp;testPush()&nbsp;throws&nbsp;Exception&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;LinkedListStack&nbsp;stack&nbsp;=&nbsp;new&nbsp;LinkedListStack();
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;栈是否为空:&nbsp;&quot;&nbsp;+&nbsp;stack.isEmpty());

&nbsp;&nbsp;&nbsp;&nbsp;stack.push(&quot;shixin&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;stack.push(&quot;好帅&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;stack.push(&quot;技巧一流&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;stack.push(&quot;haha&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;栈中元素:&nbsp;&quot;&nbsp;+&nbsp;stack);

&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;获取顶端元素&nbsp;peek&nbsp;:&quot;&nbsp;+&nbsp;stack.peek());

&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;顶端元素出栈&nbsp;pop&nbsp;:&quot;&nbsp;+&nbsp;stack.pop());

&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;出栈后栈内元素:&quot;&nbsp;+&nbsp;stack);

&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;search(好帅)&nbsp;的位置:&quot;&nbsp;+&nbsp;stack.search(&quot;好帅&quot;));
}
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">结果：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161023131850761\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">可以看到，我其实都没做什么哈哈，都是&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52876543\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">LinkedList</a>&nbsp;内部提供的方法，操作的都是在链表头部的元素，而不是尾部。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">其实 LinkedList 这个栈的特性也是继承自&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52865173\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">双端队列 Deque</a>，官方也推荐在使用栈时优先使用 Deque，而不是 Stack,有兴趣的可以去了解下。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Thanks</h2><p><br/></p>','0','2016-11-20 09:58:09') [ RunTime:0.0839s ]

[ 2016-11-20T21:58:10+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001310s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002150s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0073s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0015s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0004s ]

[ 2016-11-20T21:58:19+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000356s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000778s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0040s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T21:58:29+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001223s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002007s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0043s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0036s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0044s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 50  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('Java 集合深入理解（14）：Map 概述','87','50','<h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\">什么是 Map</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://lib.csdn.net/base/javaee\" class=\"replace_word\" title=\"Java EE知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Java</a>&nbsp;中的 Map 接口 是和&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52773577\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Collection 接口</a>&nbsp;同一等级的集合根接口，它 表示一个<strong style=\"box-sizing: border-box;\">键值对 (key-value) 的映射</strong>。类似数学中&nbsp;<strong style=\"box-sizing: border-box;\">函数&nbsp;</strong>的概念。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">数学中的函数：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161025222801415\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">一个 Map 中，任意一个 key 都有唯一确定的 value 与其对应，这个 key-value 的映射就是 map。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Map 中元素的顺序取决于迭代器迭代时的顺序，有的实现类保证了元素输入输出时的顺序，比如说 TreeMap；有的实现类则是无序的，比如 HashMap。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Map 的三个 collection 视图：</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161025193401464\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Map 接口提供了三种角度来分析 Map:</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>KeySet</p></li><li><p>Values</p></li><li><p>Entry</p></li></ul><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>1.KeySet</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">KeySet 是一个 Map 中键（key）的集合，<strong style=\"box-sizing: border-box;\">以 Set 的形式保存</strong>，不允许重复，因此键存储的对象需要重写 equals() 和 hashCode() 方法。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">在上图就是保存 AA, BB, CC, DD… 等键的集合。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">可以通过 Map.keySet() 方法获得。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>2.Values</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Values 是一个 Map 中值 (value) 的集合，<strong style=\"box-sizing: border-box;\">以 Collection 的形式保存</strong>，因此可以重复。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">在上图就是保存 90,90,56,78… 等值的集合。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">通过 Map.values() 方法获得。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>3.Entry</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Entry 是 Map 接口中的静态内部接口，表示一个键值对的映射，例如上图中 AA-90 这一组映射关系。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161025225202362\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Entry 具有上图中的方法：</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>getKey() , 获取这组映射中的键 key</p></li><li><p>getValue() , 获取这组映射中的值 value</p></li><li><p>setValue() , 修改这组映射中的值</p></li><li><p>hashCode() , 返回这个 Entry 的哈希值</p></li><li><p>equals() , 对比 key-value 是否相等</p></li></ul><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">通过 Map.entrySet() 方法获得的是一组 Entry 的集合，保存在 Set 中，所以 Map 中的 Entry 也不能重复。</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;Set&lt;Map.Entry&lt;K,V&gt;&gt;&nbsp;entrySet();</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Map 的三种遍历方式</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">根据 Map 提供的三种视图，可以有三种 map 遍历方式 :</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>1.使用 keySet 遍历：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;Set&nbsp;set&nbsp;=&nbsp;map.keySet();
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Object&nbsp;key&nbsp;:&nbsp;set)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(map.get(key));
&nbsp;&nbsp;&nbsp;&nbsp;}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>2.使用 values 遍历：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;Collection&nbsp;values&nbsp;=&nbsp;map.values();
&nbsp;&nbsp;&nbsp;&nbsp;Iterator&nbsp;iterator&nbsp;=&nbsp;values.iterator();
&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(iterator.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;value&nbsp;&quot;&nbsp;+&nbsp;iterator.next());
&nbsp;&nbsp;&nbsp;&nbsp;}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>3.使用 Entry 遍历</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;Set&nbsp;entrySet&nbsp;=&nbsp;map.entrySet();
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Object&nbsp;o&nbsp;:&nbsp;entrySet)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map.Entry&nbsp;entry&nbsp;=&nbsp;(Map.Entry)&nbsp;o;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(entry);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//key=value
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(entry.getKey()&nbsp;+&nbsp;&quot;&nbsp;/&nbsp;&quot;&nbsp;+&nbsp;entry.getValue());
&nbsp;&nbsp;&nbsp;&nbsp;}</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Map 的实现类</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161025193344555\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Map 的实现类主要有 4 种：</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>Hashtable&nbsp;<br/></p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p>古老，线程安全</p></li></ul><li><p>HashMap&nbsp;<br/></p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p>速度很快，但没有顺序</p></li></ul><li><p>TreeMap&nbsp;<br/></p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p>有序的，效率比 HashMap 低</p></li></ul><li><p>LinkedHashMap&nbsp;<br/></p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p>结合 HashMap 和 TreeMap 的有点，有序的同时效率也不错，仅比 HashMap 慢一点</p></li></ul></ul><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">其中后三个的区别很类似&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52929523\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Set 的实现类</a>：</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>HashSet</p></li><li><p>TreeSet</p></li><li><p>LinkedHashSet</p></li></ul><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Map 的每个实现类都应该实现 2 个构造方法：</p><ol style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>无参构造方法，用于创建一个空的 map</p></li><li><p>参数是 Map 的构造方法，用于创建一个包含参数内容的新 map</p></li></ol><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">第二种构造方法允许我们复制一个 map。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">虽然没有强制要求，但自定义 Map 实现类时最好都这样来。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>总结</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">Map 有以下特点：</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>没有重复的 key</p></li><li><p>每个 key 只能对应一个 value, 多个 key 可以对应一个 value</p></li><li><p>key,value 都可以是任何引用类型的数据，包括 null</p></li><li><p>Map 取代了古老的 Dictionary 抽象类</p></li></ul><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">注意：&nbsp;<br/>可以使用 Map 作为 Map 的值，但禁止使用 Map 作为 Map 的键。因为在这么复杂的 Map 中，equals() 方法和 hashCode() 比较难定义。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">另一方面，你应该尽量避免使用“可变”的类作为 Map 的键。如果你将一个对象作为键值并保存在 Map 中，之后又改变了其状态，那么 Map 就会产生混乱，你所保存的值可能丢失。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Thanks</h2><p><br/></p>','0','2016-11-20 09:58:29') [ RunTime:0.1023s ]

[ 2016-11-20T21:58:30+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000804s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001718s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0053s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0014s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0004s ]

[ 2016-11-20T21:58:40+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000439s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000907s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0043s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T21:58:52+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000394s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000774s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0043s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0044s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0035s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 50  [ RunTime:0.0002s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('Java 集合深入理解（15）：AbstractMap','87','50','<h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\">什么是 AbstractMap</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">AbstractMap 是&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52929523\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Map 接口的</a>的实现类之一，也是 HashMap, TreeMap, ConcurrentHashMap 等类的父类。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://img.blog.csdn.net/20161027110129194\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">AbstractMap 提供了 Map 的基本实现，使得我们以后要实现一个 Map 不用从头开始，只需要继承 AbstractMap, 然后按需求实现/重写对应方法即可。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">AbstarctMap 中唯一的抽象方法：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;abstract&nbsp;Set&lt;Entry&lt;K,V&gt;&gt;&nbsp;entrySet();</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">当我们要实现一个&nbsp;<strong style=\"box-sizing: border-box;\">不可变</strong>的 Map 时，只需要继承这个类，然后实现&nbsp;<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; padding: 2px 4px; font-size: 12.6px; color: rgb(63, 63, 63); background-color: rgba(128, 128, 128, 0.0745098); white-space: nowrap; border-radius: 0px;\">entrySet()</code>&nbsp;方法，这个方法返回一个保存所有 key-value 映射的 set。 通常这个 Set 不支持 add(), remove() 方法，Set 对应的迭代器也不支持 remove() 方法。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">如果想要实现一个&nbsp;<strong style=\"box-sizing: border-box;\">可变的</strong>&nbsp;Map,我们需要在上述操作外，重写 put() 方法，因为 默认不支持 put 操作：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;V&nbsp;put(K&nbsp;key,&nbsp;V&nbsp;value)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;UnsupportedOperationException();
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">而且 entrySet() 返回的 Set 的迭代器，也得实现 remove() 方法，因为 AbstractMap 中的 删除相关操作都需要调用该迭代器的 remove() 方法。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">正如其他集合推荐的那样，比如&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52829912\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">AbstractCollection 接口</a>&nbsp;，实现类最好提供两种构造方法：</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>一种是不含参数的，返回一个空 map</p></li><li><p>一种是以一个 map 为参数，返回一个和参数内容一样的 map</p></li></ul><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>AbstractMap 的成员变量</h2><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">transient&nbsp;volatile&nbsp;Set&lt;K&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keySet;
transient&nbsp;volatile&nbsp;Collection&lt;V&gt;&nbsp;values;</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">有两个成员变量：</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>keySet, 保存 map 中所有键的 Set</p></li><li><p>values, 保存 map 中所有值的集合</p></li></ul><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">他们都是 transient, volatile, 分别表示不可序列化、并发环境下变量的修改能够保证线程可见性。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">需要注意的是 volatile 只能保证可见性，不能保证原子性，需要保证操作是原子性操作，才能保证使用 volatile 关键字的程序在并发时能够正确执行。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>AbstractMap 的成员方法</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">AbstractMap 中实现了许多方法，实现类会根据自己不同的要求选择性的覆盖一些。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">接下来根据看看 AbstractMap 中的方法。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>1.添加</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;V&nbsp;put(K&nbsp;key,&nbsp;V&nbsp;value)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;UnsupportedOperationException();
}

public&nbsp;void&nbsp;putAll(Map&lt;?&nbsp;extends&nbsp;K,&nbsp;?&nbsp;extends&nbsp;V&gt;&nbsp;m)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Map.Entry&lt;?&nbsp;extends&nbsp;K,&nbsp;?&nbsp;extends&nbsp;V&gt;&nbsp;e&nbsp;:&nbsp;m.entrySet())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;put(e.getKey(),&nbsp;e.getValue());
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">可以看到默认是不支持添加操作的，实现类需要重写 put() 方法。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>2.删除</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;V&nbsp;remove(Object&nbsp;key)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//获取保存&nbsp;Map.Entry&nbsp;集合的迭代器
&nbsp;&nbsp;&nbsp;&nbsp;Iterator&lt;Entry&lt;K,V&gt;&gt;&nbsp;i&nbsp;=&nbsp;entrySet().iterator();
&nbsp;&nbsp;&nbsp;&nbsp;Entry&lt;K,V&gt;&nbsp;correctEntry&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;//遍历查找，当某个&nbsp;Entry&nbsp;的&nbsp;key&nbsp;和&nbsp;指定&nbsp;key&nbsp;一致时结束
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(key==null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(correctEntry==null&nbsp;&amp;&amp;&nbsp;i.hasNext())&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entry&lt;K,V&gt;&nbsp;e&nbsp;=&nbsp;i.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(e.getKey()==null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;correctEntry&nbsp;=&nbsp;e;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(correctEntry==null&nbsp;&amp;&amp;&nbsp;i.hasNext())&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entry&lt;K,V&gt;&nbsp;e&nbsp;=&nbsp;i.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(key.equals(e.getKey()))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;correctEntry&nbsp;=&nbsp;e;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//找到了，返回要删除的值
&nbsp;&nbsp;&nbsp;&nbsp;V&nbsp;oldValue&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(correctEntry&nbsp;!=null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue&nbsp;=&nbsp;correctEntry.getValue();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//调用迭代器的&nbsp;remove&nbsp;方法
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i.remove();
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;oldValue;
}

//调用&nbsp;Set.clear()&nbsp;方法清除
public&nbsp;void&nbsp;clear()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;entrySet().clear();
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>3.获取</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">//时间复杂度为&nbsp;O(n)
//许多实现类都重写了这个方法
public&nbsp;V&nbsp;get(Object&nbsp;key)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//使用&nbsp;Set&nbsp;迭代器进行遍历，根据&nbsp;key&nbsp;查找
&nbsp;&nbsp;&nbsp;&nbsp;Iterator&lt;Entry&lt;K,V&gt;&gt;&nbsp;i&nbsp;=&nbsp;entrySet().iterator();
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(key==null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(i.hasNext())&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entry&lt;K,V&gt;&nbsp;e&nbsp;=&nbsp;i.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(e.getKey()==null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;e.getValue();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(i.hasNext())&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entry&lt;K,V&gt;&nbsp;e&nbsp;=&nbsp;i.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(key.equals(e.getKey()))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;e.getValue();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;null;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>4.查询状态</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">//是否存在指定的&nbsp;key
//时间复杂度为&nbsp;O(n)
//许多实现类都重写了这个方法
public&nbsp;boolean&nbsp;containsKey(Object&nbsp;key)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//还是迭代器遍历，查找&nbsp;key，跟&nbsp;get()&nbsp;很像啊
&nbsp;&nbsp;&nbsp;&nbsp;Iterator&lt;Map.Entry&lt;K,V&gt;&gt;&nbsp;i&nbsp;=&nbsp;entrySet().iterator();
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(key==null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(i.hasNext())&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entry&lt;K,V&gt;&nbsp;e&nbsp;=&nbsp;i.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//getKey()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(e.getKey()==null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(i.hasNext())&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entry&lt;K,V&gt;&nbsp;e&nbsp;=&nbsp;i.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(key.equals(e.getKey()))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
}


//查询是否存在指定的值
public&nbsp;boolean&nbsp;containsValue(Object&nbsp;value)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;Iterator&lt;Entry&lt;K,V&gt;&gt;&nbsp;i&nbsp;=&nbsp;entrySet().iterator();
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(value==null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(i.hasNext())&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entry&lt;K,V&gt;&nbsp;e&nbsp;=&nbsp;i.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//getValue()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(e.getValue()==null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(i.hasNext())&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entry&lt;K,V&gt;&nbsp;e&nbsp;=&nbsp;i.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(value.equals(e.getValue()))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
}


public&nbsp;int&nbsp;size()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//使用&nbsp;Set.size()&nbsp;获取元素个数
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;entrySet().size();
}

public&nbsp;boolean&nbsp;isEmpty()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;size()&nbsp;==&nbsp;0;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>5.用于比较的 equals(), hashCode()</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">//内部用来测试&nbsp;SimpleEntry,&nbsp;SimpleImmutableEntry&nbsp;是否相等的方法
private&nbsp;static&nbsp;boolean&nbsp;eq(Object&nbsp;o1,&nbsp;Object&nbsp;o2)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;o1&nbsp;==&nbsp;null&nbsp;?&nbsp;o2&nbsp;==&nbsp;null&nbsp;:&nbsp;o1.equals(o2);
}

//判断指定的对象是否和当前&nbsp;Map&nbsp;一致
//为什么参数不是泛型而是&nbsp;对象呢
//据说是创建这个方法时还没有泛型&nbsp;-&nbsp;-
public&nbsp;boolean&nbsp;equals(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//引用指向同一个对象
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o&nbsp;==&nbsp;this)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;

&nbsp;&nbsp;&nbsp;&nbsp;//必须是&nbsp;Map&nbsp;的实现类
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!(o&nbsp;instanceof&nbsp;Map))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
&nbsp;&nbsp;&nbsp;&nbsp;//强转为&nbsp;Map
&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;?,?&gt;&nbsp;m&nbsp;=&nbsp;(Map&lt;?,?&gt;)&nbsp;o;
&nbsp;&nbsp;&nbsp;&nbsp;//元素个数必须一致
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(m.size()&nbsp;!=&nbsp;size())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;

&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//还是需要一个个遍历，对比
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Iterator&lt;Entry&lt;K,V&gt;&gt;&nbsp;i&nbsp;=&nbsp;entrySet().iterator();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(i.hasNext())&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//对比每个&nbsp;Entry&nbsp;的&nbsp;key&nbsp;和&nbsp;value
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entry&lt;K,V&gt;&nbsp;e&nbsp;=&nbsp;i.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;K&nbsp;key&nbsp;=&nbsp;e.getKey();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;V&nbsp;value&nbsp;=&nbsp;e.getValue();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(value&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//对比&nbsp;key,&nbsp;value
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!(m.get(key)==null&nbsp;&amp;&amp;&nbsp;m.containsKey(key)))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!value.equals(m.get(key)))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(ClassCastException&nbsp;unused)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(NullPointerException&nbsp;unused)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
}

//整个&nbsp;map&nbsp;的&nbsp;hashCode()&nbsp;
public&nbsp;int&nbsp;hashCode()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;h&nbsp;=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;//是所有&nbsp;Entry&nbsp;哈希值的和
&nbsp;&nbsp;&nbsp;&nbsp;Iterator&lt;Entry&lt;K,V&gt;&gt;&nbsp;i&nbsp;=&nbsp;entrySet().iterator();
&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(i.hasNext())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h&nbsp;+=&nbsp;i.next().hashCode();
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;h;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>6.获取三个主要的视图</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">获取所有的键:</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;Set&lt;K&gt;&nbsp;keySet()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//如果成员变量&nbsp;keySet&nbsp;为&nbsp;null,创建个空的&nbsp;AbstractSet
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(keySet&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keySet&nbsp;=&nbsp;new&nbsp;AbstractSet&lt;K&gt;()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Iterator&lt;K&gt;&nbsp;iterator()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;Iterator&lt;K&gt;()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Iterator&lt;Entry&lt;K,V&gt;&gt;&nbsp;i&nbsp;=&nbsp;entrySet().iterator();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;hasNext()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i.hasNext();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;K&nbsp;next()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i.next().getKey();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;remove()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i.remove();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;size()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;AbstractMap.this.size();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;isEmpty()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;AbstractMap.this.isEmpty();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;clear()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AbstractMap.this.clear();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;contains(Object&nbsp;k)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;AbstractMap.this.containsKey(k);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;keySet;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">获取所有的值:</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;Collection&lt;V&gt;&nbsp;values()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(values&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//没有就创建个空的&nbsp;AbstractCollection&nbsp;返回
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;values&nbsp;=&nbsp;new&nbsp;AbstractCollection&lt;V&gt;()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Iterator&lt;V&gt;&nbsp;iterator()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;Iterator&lt;V&gt;()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Iterator&lt;Entry&lt;K,V&gt;&gt;&nbsp;i&nbsp;=&nbsp;entrySet().iterator();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;hasNext()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i.hasNext();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;V&nbsp;next()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i.next().getValue();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;remove()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i.remove();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;size()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;AbstractMap.this.size();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;isEmpty()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;AbstractMap.this.isEmpty();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;clear()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AbstractMap.this.clear();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;contains(Object&nbsp;v)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;AbstractMap.this.containsValue(v);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;values;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">获取所有键值对，需要子类实现：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;abstract&nbsp;Set&lt;Entry&lt;K,V&gt;&gt;&nbsp;entrySet();</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>AbstractMap 中的内部类</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">正如&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52929523\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Map 接口</a>&nbsp;中有内部类 Map.Entry 一样， AbstractMap 也有两个内部类：</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>SimpleImmutableEntry, 表示一个不可变的键值对</p></li><li><p>SimpleEntry, 表示可变的键值对</p></li></ul><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">SimpleImmutableEntry，不可变的键值对,实现了 Map.Entry &lt; K,V&gt; 接口：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;static&nbsp;class&nbsp;SimpleImmutableEntry&lt;K,V&gt;
&nbsp;&nbsp;&nbsp;&nbsp;implements&nbsp;Entry&lt;K,V&gt;,&nbsp;java.io.Serializable
{
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;final&nbsp;long&nbsp;serialVersionUID&nbsp;=&nbsp;7138329143949025153L;
&nbsp;&nbsp;&nbsp;&nbsp;//key-value
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;final&nbsp;K&nbsp;key;
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;final&nbsp;V&nbsp;value;

&nbsp;&nbsp;&nbsp;&nbsp;//构造函数，传入&nbsp;key&nbsp;和&nbsp;value
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;SimpleImmutableEntry(K&nbsp;key,&nbsp;V&nbsp;value)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.key&nbsp;&nbsp;&nbsp;=&nbsp;key;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.value&nbsp;=&nbsp;value;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//构造函数2，传入一个&nbsp;Entry，赋值给本地的&nbsp;key&nbsp;和&nbsp;value
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;SimpleImmutableEntry(Entry&lt;?&nbsp;extends&nbsp;K,&nbsp;?&nbsp;extends&nbsp;V&gt;&nbsp;entry)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.key&nbsp;&nbsp;&nbsp;=&nbsp;entry.getKey();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.value&nbsp;=&nbsp;entry.getValue();
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//返回&nbsp;键
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;K&nbsp;getKey()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;key;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//返回&nbsp;值
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;V&nbsp;getValue()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;value;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//修改值，不可修改的&nbsp;Entry&nbsp;默认不支持这个操作
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;V&nbsp;setValue(V&nbsp;value)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;UnsupportedOperationException();
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//比较指定&nbsp;Entry&nbsp;和本地是否相等
&nbsp;&nbsp;&nbsp;&nbsp;//要求顺序，key-value&nbsp;必须全相等
&nbsp;&nbsp;&nbsp;&nbsp;//只要是&nbsp;Map&nbsp;的实现类即可，不同实现也可以相等
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;equals(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!(o&nbsp;instanceof&nbsp;Map.Entry))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map.Entry&lt;?,?&gt;&nbsp;e&nbsp;=&nbsp;(Map.Entry&lt;?,?&gt;)o;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;eq(key,&nbsp;e.getKey())&nbsp;&amp;&amp;&nbsp;eq(value,&nbsp;e.getValue());
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//哈希值
&nbsp;&nbsp;&nbsp;&nbsp;//是键的哈希与值的哈希的&nbsp;异或
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;hashCode()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(key&nbsp;&nbsp;&nbsp;==&nbsp;null&nbsp;?&nbsp;0&nbsp;:&nbsp;&nbsp;&nbsp;key.hashCode())&nbsp;^
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(value&nbsp;==&nbsp;null&nbsp;?&nbsp;0&nbsp;:&nbsp;value.hashCode());
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//返回一个&nbsp;String
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;toString()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;key&nbsp;+&nbsp;&quot;=&quot;&nbsp;+&nbsp;value;
&nbsp;&nbsp;&nbsp;&nbsp;}

}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">SimpleEntry, 可变的键值对:</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: &quot;Source Code Pro&quot;, monospace; padding: 10px; font-size: 14px; line-height: 1.45; word-break: break-all; color: rgb(51, 51, 51); background-color: rgba(128, 128, 128, 0.0470588); border: 1px solid rgba(128, 128, 128, 0.0745098); border-radius: 0px;\">public&nbsp;static&nbsp;class&nbsp;SimpleEntry&lt;K,V&gt;
&nbsp;&nbsp;&nbsp;&nbsp;implements&nbsp;Entry&lt;K,V&gt;,&nbsp;java.io.Serializable
{
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;final&nbsp;long&nbsp;serialVersionUID&nbsp;=&nbsp;-8499721149061103585L;

&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;final&nbsp;K&nbsp;key;
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;V&nbsp;value;

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;SimpleEntry(K&nbsp;key,&nbsp;V&nbsp;value)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.key&nbsp;&nbsp;&nbsp;=&nbsp;key;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.value&nbsp;=&nbsp;value;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;SimpleEntry(Entry&lt;?&nbsp;extends&nbsp;K,&nbsp;?&nbsp;extends&nbsp;V&gt;&nbsp;entry)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.key&nbsp;&nbsp;&nbsp;=&nbsp;entry.getKey();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.value&nbsp;=&nbsp;entry.getValue();
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;K&nbsp;getKey()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;key;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;V&nbsp;getValue()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;value;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//支持&nbsp;修改值
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;V&nbsp;setValue(V&nbsp;value)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;V&nbsp;oldValue&nbsp;=&nbsp;this.value;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.value&nbsp;=&nbsp;value;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;oldValue;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;equals(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!(o&nbsp;instanceof&nbsp;Map.Entry))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map.Entry&lt;?,?&gt;&nbsp;e&nbsp;=&nbsp;(Map.Entry&lt;?,?&gt;)o;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;eq(key,&nbsp;e.getKey())&nbsp;&amp;&amp;&nbsp;eq(value,&nbsp;e.getValue());
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;hashCode()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(key&nbsp;&nbsp;&nbsp;==&nbsp;null&nbsp;?&nbsp;0&nbsp;:&nbsp;&nbsp;&nbsp;key.hashCode())&nbsp;^
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(value&nbsp;==&nbsp;null&nbsp;?&nbsp;0&nbsp;:&nbsp;value.hashCode());
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;toString()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;key&nbsp;+&nbsp;&quot;=&quot;&nbsp;+&nbsp;value;
&nbsp;&nbsp;&nbsp;&nbsp;}

}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">SimpleEntry 与 SimpleImmutableEntry 唯一的区别就是支持 setValue() 操作。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>总结</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">和&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52829912\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">AbstractCollection 接口</a>，<a href=\"http://blog.csdn.net/u011240877/article/details/52834074\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">AbstractList 接口</a>&nbsp;作用相似， AbstractMap 是一个基础实现类，实现了 Map 的主要方法，默认不支持修改。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">常用的几种 Map, 比如 HashMap, TreeMap, LinkedHashMap 都继承自它。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Thanks</h2><p><br/></p>','0','2016-11-20 09:58:52') [ RunTime:0.1113s ]

[ 2016-11-20T21:58:53+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000992s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002093s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0063s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0034s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0016s ]

[ 2016-11-20T21:58:55+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000368s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000759s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0035s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T21:59:27+08:00 ] ::1 /think_blog/Home/Article/personInfo
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000569s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001134s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0054s ]
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0045s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,m.member_name AS `member_name`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name`,COUNT(ac.id) AS `article_comment_count` FROM `member` `m` LEFT JOIN article a ON a.member_id=m.id LEFT JOIN article_type at ON a.article_type_id=at.id LEFT JOIN article_comment ac ON a.id=ac.article_id  WHERE a.id = '209' GROUP BY a.id  [ RunTime:0.0006s ]

[ 2016-11-20T21:59:27+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000359s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000703s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0034s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T21:59:35+08:00 ] ::1 /think_blog/Home/Article/personEdit
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000568s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000923s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0048s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0043s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0053s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 50  [ RunTime:0.0002s ]
SQL: UPDATE `article` SET `title`='Java 集合深入理解（1）：AbstractList',`member_id`='87',`article_type_id`='50',`content`='<h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \">什么是 AbstractList</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161016143722734\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">AbstractList 继承自&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52829912\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">AbstractCollection 抽象类</a>，实现了&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52802849\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">List 接口</a>&nbsp;，是 ArrayList 和 AbstractSequentiaList 的父类。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">它实现了 List 的一些位置相关操作(比如 get,set,add,remove)，是<strong style=\"box-sizing: border-box;\">第一个</strong>实现随机访问方法的集合类，但<strong style=\"box-sizing: border-box;\">不支持添加和替换</strong>。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">在&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52829912\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">AbstractCollection 抽象类</a>&nbsp;中我们知道，AbstractCollection 要求子类必须实现两个方法： iterator() 和 size()。 AbstractList 实现了 iterator()方法：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;Iterator&nbsp;iterator()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;Itr();
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">但没有实现 size() 方法，此外还提供了一个抽象方法 get()：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;abstract&nbsp;E&nbsp;get(int&nbsp;location);</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">因此<strong style=\"box-sizing: border-box;\">子类必须要实现 get(), size() 方法</strong>。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">另外，如果子类想要能够修改元素，还需要重写 add(), set(), remove() 方法，否则会报&nbsp;<code style=\"box-sizing: border-box; font-family: \">UnsupportedOperationException</code>&nbsp;错。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>实现的方法</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">1.默认不支持的 add(), set(),remove():</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;boolean&nbsp;add(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;add(size(),&nbsp;e);
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
}

public&nbsp;void&nbsp;add(int&nbsp;index,&nbsp;E&nbsp;element)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;UnsupportedOperationException();
}

public&nbsp;E&nbsp;set(int&nbsp;index,&nbsp;E&nbsp;element)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;UnsupportedOperationException();
}

public&nbsp;E&nbsp;remove(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;UnsupportedOperationException();
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">2.indexOf(Object) 获取指定对象&nbsp;<strong style=\"box-sizing: border-box;\">首次出现</strong>&nbsp;的索引：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;int&nbsp;indexOf(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//获取&nbsp;ListIterator，此时游标位置为&nbsp;0&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;ListIterator&nbsp;it&nbsp;=&nbsp;listIterator();
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o==null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//向后遍历
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(it.hasNext())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(it.next()==null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//返回游标的前面元素索引
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;it.previousIndex();
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(it.hasNext())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o.equals(it.next()))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;it.previousIndex();
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;-1;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">在&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52752589\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">ListIterator</a>&nbsp;中我们介绍了&nbsp;<strong style=\"box-sizing: border-box;\">游标</strong>&nbsp;的概念，每次调用&nbsp;<code style=\"box-sizing: border-box; font-family: \">listIterator.next()</code>&nbsp;方法 游标 都会后移一位，当&nbsp;<code style=\"box-sizing: border-box; font-family: \">listIterator.next() == o</code>&nbsp;时（即找到我们需要的的元素），游标已经在 o 的后面，所以需要返回 游标的&nbsp;<code style=\"box-sizing: border-box; font-family: \">previousIndex()</code>.</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">3.lastIndexOf(Object) 获取指定对象最后一次出现的位置:</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;int&nbsp;lastIndexOf(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//获取&nbsp;ListIterator，此时游标在最后一位
&nbsp;&nbsp;&nbsp;&nbsp;ListIterator&nbsp;it&nbsp;=&nbsp;listIterator(size());
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o==null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//向前遍历
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(it.hasPrevious())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(it.previous()==null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//返回&nbsp;it.nextIndex()&nbsp;原因类似&nbsp;2
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;it.nextIndex();
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(it.hasPrevious())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o.equals(it.previous()))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;it.nextIndex();
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;-1;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">4.clear(), removeRange(int, int), 全部/范围 删除元素：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;void&nbsp;clear()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//传入由子类实现的&nbsp;size()
&nbsp;&nbsp;&nbsp;&nbsp;removeRange(0,&nbsp;size());
}

protected&nbsp;void&nbsp;removeRange(int&nbsp;fromIndex,&nbsp;int&nbsp;toIndex)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//获取&nbsp;ListIterator&nbsp;来进行迭代删除
&nbsp;&nbsp;&nbsp;&nbsp;ListIterator&nbsp;it&nbsp;=&nbsp;listIterator(fromIndex);
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i=0,&nbsp;n=toIndex-fromIndex;&nbsp;i&lt;n;&nbsp;i++)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;it.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;it.remove();
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">5.addAll(int,Collection</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>两种内部迭代器</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">与其他集合实现类不同，AbstractList 内部已经提供了 Iterator, ListIterator 迭代器的实现类，分别为 Itr, ListItr, 不需要我们去帮他实现。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Itr 代码分析：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">private&nbsp;class&nbsp;Itr&nbsp;implements&nbsp;Iterator&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//游标
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;cursor&nbsp;=&nbsp;0;

&nbsp;&nbsp;&nbsp;&nbsp;//上一次迭代到的元素的位置，每次使用完就会置为&nbsp;-1
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;lastRet&nbsp;=&nbsp;-1;

&nbsp;&nbsp;&nbsp;&nbsp;//用来判断是否发生并发操作的标示，如果这两个值不一致，就会报错
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;expectedModCount&nbsp;=&nbsp;modCount;

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;hasNext()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cursor&nbsp;!=&nbsp;size();
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;E&nbsp;next()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//时刻检查是否有并发修改操作
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;cursor;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//调用&nbsp;子类实现的&nbsp;get()&nbsp;方法获取元素
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;next&nbsp;=&nbsp;get(i);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//有迭代操作后就会记录上次迭代的位置
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastRet&nbsp;=&nbsp;i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor&nbsp;=&nbsp;i&nbsp;+&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;next;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IndexOutOfBoundsException&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;remove()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(lastRet&nbsp;&lt;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IllegalStateException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//调用需要子类实现的&nbsp;remove()方法
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AbstractList.this.remove(lastRet);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(lastRet&nbsp;&lt;&nbsp;cursor)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor--;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//删除后&nbsp;上次迭代的记录就会置为&nbsp;-1
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastRet&nbsp;=&nbsp;-1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expectedModCount&nbsp;=&nbsp;modCount;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IndexOutOfBoundsException&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//检查是否有并发修改
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;void&nbsp;checkForComodification()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(modCount&nbsp;!=&nbsp;expectedModCount)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">可以看到 Itr 只是简单实现了 Iterator 的 next, remove 方法。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>ListItr 代码分析:</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">//ListItr&nbsp;是&nbsp;Itr&nbsp;的增强版
private&nbsp;class&nbsp;ListItr&nbsp;extends&nbsp;Itr&nbsp;implements&nbsp;ListIterator&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//多了个指定游标位置的构造参数，怎么都不检查是否越界！
&nbsp;&nbsp;&nbsp;&nbsp;ListItr(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor&nbsp;=&nbsp;index;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//除了一开始都有前面元素
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;hasPrevious()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cursor&nbsp;!=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;E&nbsp;previous()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//获取游标前面一位元素
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;cursor&nbsp;-&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;previous&nbsp;=&nbsp;get(i);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//为什么上次操作的位置是&nbsp;游标当前位置呢？哦，看错了，游标也前移了
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastRet&nbsp;=&nbsp;cursor&nbsp;=&nbsp;i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;previous;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IndexOutOfBoundsException&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//下一个元素的位置就是当前游标所在位置
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;nextIndex()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cursor;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;previousIndex()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cursor-1;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;set(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(lastRet&nbsp;&lt;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IllegalStateException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//子类得检查&nbsp;lasRet&nbsp;是否为&nbsp;-1
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AbstractList.this.set(lastRet,&nbsp;e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expectedModCount&nbsp;=&nbsp;modCount;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IndexOutOfBoundsException&nbsp;ex)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;add(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;cursor;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AbstractList.this.add(i,&nbsp;e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//又置为&nbsp;-1&nbsp;了
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastRet&nbsp;=&nbsp;-1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor&nbsp;=&nbsp;i&nbsp;+&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expectedModCount&nbsp;=&nbsp;modCount;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IndexOutOfBoundsException&nbsp;ex)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">ListItr 在 Itr 基础上多了 向前 和 set 操作。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>两种内部类</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">在 subList 方法中我们发现在切分 子序列时会分为两类，RandomAccess or not：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;List&nbsp;subList(int&nbsp;fromIndex,&nbsp;int&nbsp;toIndex)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(this&nbsp;instanceof&nbsp;RandomAccess&nbsp;?
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;RandomAccessSubList&lt;&gt;(this,&nbsp;fromIndex,&nbsp;toIndex)&nbsp;:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;SubList&lt;&gt;(this,&nbsp;fromIndex,&nbsp;toIndex));
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>RandomAccess</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;interface&nbsp;RandomAccess&nbsp;{
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">RandomAccess 是一个空的接口，它用来标识某个类是否支持&nbsp;<strong style=\"box-sizing: border-box;\">随机访问</strong>（随机访问，相对比“按顺序访问”）。一个支持随机访问的类明显可以使用更加高效的<a href=\"http://lib.csdn.net/base/datastructure\" class=\"replace_word\" title=\"算法与数据结构知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">算法</a>。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">List 中支持随机访问最佳的例子就是 ArrayList, 它的<a href=\"http://lib.csdn.net/base/datastructure\" class=\"replace_word\" title=\"算法与数据结构知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">数据结构</a>使得 get(), set(), add()等方法的时间复杂度都是 O(1);</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">反例就是 LinkedList, 链表结构使得它不支持随机访问，只能按序访问，因此在一些操作上性能略逊一筹。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">通常在操作一个 List 对象时，通常会判断是否支持&nbsp;<strong style=\"box-sizing: border-box;\">随机访问</strong>，也就是<em style=\"box-sizing: border-box;\">* 是否为 RandomAccess 的实例*</em>，从而使用不同的算法。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">比如遍历，实现了 RandomAccess 的集合使用 get():</p><pre class=\"prettyprint\" style=\"white-space: nowrap; word-wrap: break-word; box-sizing: border-box; position: relative; overflow-y: hidden; overflow-x: auto; margin-top: 0px; margin-bottom: 1.1em; font-family: \">for&nbsp;(int&nbsp;i=0,&nbsp;n=list.size();&nbsp;i&nbsp;&lt;&nbsp;n;&nbsp;i++)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list.get(i);1212</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><strong style=\"box-sizing: border-box;\">比用迭代器更快</strong>：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">&nbsp;&nbsp;for&nbsp;(Iterator&nbsp;i=list.iterator();&nbsp;i.hasNext();&nbsp;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i.next();</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">实现了 RandomAccess 接口的类有：&nbsp;<br/>ArrayList, AttributeList, CopyOnWriteArrayList, Vector, Stack 等。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>SubList 源码：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">//&nbsp;AbstractList&nbsp;的子类，表示父&nbsp;List&nbsp;的一部分
class&nbsp;SubList&nbsp;extends&nbsp;AbstractList&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;final&nbsp;AbstractList&nbsp;l;
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;final&nbsp;int&nbsp;offset;
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;int&nbsp;size;

//构造参数:
//list&nbsp;：父&nbsp;List
//fromIndex&nbsp;:&nbsp;从父&nbsp;List&nbsp;中开始的位置
//toIndex&nbsp;:&nbsp;在父&nbsp;List&nbsp;中哪里结束
SubList(AbstractList&nbsp;list,&nbsp;int&nbsp;fromIndex,&nbsp;int&nbsp;toIndex)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(fromIndex&nbsp;&nbsp;list.size())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IndexOutOfBoundsException(&quot;toIndex&nbsp;=&nbsp;&quot;&nbsp;+&nbsp;toIndex);
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(fromIndex&nbsp;&gt;&nbsp;toIndex)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IllegalArgumentException(&quot;fromIndex(&quot;&nbsp;+&nbsp;fromIndex&nbsp;+
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;)&nbsp;&gt;&nbsp;toIndex(&quot;&nbsp;+&nbsp;toIndex&nbsp;+&nbsp;&quot;)&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;l&nbsp;=&nbsp;list;
&nbsp;&nbsp;&nbsp;&nbsp;offset&nbsp;=&nbsp;fromIndex;
&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;=&nbsp;toIndex&nbsp;-&nbsp;fromIndex;
&nbsp;&nbsp;&nbsp;&nbsp;//和父类使用同一个&nbsp;modCount
&nbsp;&nbsp;&nbsp;&nbsp;this.modCount&nbsp;=&nbsp;l.modCount;
}

//使用父类的&nbsp;set()
public&nbsp;E&nbsp;set(int&nbsp;index,&nbsp;E&nbsp;element)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;rangeCheck(index);
&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;l.set(index+offset,&nbsp;element);
}

//使用父类的&nbsp;get()
public&nbsp;E&nbsp;get(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;rangeCheck(index);
&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;l.get(index+offset);
}

//子&nbsp;List&nbsp;的大小
public&nbsp;int&nbsp;size()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;size;
}

public&nbsp;void&nbsp;add(int&nbsp;index,&nbsp;E&nbsp;element)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;rangeCheckForAdd(index);
&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;//根据子&nbsp;List&nbsp;开始的位置，加上偏移量，直接在父&nbsp;List&nbsp;上进行添加
&nbsp;&nbsp;&nbsp;&nbsp;l.add(index+offset,&nbsp;element);
&nbsp;&nbsp;&nbsp;&nbsp;this.modCount&nbsp;=&nbsp;l.modCount;
&nbsp;&nbsp;&nbsp;&nbsp;size++;
}

public&nbsp;E&nbsp;remove(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;rangeCheck(index);
&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;//根据子&nbsp;List&nbsp;开始的位置，加上偏移量，直接在父&nbsp;List&nbsp;上进行删除
&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;result&nbsp;=&nbsp;l.remove(index+offset);
&nbsp;&nbsp;&nbsp;&nbsp;this.modCount&nbsp;=&nbsp;l.modCount;
&nbsp;&nbsp;&nbsp;&nbsp;size--;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result;
}

protected&nbsp;void&nbsp;removeRange(int&nbsp;fromIndex,&nbsp;int&nbsp;toIndex)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;//调用父类的&nbsp;局部删除
&nbsp;&nbsp;&nbsp;&nbsp;l.removeRange(fromIndex+offset,&nbsp;toIndex+offset);
&nbsp;&nbsp;&nbsp;&nbsp;this.modCount&nbsp;=&nbsp;l.modCount;
&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;-=&nbsp;(toIndex-fromIndex);
}

public&nbsp;boolean&nbsp;addAll(Collection&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;addAll(size,&nbsp;c);
}

public&nbsp;boolean&nbsp;addAll(int&nbsp;index,&nbsp;Collection&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;rangeCheckForAdd(index);
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;cSize&nbsp;=&nbsp;c.size();
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(cSize==0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;

&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;//还是使用的父类&nbsp;addAll()
&nbsp;&nbsp;&nbsp;&nbsp;l.addAll(offset+index,&nbsp;c);
&nbsp;&nbsp;&nbsp;&nbsp;this.modCount&nbsp;=&nbsp;l.modCount;
&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;+=&nbsp;cSize;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
}

public&nbsp;Iterator&nbsp;iterator()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;listIterator();
}

public&nbsp;ListIterator&nbsp;listIterator(final&nbsp;int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;rangeCheckForAdd(index);

&nbsp;&nbsp;&nbsp;&nbsp;//创建一个&nbsp;匿名内部&nbsp;ListIterator，指向的还是&nbsp;父类的&nbsp;listIterator
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;ListIterator()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;final&nbsp;ListIterator&nbsp;i&nbsp;=&nbsp;l.listIterator(index+offset);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;hasNext()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;nextIndex()&nbsp;=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;E&nbsp;previous()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(hasPrevious())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i.previous();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;nextIndex()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i.nextIndex()&nbsp;-&nbsp;offset;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;previousIndex()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i.previousIndex()&nbsp;-&nbsp;offset;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;remove()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i.remove();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SubList.this.modCount&nbsp;=&nbsp;l.modCount;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size--;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;set(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i.set(e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;add(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i.add(e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SubList.this.modCount&nbsp;=&nbsp;l.modCount;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size++;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;};
}

public&nbsp;List&nbsp;subList(int&nbsp;fromIndex,&nbsp;int&nbsp;toIndex)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;SubList&lt;&gt;(this,&nbsp;fromIndex,&nbsp;toIndex);
}

private&nbsp;void&nbsp;rangeCheck(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(index&nbsp;=&nbsp;size)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IndexOutOfBoundsException(outOfBoundsMsg(index));
}

private&nbsp;void&nbsp;rangeCheckForAdd(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(index&nbsp;&nbsp;size)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IndexOutOfBoundsException(outOfBoundsMsg(index));
}

private&nbsp;String&nbsp;outOfBoundsMsg(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;Index:&nbsp;&quot;+index+&quot;,&nbsp;Size:&nbsp;&quot;+size;
}

private&nbsp;void&nbsp;checkForComodification()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(this.modCount&nbsp;!=&nbsp;l.modCount)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
}
}</pre><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>总结：SubList 就是吭老族，虽然自立门户，等到要干活时，使用的都是父类的方法，父类的数据。</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">所以可以通过它来间接操作父 List。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>RandomAccessSubList 源码：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">class&nbsp;RandomAccessSubList&nbsp;extends&nbsp;SubList&nbsp;implements&nbsp;RandomAccess&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;RandomAccessSubList(AbstractList&nbsp;list,&nbsp;int&nbsp;fromIndex,&nbsp;int&nbsp;toIndex)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(list,&nbsp;fromIndex,&nbsp;toIndex);
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;List&nbsp;subList(int&nbsp;fromIndex,&nbsp;int&nbsp;toIndex)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;RandomAccessSubList&lt;&gt;(this,&nbsp;fromIndex,&nbsp;toIndex);
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>RandomAccessSubList 只不过是在 SubList 之外加了个 RandomAccess 的标识，表明他可以支持随机访问而已，别无他尔。</h4><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>总结：</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161016225931216\" alt=\"这里写图片描述\" title=\"\"/></p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>AbstractList 作为 List 家族的中坚力量</h4><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: \" class=\" list-paddingleft-2\"><li><p>既实现了 List 的期望</p></li><li><p>也继承了 AbstractCollection 的传统</p></li><li><p>还创建了内部的迭代器 Itr, ListItr</p></li><li><p>还有两个内部子类 SubList 和 RandomAccessSublist；</p></li></ul><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">百废俱兴，AbstractList 博采众长，制定了 List 家族的家规，List 家族基础已经搭建的差不多了。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">List 家族在 AbstractList 的指导下出了几个英豪，成为了&nbsp;<a href=\"http://lib.csdn.net/base/javaee\" class=\"replace_word\" title=\"Java EE知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Java</a>&nbsp;世界的栋梁之才，具体细节，我们下回再续。</p><p><br/></p>' WHERE `id` = 209 [ RunTime:0.1780s ]

[ 2016-11-20T21:59:36+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001063s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001939s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0067s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0016s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0006s ]

[ 2016-11-20T21:59:37+08:00 ] ::1 /think_blog/Home/Article/personInfo
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000815s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001317s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0042s ]
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0052s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,m.member_name AS `member_name`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name`,COUNT(ac.id) AS `article_comment_count` FROM `member` `m` LEFT JOIN article a ON a.member_id=m.id LEFT JOIN article_type at ON a.article_type_id=at.id LEFT JOIN article_comment ac ON a.id=ac.article_id  WHERE a.id = '210' GROUP BY a.id  [ RunTime:0.0006s ]

[ 2016-11-20T21:59:37+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000383s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000706s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0035s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T21:59:42+08:00 ] ::1 /think_blog/Home/Article/personEdit
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000620s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001289s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0060s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0051s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0044s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 50  [ RunTime:0.0002s ]
SQL: UPDATE `article` SET `title`='Java 集合深入理解（2）：ArrayList',`member_id`='87',`article_type_id`='50',`content`='<h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \">什么是 ArrayList</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161018135020035\" alt=\"这里写图片描述\" title=\"\"/>&nbsp;<br/><img src=\"http://img.blog.csdn.net/20161018134856596\" alt=\"这里写图片描述\" title=\"\"/></p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>ArrayList 是 Java 集合框架中&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52802849\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">List接口</a>&nbsp;的一个实现类。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>可以说 ArrayList 是我们使用最多的 List 集合，它有以下特点：</h4><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: \" class=\" list-paddingleft-2\"><li><p>容量不固定，想放多少放多少（当然有最大阈值，但一般达不到）</p></li><li><p>有序的（元素输出顺序与输入顺序一致）</p></li><li><p>元素可以为 null</p></li><li><p>效率高&nbsp;<br/></p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p>size(), isEmpty(), get(), set() iterator(), ListIterator() 方法的时间复杂度都是 O(1)</p></li><li><p>add() 添加操作的时间复杂度平均为 O(n)</p></li><li><p>其他所有操作的时间复杂度几乎都是 O(n)</p></li></ul><li><p>占用空间更小&nbsp;<br/></p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p>对比 LinkedList，不用占用额外空间维护链表结构</p></li></ul></ul><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>那 ArrayList 为什么有这些优点呢？我们通过源码一一解析。</h4><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>ArrayList 的成员变量</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161018135844873\" alt=\"这里写图片描述\" title=\"\"/></p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>1.底层数据结构，数组：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">transient&nbsp;Object[]&nbsp;elementData</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">由于数组类型为 Object，所以允许添加 null 。&nbsp;<br/>transient 说明这个数组无法序列化。&nbsp;<br/>初始时为 DEFAULTCAPACITY_EMPTY_ELEMENTDATA 。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>2.默认的空数组：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">private&nbsp;static&nbsp;final&nbsp;Object[]&nbsp;DEFAULTCAPACITY_EMPTY_ELEMENTDATA&nbsp;=&nbsp;{};

private&nbsp;static&nbsp;final&nbsp;Object[]&nbsp;EMPTY_ELEMENTDATA&nbsp;=&nbsp;{};</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">不清楚它俩啥区别。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>3.数组初始容量为 10：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">private&nbsp;static&nbsp;final&nbsp;int&nbsp;DEFAULT_CAPACITY&nbsp;=&nbsp;10;</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>4.数组中当前元素个数：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">private&nbsp;int&nbsp;size;</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">size &lt;= capacity</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>5.数组最大容量：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">private&nbsp;static&nbsp;final&nbsp;int&nbsp;MAX_ARRAY_SIZE&nbsp;=&nbsp;Integer.MAX_VALUE&nbsp;-&nbsp;8;</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><code style=\"box-sizing: border-box; font-family: \">Integer.MAX_VALUE</code>&nbsp;= 0x7fffffff</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">换算成二进制： 2^31 - 1，1111111111111111111111111111111</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">十进制就是 ：2147483647，二十一亿多。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">一些虚拟器需要在数组前加个 头标签，所以减去 8 。&nbsp;<br/>当想要分配比 MAX_ARRAY_SIZE 大的个数就会报&nbsp;<code style=\"box-sizing: border-box; font-family: \">OutOfMemoryError</code>。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>ArrayList 的关键方法</h2><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>1.构造函数</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">ArrayList 有三种构造函数：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">//初始为空数组
public&nbsp;ArrayList()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;this.elementData&nbsp;=&nbsp;DEFAULTCAPACITY_EMPTY_ELEMENTDATA;
}

//根据指定容量，创建个对象数组
public&nbsp;ArrayList(int&nbsp;initialCapacity)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(initialCapacity&nbsp;&gt;&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.elementData&nbsp;=&nbsp;new&nbsp;Object[initialCapacity];
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if&nbsp;(initialCapacity&nbsp;==&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.elementData&nbsp;=&nbsp;EMPTY_ELEMENTDATA;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IllegalArgumentException(&quot;Illegal&nbsp;Capacity:&nbsp;&quot;+
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initialCapacity);
&nbsp;&nbsp;&nbsp;&nbsp;}
}

//直接创建和指定集合一样内容的&nbsp;ArrayList
public&nbsp;ArrayList(Collection&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;elementData&nbsp;=&nbsp;c.toArray();
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;((size&nbsp;=&nbsp;elementData.length)&nbsp;!=&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;c.toArray&nbsp;有可能不返回一个&nbsp;Object&nbsp;数组
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(elementData.getClass()&nbsp;!=&nbsp;Object[].class)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//使用&nbsp;Arrays.copy&nbsp;方法拷创建一个&nbsp;Object&nbsp;数组
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementData&nbsp;=&nbsp;Arrays.copyOf(elementData,&nbsp;size,&nbsp;Object[].class);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;replace&nbsp;with&nbsp;empty&nbsp;array.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.elementData&nbsp;=&nbsp;EMPTY_ELEMENTDATA;
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>2.添加元素：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;boolean&nbsp;add(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//对数组的容量进行调整
&nbsp;&nbsp;&nbsp;&nbsp;ensureCapacityInternal(size&nbsp;+&nbsp;1);&nbsp;&nbsp;//&nbsp;Increments&nbsp;modCount!!
&nbsp;&nbsp;&nbsp;&nbsp;elementData[size++]&nbsp;=&nbsp;e;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
}

//在指定位置添加一个元素
public&nbsp;void&nbsp;add(int&nbsp;index,&nbsp;E&nbsp;element)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;rangeCheckForAdd(index);

&nbsp;&nbsp;&nbsp;&nbsp;//对数组的容量进行调整
&nbsp;&nbsp;&nbsp;&nbsp;ensureCapacityInternal(size&nbsp;+&nbsp;1);&nbsp;&nbsp;//&nbsp;Increments&nbsp;modCount!!
&nbsp;&nbsp;&nbsp;&nbsp;//整体后移一位，效率不太好啊
&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(elementData,&nbsp;index,&nbsp;elementData,&nbsp;index&nbsp;+&nbsp;1,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;-&nbsp;index);
&nbsp;&nbsp;&nbsp;&nbsp;elementData[index]&nbsp;=&nbsp;element;
&nbsp;&nbsp;&nbsp;&nbsp;size++;
}


//添加一个集合
public&nbsp;boolean&nbsp;addAll(Collection&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//把该集合转为对象数组
&nbsp;&nbsp;&nbsp;&nbsp;Object[]&nbsp;a&nbsp;=&nbsp;c.toArray();
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;numNew&nbsp;=&nbsp;a.length;
&nbsp;&nbsp;&nbsp;&nbsp;//增加容量
&nbsp;&nbsp;&nbsp;&nbsp;ensureCapacityInternal(size&nbsp;+&nbsp;numNew);&nbsp;&nbsp;//&nbsp;Increments&nbsp;modCount
&nbsp;&nbsp;&nbsp;&nbsp;//挨个向后迁移
&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(a,&nbsp;0,&nbsp;elementData,&nbsp;size,&nbsp;numNew);
&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;+=&nbsp;numNew;
&nbsp;&nbsp;&nbsp;&nbsp;//新数组有元素，就返回&nbsp;true
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;numNew&nbsp;!=&nbsp;0;
}

//在指定位置，添加一个集合
public&nbsp;boolean&nbsp;addAll(int&nbsp;index,&nbsp;Collection&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;rangeCheckForAdd(index);

&nbsp;&nbsp;&nbsp;&nbsp;Object[]&nbsp;a&nbsp;=&nbsp;c.toArray();
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;numNew&nbsp;=&nbsp;a.length;
&nbsp;&nbsp;&nbsp;&nbsp;ensureCapacityInternal(size&nbsp;+&nbsp;numNew);&nbsp;&nbsp;//&nbsp;Increments&nbsp;modCount

&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;numMoved&nbsp;=&nbsp;size&nbsp;-&nbsp;index;
&nbsp;&nbsp;&nbsp;&nbsp;//原来的数组挨个向后迁移
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(numMoved&nbsp;&gt;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(elementData,&nbsp;index,&nbsp;elementData,&nbsp;index&nbsp;+&nbsp;numNew,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numMoved);
&nbsp;&nbsp;&nbsp;&nbsp;//把新的集合数组&nbsp;添加到指定位置
&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(a,&nbsp;0,&nbsp;elementData,&nbsp;index,&nbsp;numNew);
&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;+=&nbsp;numNew;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;numNew&nbsp;!=&nbsp;0;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">虽说 System.arraycopy 是底层方法，但每次添加都后移一位还是不太好。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>3.对数组的容量进行调整：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;void&nbsp;ensureCapacity(int&nbsp;minCapacity)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;minExpand&nbsp;=&nbsp;(elementData&nbsp;!=&nbsp;DEFAULTCAPACITY_EMPTY_ELEMENTDATA)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;不是默认的数组，说明已经添加了元素
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;?&nbsp;0
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;默认的容量
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;DEFAULT_CAPACITY;

&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(minCapacity&nbsp;&gt;&nbsp;minExpand)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//当前元素个数比默认容量大
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ensureExplicitCapacity(minCapacity);
&nbsp;&nbsp;&nbsp;&nbsp;}
}

private&nbsp;void&nbsp;ensureCapacityInternal(int&nbsp;minCapacity)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//还没有添加元素
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(elementData&nbsp;==&nbsp;DEFAULTCAPACITY_EMPTY_ELEMENTDATA)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//最小容量取默认容量和&nbsp;当前元素个数&nbsp;最大值
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minCapacity&nbsp;=&nbsp;Math.max(DEFAULT_CAPACITY,&nbsp;minCapacity);
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;ensureExplicitCapacity(minCapacity);
}

private&nbsp;void&nbsp;ensureExplicitCapacity(int&nbsp;minCapacity)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;

&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;容量不够了，需要扩容
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(minCapacity&nbsp;-&nbsp;elementData.length&nbsp;&gt;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grow(minCapacity);
}</pre><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>我们可以主动调用 ensureCapcity 来增加 ArrayList 对象的容量，这样就避免添加元素满了时扩容、挨个复制后移等消耗。</h4><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>4.扩容：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">private&nbsp;void&nbsp;grow(int&nbsp;minCapacity)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;oldCapacity&nbsp;=&nbsp;elementData.length;
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;1.5&nbsp;倍&nbsp;原来容量
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;newCapacity&nbsp;=&nbsp;oldCapacity&nbsp;+&nbsp;(oldCapacity&nbsp;&gt;&gt;&nbsp;1);

&nbsp;&nbsp;&nbsp;&nbsp;//如果当前容量还没达到&nbsp;1.5&nbsp;倍旧容量，就使用当前容量，省的站那么多地方
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(newCapacity&nbsp;-&nbsp;minCapacity&nbsp;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//最大容量可以是&nbsp;Integer.MAX_VALUE
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newCapacity&nbsp;=&nbsp;hugeCapacity(minCapacity);

&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;minCapacity&nbsp;一般跟元素个数&nbsp;size&nbsp;很接近，所以新建的数组容量为&nbsp;newCapacity&nbsp;更宽松些
&nbsp;&nbsp;&nbsp;&nbsp;elementData&nbsp;=&nbsp;Arrays.copyOf(elementData,&nbsp;newCapacity);
}

private&nbsp;static&nbsp;int&nbsp;hugeCapacity(int&nbsp;minCapacity)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(minCapacity&nbsp;&nbsp;MAX_ARRAY_SIZE)&nbsp;?
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer.MAX_VALUE&nbsp;:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MAX_ARRAY_SIZE;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>5.查询，修改等操作，直接根据角标对数组操作，都很快：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">E&nbsp;elementData(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(E)&nbsp;elementData[index];
}

//获取
public&nbsp;E&nbsp;get(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;rangeCheck(index);
&nbsp;&nbsp;&nbsp;&nbsp;//直接根据数组角标返回元素，快的一比
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;elementData(index);
}

//修改
public&nbsp;E&nbsp;set(int&nbsp;index,&nbsp;E&nbsp;element)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;rangeCheck(index);
&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;oldValue&nbsp;=&nbsp;elementData(index);

&nbsp;&nbsp;&nbsp;&nbsp;//直接对数组操作
&nbsp;&nbsp;&nbsp;&nbsp;elementData[index]&nbsp;=&nbsp;element;
&nbsp;&nbsp;&nbsp;&nbsp;//返回原来的值
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;oldValue;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>6.删除，还是有点慢：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">//根据位置删除
public&nbsp;E&nbsp;remove(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;rangeCheck(index);

&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;oldValue&nbsp;=&nbsp;elementData(index);

&nbsp;&nbsp;&nbsp;&nbsp;//挨个往前移一位
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;numMoved&nbsp;=&nbsp;size&nbsp;-&nbsp;index&nbsp;-&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(numMoved&nbsp;&gt;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(elementData,&nbsp;index+1,&nbsp;elementData,&nbsp;index,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numMoved);
&nbsp;&nbsp;&nbsp;&nbsp;//原数组中最后一个元素删掉
&nbsp;&nbsp;&nbsp;&nbsp;elementData[--size]&nbsp;=&nbsp;null;&nbsp;//&nbsp;clear&nbsp;to&nbsp;let&nbsp;GC&nbsp;do&nbsp;its&nbsp;work

&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;oldValue;
}

//删除某个元素
public&nbsp;boolean&nbsp;remove(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//挨个遍历找到目标
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;index&nbsp;=&nbsp;0;&nbsp;index&nbsp;&lt;&nbsp;size;&nbsp;index++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(elementData[index]&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//快速删除
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fastRemove(index);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;index&nbsp;=&nbsp;0;&nbsp;index&nbsp;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(elementData,&nbsp;index+1,&nbsp;elementData,&nbsp;index,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numMoved);
&nbsp;&nbsp;&nbsp;&nbsp;elementData[--size]&nbsp;=&nbsp;null;&nbsp;//&nbsp;clear&nbsp;to&nbsp;let&nbsp;GC&nbsp;do&nbsp;its&nbsp;work
}

//保留公共的
public&nbsp;boolean&nbsp;retainAll(Collection&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;Objects.requireNonNull(c);
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;batchRemove(c,&nbsp;true);
}

//删除或者保留指定集合中的元素
private&nbsp;boolean&nbsp;batchRemove(Collection&nbsp;c,&nbsp;boolean&nbsp;complement)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Object[]&nbsp;elementData&nbsp;=&nbsp;this.elementData;
&nbsp;&nbsp;&nbsp;&nbsp;//使用两个变量，一个负责向后扫描，一个从&nbsp;0&nbsp;开始，等待覆盖操作
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;r&nbsp;=&nbsp;0,&nbsp;w&nbsp;=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;boolean&nbsp;modified&nbsp;=&nbsp;false;
&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//遍历&nbsp;ArrayList&nbsp;集合
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(;&nbsp;r&nbsp;&lt;&nbsp;size;&nbsp;r++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//如果指定集合中是否有这个元素，根据&nbsp;complement&nbsp;判断是否往前覆盖删除
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(c.contains(elementData[r])&nbsp;==&nbsp;complement)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementData[w++]&nbsp;=&nbsp;elementData[r];
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;finally&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//发生了异常，直接把&nbsp;r&nbsp;后面的复制到&nbsp;w&nbsp;后面
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(r&nbsp;!=&nbsp;size)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(elementData,&nbsp;r,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementData,&nbsp;w,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;-&nbsp;r);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w&nbsp;+=&nbsp;size&nbsp;-&nbsp;r;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(w&nbsp;!=&nbsp;size)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;清除多余的元素，clear&nbsp;to&nbsp;let&nbsp;GC&nbsp;do&nbsp;its&nbsp;work
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;w;&nbsp;i&nbsp;&lt;&nbsp;size;&nbsp;i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementData[i]&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modCount&nbsp;+=&nbsp;size&nbsp;-&nbsp;w;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;=&nbsp;w;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modified&nbsp;=&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;modified;
}

//清楚全部
public&nbsp;void&nbsp;clear()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;//并没有直接使数组指向&nbsp;null,而是逐个把元素置为空
&nbsp;&nbsp;&nbsp;&nbsp;//下次使用时就不用重新&nbsp;new&nbsp;了
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;size;&nbsp;i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementData[i]&nbsp;=&nbsp;null;

&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;=&nbsp;0;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>7.判断状态：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;boolean&nbsp;contains(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;indexOf(o)&nbsp;&gt;=&nbsp;0;
}

//遍历，第一次找到就返回
public&nbsp;int&nbsp;indexOf(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;size;&nbsp;i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(elementData[i]==null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;=&nbsp;0;&nbsp;i--)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(elementData[i]==null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;size-1;&nbsp;i&nbsp;&gt;=&nbsp;0;&nbsp;i--)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o.equals(elementData[i]))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;-1;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>8.转换成 数组：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;Object[]&nbsp;toArray()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Arrays.copyOf(elementData,&nbsp;size);
}

public&nbsp;&nbsp;T[]&nbsp;toArray(T[]&nbsp;a)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//如果只是要把一部分转换成数组
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(a.length&nbsp;&nbsp;size)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[size]&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;a;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">看下 Arrays.copyOf() 方法：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;static&nbsp;&nbsp;T[]&nbsp;copyOf(U[]&nbsp;original,&nbsp;int&nbsp;newLength,&nbsp;Class&nbsp;newType)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;@SuppressWarnings(&quot;unchecked&quot;)
&nbsp;&nbsp;&nbsp;&nbsp;T[]&nbsp;copy&nbsp;=&nbsp;((Object)newType&nbsp;==&nbsp;(Object)Object[].class)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;?&nbsp;(T[])&nbsp;new&nbsp;Object[newLength]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;(T[])&nbsp;Array.newInstance(newType.getComponentType(),&nbsp;newLength);
&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(original,&nbsp;0,&nbsp;copy,&nbsp;0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Math.min(original.length,&nbsp;newLength));
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;copy;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">如果 newType 是一个对象对组，就直接把 original 的元素拷贝到 对象数组中；&nbsp;<br/>否则新建一个 newType 类型的数组。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>ArrayList 的内部实现</h2><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>1.迭代器 Iterator, ListIterator 没什么特别，直接使用角标访问数组的元素，:</h4><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">private&nbsp;class&nbsp;ListItr&nbsp;extends&nbsp;Itr&nbsp;implements&nbsp;ListIterator&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;ListItr(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor&nbsp;=&nbsp;index;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;hasPrevious()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cursor&nbsp;!=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;nextIndex()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cursor;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;previousIndex()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cursor&nbsp;-&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;@SuppressWarnings(&quot;unchecked&quot;)
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;E&nbsp;previous()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;cursor&nbsp;-&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(i&nbsp;=&nbsp;elementData.length)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor&nbsp;=&nbsp;i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(E)&nbsp;elementData[lastRet&nbsp;=&nbsp;i];
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;set(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(lastRet&nbsp;&lt;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IllegalStateException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ArrayList.this.set(lastRet,&nbsp;e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IndexOutOfBoundsException&nbsp;ex)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;add(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;cursor;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ArrayList.this.add(i,&nbsp;e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor&nbsp;=&nbsp;i&nbsp;+&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastRet&nbsp;=&nbsp;-1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expectedModCount&nbsp;=&nbsp;modCount;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IndexOutOfBoundsException&nbsp;ex)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>在&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52834074\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Java 集合深入理解：AbstractList</a>&nbsp;中我们介绍了 RandomAccess，里面提到，支持 RandomAccess 的对象，遍历时使用 get 比 迭代器更快。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>由于 ArrayList 继承自 RandomAccess， 而且它的迭代器都是基于 ArrayList 的方法和数组直接操作，所以遍历时 get 的效率要 &gt;= 迭代器。</h4><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">int&nbsp;i=0,&nbsp;n=list.size();&nbsp;i&nbsp;&lt;&nbsp;n;&nbsp;i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list.get(i);</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">比用迭代器更快：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">for&nbsp;(Iterator&nbsp;i=list.iterator();&nbsp;i.hasNext();&nbsp;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i.next();</pre><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \">另外，由于 ArrayList 不是同步的，所以在并发访问时，如果在迭代的同时有其他线程修改了 ArrayList, fail-fast 的迭代器 Iterator/ListIterator 会报 ConcurrentModificationException 错。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>因此我们在并发环境下需要外部给 ArrayList 加个同步锁，或者直接在初始化时用 Collections.synchronizedList 方法进行包装：</h4><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">List&nbsp;list&nbsp;=&nbsp;Collections.synchronizedList(new&nbsp;ArrayList(...));</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Thanks</h2><p><br/></p>' WHERE `id` = 210 [ RunTime:0.0952s ]

[ 2016-11-20T21:59:43+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000719s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001509s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0731s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0011s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T21:59:44+08:00 ] ::1 /think_blog/Home/Article/personInfo
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000456s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000849s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0723s ]
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0151s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,m.member_name AS `member_name`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name`,COUNT(ac.id) AS `article_comment_count` FROM `member` `m` LEFT JOIN article a ON a.member_id=m.id LEFT JOIN article_type at ON a.article_type_id=at.id LEFT JOIN article_comment ac ON a.id=ac.article_id  WHERE a.id = '211' GROUP BY a.id  [ RunTime:0.0016s ]

[ 2016-11-20T21:59:44+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000799s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001557s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0046s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T21:59:51+08:00 ] ::1 /think_blog/Home/Article/personEdit
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000485s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000929s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0060s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0050s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0041s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 50  [ RunTime:0.0003s ]
SQL: UPDATE `article` SET `title`='Java 集合深入理解（3）：AbstractSequentialList',`member_id`='87',`article_type_id`='50',`content`='<h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \">什么是 AbstractSequentialList</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">（ Sequential 相继的，按次序的）</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">AbstractSequentialList 继承自&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52834074\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">AbstractList</a>，是&nbsp;<code style=\"box-sizing: border-box; font-family: \">LinkedList</code>&nbsp;的父类，是&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52802849\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">List 接口</a>&nbsp;的简化版实现。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">简化在哪儿呢？简化在 AbstractSequentialList&nbsp;<strong style=\"box-sizing: border-box;\">只支持按次序访问</strong>，而不像&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52834074\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">AbstractList</a>&nbsp;那样支持随机访问。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">想要实现一个支持按次序访问的 List的话，只需要继承这个抽象类，然后把指定的抽象方法实现就好了。需要实现的方法：</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: \" class=\" list-paddingleft-2\"><li><p>size()</p></li><li><p>listIterator()，返回一个 ListIterator</p></li></ul><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">你需要实现一个&nbsp;<code style=\"box-sizing: border-box; font-family: \">ListIterator</code>, 实现它的&nbsp;<code style=\"box-sizing: border-box; font-family: \">hasNext()</code>,&nbsp;<code style=\"box-sizing: border-box; font-family: \">hasPrevious()</code>,&nbsp;<code style=\"box-sizing: border-box; font-family: \">next()</code>,&nbsp;<code style=\"box-sizing: border-box; font-family: \">previous()</code>, 还有那几个&nbsp;<strong style=\"box-sizing: border-box;\">获取位置</strong>&nbsp;的方法，这样你就得到一个不可变的 ListIterator 了。如果你想让它可修改，还需要实现&nbsp;<code style=\"box-sizing: border-box; font-family: \">add()</code>,&nbsp;<code style=\"box-sizing: border-box; font-family: \">remove()</code>,&nbsp;<code style=\"box-sizing: border-box; font-family: \">set()</code>&nbsp;方法。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">正如在 每个&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52773577\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Collection 接口</a>&nbsp;中提倡的那样，AbstractSequentialList 的子类需要提供两个构造函数，一个无参，一个以 Collection 为参数。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>成员函数</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">AbstractSequentialList 在 AbstractList 的基础上实现了以下方法：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161018235652391\" alt=\"这里写图片描述\" title=\"\"/></p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>1.获取迭代器：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;Iterator&nbsp;iterator()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//调用继承自
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;listIterator();
}

//继承&nbsp;AbstractList&nbsp;的&nbsp;listIterator()
public&nbsp;ListIterator&nbsp;listIterator()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;listIterator(0);
}

//需要实现类实现的方法
public&nbsp;abstract&nbsp;ListIterator&nbsp;listIterator(int&nbsp;index);</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>2.add(int, E) 添加元素到指定位置，将当前处于该位置（如果有的话）和任何后续元素的元素移到右边（添加一个到它们的索引）：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;void&nbsp;add(int&nbsp;index,&nbsp;E&nbsp;element)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//调用&nbsp;ListIterator.add()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listIterator(index).add(element);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(NoSuchElementException&nbsp;exc)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IndexOutOfBoundsException(&quot;Index:&nbsp;&quot;+index);
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>如果 Listerator 的实现类实现 add() 方法，会报&nbsp;<code style=\"box-sizing: border-box; font-family: \">UnsupportedOperationException</code>&nbsp;错。</h4><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>3.addAll(int index, Collection</h3><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>用获取到的 listIterator 逐个添加集合中的元素,这就要考验 ListIterator.add 方法的实现效率了，总不能每次都后移一位吧</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \">的确在目前集合框架中 AbstractSequentialList 的唯一实现类 LinkedList 实现的 ListIterator 中，由于 LinkedList 的双休链表特性，每次 add 只需要调整指针指向就可以了。</h4><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>4.get(int index) 获取指定位置的元素：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;E&nbsp;get(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;listIterator(index).next();
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(NoSuchElementException&nbsp;exc)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IndexOutOfBoundsException(&quot;Index:&nbsp;&quot;+index);
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>5.set(int index, E element) 修改指定位置的元素为新的：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;E&nbsp;set(int&nbsp;index,&nbsp;E&nbsp;element)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListIterator&nbsp;e&nbsp;=&nbsp;listIterator(index);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;oldVal&nbsp;=&nbsp;e.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.set(element);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;oldVal;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(NoSuchElementException&nbsp;exc)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IndexOutOfBoundsException(&quot;Index:&nbsp;&quot;+index);
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>6.remove(int index) 删除指定位置的元素：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;E&nbsp;remove(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListIterator&nbsp;e&nbsp;=&nbsp;listIterator(index);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;outCast&nbsp;=&nbsp;e.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.remove();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;outCast;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(NoSuchElementException&nbsp;exc)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IndexOutOfBoundsException(&quot;Index:&nbsp;&quot;+index);
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>总结</h2><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>可以看到， AbstractSequentialList 把父类&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52834074\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">AbstractList</a>&nbsp;中没有实现或者没有支持的操作都实现了，而且都是<strong style=\"box-sizing: border-box;\">调用的&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52834074\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">ListIterator</a>&nbsp;相关方法</strong>进行操作。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>在&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52834074\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Java 集合深入理解：AbstractList</a>&nbsp;中我们介绍了 RandomAccess，里面提到，支持 RandomAccess 的对象，遍历时使用 get 比 迭代器更快。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \">而 AbstractSequentialList 只支持迭代器按顺序 访问，不支持 RandomAccess，所以遍历 AbstractSequentialList 的子类，使用 for 循环 get() 的效率要 &lt;= 迭代器遍历：</h4><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">int&nbsp;i=0,&nbsp;n=list.size();&nbsp;i&nbsp;&lt;&nbsp;n;&nbsp;i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list.get(i);</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">get()太慢，还不如用迭代器：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">for&nbsp;(Iterator&nbsp;i=list.iterator();&nbsp;i.hasNext();&nbsp;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i.next();</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Thanks</h2><p><br/></p>' WHERE `id` = 211 [ RunTime:0.1031s ]

[ 2016-11-20T21:59:52+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001827s ]
INFO: [ app_begin ] --END-- [ RunTime:0.003233s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0050s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0015s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0007s ]

[ 2016-11-20T21:59:53+08:00 ] ::1 /think_blog/Home/Article/personInfo
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000441s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000855s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0041s ]
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0041s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,m.member_name AS `member_name`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name`,COUNT(ac.id) AS `article_comment_count` FROM `member` `m` LEFT JOIN article a ON a.member_id=m.id LEFT JOIN article_type at ON a.article_type_id=at.id LEFT JOIN article_comment ac ON a.id=ac.article_id  WHERE a.id = '212' GROUP BY a.id  [ RunTime:0.0005s ]

[ 2016-11-20T21:59:53+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000357s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000702s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0042s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T21:59:58+08:00 ] ::1 /think_blog/Home/Article/personEdit
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000465s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000856s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0060s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0054s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0037s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 50  [ RunTime:0.0003s ]
SQL: UPDATE `article` SET `title`='Java 集合深入理解（4）：Queue 队列',`member_id`='87',`article_type_id`='50',`content`='<h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \">什么是队列</h2><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>队列是数据结构中比较重要的一种类型，它支持 FIFO，尾部添加、头部删除（先进队列的元素先出队列），跟我们生活中的排队类似。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>队列有两种：</h4><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: \" class=\" list-paddingleft-2\"><li><p>单队列</p></li><li><p>循环队列</p></li></ul><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>单队列就是常见的队列, 每次添加元素时，都是添加到队尾：</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">以数组实现的队列为例，初始时队列长度固定为 4，font 和 rear 均为 0：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161019143750127\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">每添加一个元素，rear 后移一位。当添加四个元素后， rear 到了索引为 4 的位置：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161019144154538\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">这时 a1,a2 出队，front 后移动到 2：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161019144302583\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">这时想要再添加两个元素，但 rear 后移两位后就会越界：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161019144441240\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">明明有三个空位，却只能再放入一个！这就是单队列的“<strong style=\"box-sizing: border-box;\">假溢出</strong>”情况。</p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>（上述参考借鉴自&nbsp;<a href=\"http://www.nowamagic.net/librarys/veda/detail/2350\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">http://www.nowamagic.net/librarys/veda/detail/2350</a>）</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">针对这种情况，解决办法就是后面满了，就再从头开始，也就是头尾相接的循环。这就是&nbsp;<strong style=\"box-sizing: border-box;\">“循环队列”</strong>&nbsp;的概念。</p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>循环队列:</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">循环队列中，&nbsp;<br/>rear = (rear - size) % size</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">接着上面的例子，当 rear 大于 队列长度时，rear = ( 5 - 5) % 5 = 0 :</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161019152522910\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">这样继续添加时，还可以添加几个元素：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161019152853540\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">那如何判断队列是否装满元素了呢，单使用 front == rear 无法判断究竟是空的还是满了。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">两种方法：</p><ol style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: \" class=\" list-paddingleft-2\"><li><p>加个标志 flag ,初始为 false，添加满了置为 true；</p></li><li><p>不以 front = rear 为放满标志，改为 (rear - front) % size = 1。</p></li></ol><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">法 2 的公式放满元素时<strong style=\"box-sizing: border-box;\">空余了一个位置</strong>，这个公式是什么意思呢？</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161019163758572\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">接着上面的情况，当 rear 从后面添加元素跑到前面 0 时，再添加一个元素 a6，rear 后移一位到 1，这时 front = 2, (1 - 2) % 5 = 1, 满足放满条件。</p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>因此，当 rear &gt; font 时，队列中元素个数 = rear - font;</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>当 rear &lt; font 时，队列中元素分为两部分： size - font 和 rear ,也就是 rear + size - font。以上述图片为例，队列中元素个数 = 1 + 5 - 2 = 4.</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161019142319417\" alt=\"这里写图片描述\" title=\"\"/></p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>接着我们介绍 Java 集合框架中的队列 Queue</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161019004310645\" alt=\"这里写图片描述\" title=\"\"/></p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Java 集合中的 Queue 继承自&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52773577\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Collection 接口</a>&nbsp;，Deque, LinkedList, PriorityQueue, BlockingQueue 等类都实现了它。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Queue 用来存放 等待处理元素 的集合，这种场景一般用于缓冲、并发访问。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>除了继承 Collection 接口的一些方法，Queue 还添加了额外的 添加、删除、查询操作。</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161019004500256\" alt=\"这里写图片描述\" title=\"\"/></p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>添加、删除、查询这些个操作都提供了两种形式，其中一种在操作失败时直接抛出异常，而另一种则返回一个特殊的值：</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161019111111582\" alt=\"这里写图片描述\" title=\"\"/></p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Queue 方法介绍：</h2><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>1.add(E), offer(E) 在尾部添加:</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">boolean&nbsp;add(E&nbsp;e);

boolean&nbsp;offer(E&nbsp;e);</pre><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>他们的共同之处是不允许添加 null 元素，否则会报空指针 NullPointerException；</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>不同之处在于 add() 方法在添加失败（比如队列已满）时会报 一些运行时错误 错；而 offer() 方法即使在添加失败时也不会奔溃，只会返回 false。</h4><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>2.remove(), poll() 删除并返回头部：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">E&nbsp;remove();

E&nbsp;poll();</pre><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>当队列为空时 remove() 方法会报 NoSuchElementException 错; 而 poll() 不会奔溃，只会返回 null。</h4><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>3.element(), peek() 获取但不删除：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">E&nbsp;element();

E&nbsp;peek();</pre><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>当队列为空时 element() 抛出异常；peek() 不会奔溃，只会返回 null。</h4><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>其他</h2><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \">1.虽然 LinkedList 没有禁止添加 null，但是一般情况下 Queue 的实现类都不允许添加 null 元素，为啥呢？因为 poll(), peek() 方法在异常的时候会返回 null，你添加了 null　以后，当获取时不好分辨究竟是否正确返回。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>2.Queue 一般都是 FIFO 的，但是也有例外，比如优先队列 priority queue（它的顺序是根据自然排序或者自定义 comparator 的）；再比如 LIFO 的队列（跟栈一样，后来进去的先出去）。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>不论进入、出去的先后顺序是怎样的，使用 remove()，poll() 方法操作的都是 头部 的元素；而插入的位置则不一定是在队尾了，不同的 queue 会有不同的插入逻辑。</h4><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Thanks</h2><p><br/></p>' WHERE `id` = 212 [ RunTime:0.0917s ]

[ 2016-11-20T21:59:59+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002240s ]
INFO: [ app_begin ] --END-- [ RunTime:0.003016s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0072s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0013s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0004s ]

[ 2016-11-20T22:00:00+08:00 ] ::1 /think_blog/Home/Article/personInfo
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000450s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000849s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0042s ]
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0040s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,m.member_name AS `member_name`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name`,COUNT(ac.id) AS `article_comment_count` FROM `member` `m` LEFT JOIN article a ON a.member_id=m.id LEFT JOIN article_type at ON a.article_type_id=at.id LEFT JOIN article_comment ac ON a.id=ac.article_id  WHERE a.id = '213' GROUP BY a.id  [ RunTime:0.0005s ]

[ 2016-11-20T22:00:00+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000447s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000841s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0041s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T22:00:06+08:00 ] ::1 /think_blog/Home/Article/personEdit
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000448s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000854s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0041s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0047s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0038s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 50  [ RunTime:0.0002s ]
SQL: UPDATE `article` SET `title`='Java 集合深入理解（5）：Deque 双端队列',`member_id`='87',`article_type_id`='50',`content`='<h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \">什么是 Deque</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161019171159193\" alt=\"这里写图片描述\" title=\"\"/></p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a><em style=\"box-sizing: border-box;\">Deque</em>&nbsp;是&nbsp;<em style=\"box-sizing: border-box;\">Double ended queue (双端队列)</em>&nbsp;的缩写,读音和 deck 一样，蛋壳。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Deque 继承自&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52860924\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Queue</a>,直接实现了它的有 LinkedList, ArayDeque, ConcurrentLinkedDeque 等。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Deque 支持容量受限的双端队列，也支持大小不固定的。一般双端队列大小不确定。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Deque 接口定义了一些从头部和尾部访问元素的方法。比如分别在头部、尾部进行插入、删除、获取元素。和&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52860924\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Queue</a></h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">类似，每个操作都有两种方法，一种在异常情况下直接抛出异常奔溃，另一种则不会抛异常，而是返回特殊的值，比如 false, null …</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161019193301571\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">插入（Insert）方法的第二种是针对固定大小的双端队列设计的。大多数情况下 插入都不会失败。</p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Deque 继承了 Queue 接口的方法。当 Deque 当做 队列使用时（FIFO），添加元素是添加到队尾，删除时删除的是头部元素。从 Queue 接口继承的方法对应容器的方法如图所示：</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161019194500774\" alt=\"这里写图片描述\" title=\"\"/></p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Deque 也能当栈用（后进先出）。这时入栈、出栈元素都是在 双端队列的头部 进行。Deque 中和栈对应的方法如图所示：</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161019232902599\" alt=\"这里写图片描述\" title=\"\"/></p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Deque 包含的方法如下图所示：</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161019192113886\" alt=\"这里写图片描述\" title=\"\"/></p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>根据名字就能看到功能，具体实现我们下篇看 LinkedList 源码时介绍。</h4><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Deque 的实现类</h2><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Deque 的实现类主要分为两种场景：</h3><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: \" class=\" list-paddingleft-2\"><li><p>一般场景&nbsp;<br/></p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p>LinkedList 大小可变的<strong style=\"box-sizing: border-box;\">链表</strong>双端队列，允许元素为 null</p></li><li><p>ArrayDeque 大下可变的<strong style=\"box-sizing: border-box;\">数组</strong>双端队列，不允许 null</p></li></ul><li><p>并发场景&nbsp;<br/></p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p>LinkedBlockingDeque 如果队列为空时，获取操作将会阻塞，知道有元素添加</p></li></ul></ul><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Deque 与 工作密取</h2><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>在并发编程 中，双端队列 Deque 还用于 “工作密取” 模式。</h4><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>什么是工作密取呢？</h3><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>在 生产者-消费者 模式中，所有消费者都从一个工作队列中取元素，一般使用阻塞队列实现；</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>而在 工作密取 模式中，每个消费者有其单独的工作队列，如果它完成了自己双端队列中的全部工作，那么它就可以从其他消费者的双端<strong style=\"box-sizing: border-box;\">队列末尾</strong>秘密地获取工作。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \">工作密取 模式 对比传统的 生产者-消费者 模式，更为灵活，因为多个线程不会因为在同一个工作队列中抢占内容发生竞争。在大多数时候，它们只是访问自己的双端队列。即使需要访问另一个队列时，也是从 队列的尾部获取工作，降低了队列上的竞争程度。</h4><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Thanks</h2><p><br/></p>' WHERE `id` = 213 [ RunTime:0.1078s ]

[ 2016-11-20T22:00:06+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000929s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001497s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0069s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0016s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T22:00:08+08:00 ] ::1 /think_blog/Home/Article/personInfo
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000436s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000826s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0039s ]
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0043s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,m.member_name AS `member_name`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name`,COUNT(ac.id) AS `article_comment_count` FROM `member` `m` LEFT JOIN article a ON a.member_id=m.id LEFT JOIN article_type at ON a.article_type_id=at.id LEFT JOIN article_comment ac ON a.id=ac.article_id  WHERE a.id = '214' GROUP BY a.id  [ RunTime:0.0007s ]

[ 2016-11-20T22:00:08+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000380s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000809s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0045s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T22:00:13+08:00 ] ::1 /think_blog/Home/Article/personEdit
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000405s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000726s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0044s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0056s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0038s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 50  [ RunTime:0.0003s ]
SQL: UPDATE `article` SET `title`='Java 集合深入理解（6）：LinkedList',`member_id`='87',`article_type_id`='50',`content`='<h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \">日常开发中，保存一组数据使用的最多的就是&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52853989\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">ArrayList</a>， 其次就是 LinkedList 了。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>我们知道 ArrayList 是以数组实现的，遍历时很快，但是插入、删除时都需要移动后面的元素，效率略差些。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>而LinkedList 是以链表实现的，插入、删除时只需要改变前后两个节点指针指向即可，省事不少。</h4><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>今天来看下 LinkedList 源码。</h4><h1 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>#</h1><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>LinkedList 继承结构</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161020000003925\" alt=\"这里写图片描述\" title=\"\"/></p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>LinkedList 继承自&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52854681\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">AbstractSequentialList 接口</a>，同时了还实现了&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52865173\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Deque</a>,&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52860924\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Queue</a>&nbsp;接口。</h4><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>LinkedList 双向链表实现</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161020160301181\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">可以看到， LinkedList 的成员变量只有三个：</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: \" class=\" list-paddingleft-2\"><li><p>头节点 first</p></li><li><p>尾节点 last</p></li><li><p>容量 size</p></li></ul><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">节点是一个双向节点：&nbsp;<br/><img src=\"http://img.blog.csdn.net/20161020160716308\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">用一副图表示节点：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161020161332351\" alt=\"这里写图片描述\" title=\"\"/></p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>LinkedList 的方法</h2><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>1.关键的几个内部方法（头部添加删除，尾部添加删除，获取指定节点，指定节点的添加删除）</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">//插入到头部
private&nbsp;void&nbsp;linkFirst(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//获取头节点
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&nbsp;f&nbsp;=&nbsp;first;
&nbsp;&nbsp;&nbsp;&nbsp;//新建一个节点，尾部指向之前的&nbsp;头元素&nbsp;first
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&nbsp;newNode&nbsp;=&nbsp;new&nbsp;Node&lt;&gt;(null,&nbsp;e,&nbsp;f);
&nbsp;&nbsp;&nbsp;&nbsp;//first&nbsp;指向新建的节点
&nbsp;&nbsp;&nbsp;&nbsp;first&nbsp;=&nbsp;newNode;
&nbsp;&nbsp;&nbsp;&nbsp;//如果之前是空链表，新建的节点&nbsp;也是最后一个节点
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(f&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last&nbsp;=&nbsp;newNode;
&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//原来的第一个节点（现在的第二个）头部指向新建的头结点
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.prev&nbsp;=&nbsp;newNode;
&nbsp;&nbsp;&nbsp;&nbsp;size++;
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
}

//插入到尾部
void&nbsp;linkLast(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//获取尾部节点
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&nbsp;l&nbsp;=&nbsp;last;
&nbsp;&nbsp;&nbsp;&nbsp;//新建一个节点，头部指向之前的&nbsp;尾节点&nbsp;last
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&nbsp;newNode&nbsp;=&nbsp;new&nbsp;Node&lt;&gt;(l,&nbsp;e,&nbsp;null);
&nbsp;&nbsp;&nbsp;&nbsp;//last&nbsp;指向新建的节点
&nbsp;&nbsp;&nbsp;&nbsp;last&nbsp;=&nbsp;newNode;
&nbsp;&nbsp;&nbsp;&nbsp;//如果之前是空链表，&nbsp;新建的节点也是第一个节点
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(l&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;first&nbsp;=&nbsp;newNode;
&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//原来的尾节点尾部指向新建的尾节点
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l.next&nbsp;=&nbsp;newNode;
&nbsp;&nbsp;&nbsp;&nbsp;size++;
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
}

//在&nbsp;指定节点&nbsp;前插入一个元素，这里假设&nbsp;指定节点不为&nbsp;null
void&nbsp;linkBefore(E&nbsp;e,&nbsp;Node&nbsp;succ)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;获取指定节点&nbsp;succ&nbsp;前面的一个节点
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&nbsp;pred&nbsp;=&nbsp;succ.prev;
&nbsp;&nbsp;&nbsp;&nbsp;//新建一个节点，头部指向&nbsp;succ&nbsp;前面的节点，尾部指向&nbsp;succ&nbsp;节点，数据为&nbsp;e
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&nbsp;newNode&nbsp;=&nbsp;new&nbsp;Node&lt;&gt;(pred,&nbsp;e,&nbsp;succ);
&nbsp;&nbsp;&nbsp;&nbsp;//让&nbsp;succ&nbsp;节点头部指向&nbsp;新建的节点
&nbsp;&nbsp;&nbsp;&nbsp;succ.prev&nbsp;=&nbsp;newNode;
&nbsp;&nbsp;&nbsp;&nbsp;//如果&nbsp;succ&nbsp;前面的节点为空，说明&nbsp;succ&nbsp;就是第一个节点，那现在新建的节点就变成第一个节点了
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(pred&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;first&nbsp;=&nbsp;newNode;
&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//如果前面有节点，让前面的节点
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred.next&nbsp;=&nbsp;newNode;
&nbsp;&nbsp;&nbsp;&nbsp;size++;
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
}

//删除头节点并返回该节点上的数据，假设不为&nbsp;null
private&nbsp;E&nbsp;unlinkFirst(Node&nbsp;f)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;获取数据，一会儿返回
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;E&nbsp;element&nbsp;=&nbsp;f.item;
&nbsp;&nbsp;&nbsp;&nbsp;//获取头节点后面一个节点
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&nbsp;next&nbsp;=&nbsp;f.next;
&nbsp;&nbsp;&nbsp;&nbsp;//使头节点上数据为空，尾部指向空
&nbsp;&nbsp;&nbsp;&nbsp;f.item&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;f.next&nbsp;=&nbsp;null;&nbsp;//&nbsp;help&nbsp;GC
&nbsp;&nbsp;&nbsp;&nbsp;//现在头节点后边的节点变成第一个了
&nbsp;&nbsp;&nbsp;&nbsp;first&nbsp;=&nbsp;next;
&nbsp;&nbsp;&nbsp;&nbsp;//如果头节点后面的节点为&nbsp;null，说明移除这个节点后，链表里没节点了
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(next&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next.prev&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;size--;
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;element;
}

//删除尾部节点并返回，假设不为空
private&nbsp;E&nbsp;unlinkLast(Node&nbsp;l)&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;E&nbsp;element&nbsp;=&nbsp;l.item;
&nbsp;&nbsp;&nbsp;&nbsp;//获取倒数第二个节点
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&nbsp;prev&nbsp;=&nbsp;l.prev;
&nbsp;&nbsp;&nbsp;&nbsp;//尾节点数据、尾指针置为空
&nbsp;&nbsp;&nbsp;&nbsp;l.item&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;l.prev&nbsp;=&nbsp;null;&nbsp;//&nbsp;help&nbsp;GC
&nbsp;&nbsp;&nbsp;&nbsp;//现在倒数第二变成倒数第一了
&nbsp;&nbsp;&nbsp;&nbsp;last&nbsp;=&nbsp;prev;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(prev&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;first&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prev.next&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;size--;
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;element;
}

//删除某个指定节点
E&nbsp;unlink(Node&nbsp;x)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;假设&nbsp;x&nbsp;不为空
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;E&nbsp;element&nbsp;=&nbsp;x.item;
&nbsp;&nbsp;&nbsp;&nbsp;//获取指定节点前面、后面的节点
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&nbsp;next&nbsp;=&nbsp;x.next;
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&nbsp;prev&nbsp;=&nbsp;x.prev;

&nbsp;&nbsp;&nbsp;&nbsp;//如果前面没有节点，说明&nbsp;x&nbsp;是第一个
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(prev&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;first&nbsp;=&nbsp;next;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//前面有节点，让前面节点跨过&nbsp;x&nbsp;直接指向&nbsp;x&nbsp;后面的节点
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prev.next&nbsp;=&nbsp;next;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x.prev&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//如果后面没有节点，说&nbsp;x&nbsp;是最后一个节点
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(next&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last&nbsp;=&nbsp;prev;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//后面有节点，让后面的节点指向&nbsp;x&nbsp;前面的
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next.prev&nbsp;=&nbsp;prev;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x.next&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;x.item&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;size--;
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;element;
}

//获取指定位置的节点
Node&nbsp;node(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;假设指定位置有元素

&nbsp;&nbsp;&nbsp;&nbsp;//二分一下，如果小于&nbsp;size&nbsp;的一半，从头开始遍历
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(index&nbsp;&gt;&nbsp;1))&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node&nbsp;x&nbsp;=&nbsp;first;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;index;&nbsp;i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;x.next;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//大于&nbsp;size&nbsp;一半，从尾部倒着遍历
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node&nbsp;x&nbsp;=&nbsp;last;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;size&nbsp;-&nbsp;1;&nbsp;i&nbsp;&gt;&nbsp;index;&nbsp;i--)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;x.prev;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x;
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">这些内部方法实现了对 链表节点的 基本修改操作，每次操作都只要修改前后节点的指针，时间复杂度为 O(1)。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">很多公开方法都是通过调用它们实现的。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>2.公开的添加方法：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">//普通的在尾部添加元素
public&nbsp;boolean&nbsp;add(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;linkLast(e);
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
}

//在指定位置添加元素
public&nbsp;void&nbsp;add(int&nbsp;index,&nbsp;E&nbsp;element)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;checkPositionIndex(index);
&nbsp;&nbsp;&nbsp;&nbsp;//指定位置也有可能是在尾部
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(index&nbsp;==&nbsp;size)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linkLast(element);
&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linkBefore(element,&nbsp;node(index));
}

//添加一个集合的元素
public&nbsp;boolean&nbsp;addAll(Collection&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;addAll(size,&nbsp;c);
}

public&nbsp;boolean&nbsp;addAll(int&nbsp;index,&nbsp;Collection&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;checkPositionIndex(index);

&nbsp;&nbsp;&nbsp;&nbsp;//把&nbsp;要添加的集合转成一个&nbsp;数组
&nbsp;&nbsp;&nbsp;&nbsp;Object[]&nbsp;a&nbsp;=&nbsp;c.toArray();
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;numNew&nbsp;=&nbsp;a.length;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(numNew&nbsp;==&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;

&nbsp;&nbsp;&nbsp;&nbsp;//创建两个节点，分别指向要插入位置前面和后面的节点
&nbsp;&nbsp;&nbsp;&nbsp;Node&nbsp;pred,&nbsp;succ;
&nbsp;&nbsp;&nbsp;&nbsp;//要添加到尾部
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(index&nbsp;==&nbsp;size)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;succ&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred&nbsp;=&nbsp;last;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//要添加到中间，&nbsp;succ&nbsp;指向&nbsp;index&nbsp;位置的节点，pred&nbsp;指向它前一个
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;succ&nbsp;=&nbsp;node(index);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred&nbsp;=&nbsp;succ.prev;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//遍历要添加内容的数组
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Object&nbsp;o&nbsp;:&nbsp;a)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@SuppressWarnings(&quot;unchecked&quot;)&nbsp;E&nbsp;e&nbsp;=&nbsp;(E)&nbsp;o;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//创建新节点，头指针指向&nbsp;pred
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node&nbsp;newNode&nbsp;=&nbsp;new&nbsp;Node&lt;&gt;(pred,&nbsp;e,&nbsp;null);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//如果&nbsp;pred&nbsp;为空，说明新建的这个是头节点
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(pred&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;first&nbsp;=&nbsp;newNode;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//pred&nbsp;指向新建的节点
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred.next&nbsp;=&nbsp;newNode;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//pred&nbsp;后移一位
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred&nbsp;=&nbsp;newNode;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//添加完后需要修改尾指针&nbsp;last
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(succ&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//如果&nbsp;succ&nbsp;为空，说明要插入的位置就是尾部，现在&nbsp;pred&nbsp;已经到最后了
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last&nbsp;=&nbsp;pred;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//否则&nbsp;pred&nbsp;指向后面的元素
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred.next&nbsp;=&nbsp;succ;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;succ.prev&nbsp;=&nbsp;pred;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//元素个数增加
&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;+=&nbsp;numNew;
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
}

//添加到头部，时间复杂度为&nbsp;O(1)
public&nbsp;void&nbsp;addFirst(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;linkFirst(e);
}

//添加到尾部，时间复杂度为&nbsp;O(1)
public&nbsp;void&nbsp;addLast(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;linkLast(e);
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">继承自双端队列的添加方法：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">//入栈，其实就是在头部添加元素
public&nbsp;void&nbsp;push(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;addFirst(e);
}

//安全的添加操作，在尾部添加
public&nbsp;boolean&nbsp;offer(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;add(e);
}

//在头部添加
public&nbsp;boolean&nbsp;offerFirst(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;addFirst(e);
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
}

//尾部添加
public&nbsp;boolean&nbsp;offerLast(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;addLast(e);
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>3.删除方法：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">//删除头部节点
public&nbsp;E&nbsp;remove()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;removeFirst();
}

//删除指定位置节点
public&nbsp;E&nbsp;remove(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;checkElementIndex(index);
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;unlink(node(index));
}

//删除包含指定元素的节点，这就得遍历了
public&nbsp;boolean&nbsp;remove(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//遍历终止条件，不等于&nbsp;null
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Node&nbsp;x&nbsp;=&nbsp;first;&nbsp;x&nbsp;!=&nbsp;null;&nbsp;x&nbsp;=&nbsp;x.next)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(x.item&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unlink(x);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Node&nbsp;x&nbsp;=&nbsp;first;&nbsp;x&nbsp;!=&nbsp;null;&nbsp;x&nbsp;=&nbsp;x.next)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o.equals(x.item))&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unlink(x);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
}

//删除头部元素
public&nbsp;E&nbsp;removeFirst()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&nbsp;f&nbsp;=&nbsp;first;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(f&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException();
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;unlinkFirst(f);
}

//删除尾部元素
public&nbsp;E&nbsp;removeLast()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&nbsp;l&nbsp;=&nbsp;last;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(l&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException();
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;unlinkLast(l);
}

//删除首次出现的指定元素，从头遍历
public&nbsp;boolean&nbsp;removeFirstOccurrence(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;remove(o);
}

//删除最后一次出现的指定元素，倒过来遍历
public&nbsp;boolean&nbsp;removeLastOccurrence(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Node&nbsp;x&nbsp;=&nbsp;last;&nbsp;x&nbsp;!=&nbsp;null;&nbsp;x&nbsp;=&nbsp;x.prev)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(x.item&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unlink(x);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Node&nbsp;x&nbsp;=&nbsp;last;&nbsp;x&nbsp;!=&nbsp;null;&nbsp;x&nbsp;=&nbsp;x.prev)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o.equals(x.item))&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unlink(x);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">继承自双端队列的删除方法：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;E&nbsp;pop()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;removeFirst();
}

public&nbsp;E&nbsp;pollFirst()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&nbsp;f&nbsp;=&nbsp;first;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(f&nbsp;==&nbsp;null)&nbsp;?&nbsp;null&nbsp;:&nbsp;unlinkFirst(f);
}

public&nbsp;E&nbsp;pollLast()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&nbsp;l&nbsp;=&nbsp;last;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(l&nbsp;==&nbsp;null)&nbsp;?&nbsp;null&nbsp;:&nbsp;unlinkLast(l);
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">清除全部元素其实只需要把首尾都置为 null, 这个链表就已经是空的，因为无法访问元素。&nbsp;<br/>但是为了避免浪费空间，需要把中间节点都置为 null：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;void&nbsp;clear()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Node&nbsp;x&nbsp;=&nbsp;first;&nbsp;x&nbsp;!=&nbsp;null;&nbsp;)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node&nbsp;next&nbsp;=&nbsp;x.next;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x.item&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x.next&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x.prev&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;next;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;first&nbsp;=&nbsp;last&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>3.公开的修改方法，只有一个 set :</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">//set&nbsp;很简单，找到这个节点，替换数据就好了
public&nbsp;E&nbsp;set(int&nbsp;index,&nbsp;E&nbsp;element)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;checkElementIndex(index);
&nbsp;&nbsp;&nbsp;&nbsp;Node&nbsp;x&nbsp;=&nbsp;node(index);
&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;oldVal&nbsp;=&nbsp;x.item;
&nbsp;&nbsp;&nbsp;&nbsp;x.item&nbsp;=&nbsp;element;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;oldVal;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>4.公开的查询方法：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">//挨个遍历，获取第一次出现位置
public&nbsp;int&nbsp;indexOf(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;index&nbsp;=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Node&nbsp;x&nbsp;=&nbsp;first;&nbsp;x&nbsp;!=&nbsp;null;&nbsp;x&nbsp;=&nbsp;x.next)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(x.item&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;index;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index++;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Node&nbsp;x&nbsp;=&nbsp;first;&nbsp;x&nbsp;!=&nbsp;null;&nbsp;x&nbsp;=&nbsp;x.next)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o.equals(x.item))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;index;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index++;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;-1;
}

//倒着遍历，查询最后一次出现的位置
public&nbsp;int&nbsp;lastIndexOf(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;index&nbsp;=&nbsp;size;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Node&nbsp;x&nbsp;=&nbsp;last;&nbsp;x&nbsp;!=&nbsp;null;&nbsp;x&nbsp;=&nbsp;x.prev)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index--;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(x.item&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;index;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Node&nbsp;x&nbsp;=&nbsp;last;&nbsp;x&nbsp;!=&nbsp;null;&nbsp;x&nbsp;=&nbsp;x.prev)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index--;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o.equals(x.item))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;index;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;-1;
}

//是否包含指定元素
public&nbsp;boolean&nbsp;contains(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;indexOf(o)&nbsp;!=&nbsp;-1;
}

//获取指定位置的元素，需要遍历
public&nbsp;E&nbsp;get(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;checkElementIndex(index);
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;node(index).item;
}

//获取第一个元素，很快
public&nbsp;E&nbsp;getFirst()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&nbsp;f&nbsp;=&nbsp;first;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(f&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException();
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;f.item;
}

//获取第一个，同时删除它
public&nbsp;E&nbsp;poll()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&nbsp;f&nbsp;=&nbsp;first;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(f&nbsp;==&nbsp;null)&nbsp;?&nbsp;null&nbsp;:&nbsp;unlinkFirst(f);
}

//也是获取第一个，和&nbsp;poll&nbsp;不同的是不删除
public&nbsp;E&nbsp;peek()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&nbsp;f&nbsp;=&nbsp;first;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(f&nbsp;==&nbsp;null)&nbsp;?&nbsp;null&nbsp;:&nbsp;f.item;
}

//长得一样嘛
public&nbsp;E&nbsp;peekFirst()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&nbsp;f&nbsp;=&nbsp;first;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(f&nbsp;==&nbsp;null)&nbsp;?&nbsp;null&nbsp;:&nbsp;f.item;
&nbsp;}

//最后一个元素，也很快
public&nbsp;E&nbsp;getLast()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&nbsp;l&nbsp;=&nbsp;last;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(l&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException();
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;l.item;
}

public&nbsp;E&nbsp;peekLast()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Node&nbsp;l&nbsp;=&nbsp;last;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(l&nbsp;==&nbsp;null)&nbsp;?&nbsp;null&nbsp;:&nbsp;l.item;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>关键方法介绍完了，接下来是内部实现的迭代器，需要注意的是 LinkedList 实现了一个倒序迭代器 DescendingIterator；还实现了一个 ListIterator ，名叫 ListItr</h3><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>迭代器</h2><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>1.DescendingIterator 倒序迭代器</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">//很简单，就是游标直接在&nbsp;迭代器尾部，然后颠倒黑白，说是向后遍历，实际是向前遍历
private&nbsp;class&nbsp;DescendingIterator&nbsp;implements&nbsp;Iterator&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;final&nbsp;ListItr&nbsp;itr&nbsp;=&nbsp;new&nbsp;ListItr(size());
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;hasNext()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;itr.hasPrevious();
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;E&nbsp;next()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;itr.previous();
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;remove()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;itr.remove();
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>2. ListItr 操作基本都是调用的内部关键方法，没什么特别的</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">private&nbsp;class&nbsp;ListItr&nbsp;implements&nbsp;ListIterator&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Node&nbsp;lastReturned;
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Node&nbsp;next;
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;int&nbsp;nextIndex;
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;int&nbsp;expectedModCount&nbsp;=&nbsp;modCount;

&nbsp;&nbsp;&nbsp;&nbsp;ListItr(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;二分遍历，指定游标位置
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next&nbsp;=&nbsp;(index&nbsp;==&nbsp;size)&nbsp;?&nbsp;null&nbsp;:&nbsp;node(index);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nextIndex&nbsp;=&nbsp;index;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;hasNext()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;nextIndex&nbsp;&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;E&nbsp;previous()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!hasPrevious())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastReturned&nbsp;=&nbsp;next&nbsp;=&nbsp;(next&nbsp;==&nbsp;null)&nbsp;?&nbsp;last&nbsp;:&nbsp;next.prev;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nextIndex--;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;lastReturned.item;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;nextIndex()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;nextIndex;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;previousIndex()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;nextIndex&nbsp;-&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;remove()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(lastReturned&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IllegalStateException();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node&nbsp;lastNext&nbsp;=&nbsp;lastReturned.next;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unlink(lastReturned);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(next&nbsp;==&nbsp;lastReturned)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next&nbsp;=&nbsp;lastNext;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nextIndex--;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastReturned&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expectedModCount++;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;set(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(lastReturned&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IllegalStateException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastReturned.item&nbsp;=&nbsp;e;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;add(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastReturned&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(next&nbsp;==&nbsp;null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linkLast(e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linkBefore(e,&nbsp;next);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nextIndex++;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expectedModCount++;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;forEachRemaining(Consumer&nbsp;action)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Objects.requireNonNull(action);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(modCount&nbsp;==&nbsp;expectedModCount&nbsp;&amp;&amp;&nbsp;nextIndex&nbsp;&lt;&nbsp;size)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action.accept(next.item);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastReturned&nbsp;=&nbsp;next;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next&nbsp;=&nbsp;next.next;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nextIndex++;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;void&nbsp;checkForComodification()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(modCount&nbsp;!=&nbsp;expectedModCount)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>还有个 LLSpliterator 继承自 Spliterator， JDK 8 出来的新东东，这里暂不研究</h2><blockquote style=\"box-sizing: border-box; margin: 0px 0px 1.1em; padding: 15px 20px; border-left: 10px solid rgba(128, 128, 128, 0.0745098); background-color: rgba(128, 128, 128, 0.0470588); border-radius: 0px 5px 5px 0px; color: rgb(85, 85, 85); font-family: \"><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; line-height: 1.25;\">Spliterator 是&nbsp;<a href=\"http://lib.csdn.net/base/java\" class=\"replace_word\" title=\"Java 知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Java&nbsp;</a>8 引入的新接口，顾名思义，Spliterator 可以理解为 Iterator 的 Split 版本（但用途要丰富很多）。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; line-height: 1.25;\">使用 Iterator 的时候，我们可以顺序地遍历容器中的元素，使用 Spliterator 的时候，我们可以将元素<strong style=\"box-sizing: border-box;\">分割成多份</strong>，分别交于不于的线程去遍历，以提高效率。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; line-height: 1.25;\">使用 Spliterator 每次可以处理某个元素集合中的一个元素 — 不是从 Spliterator 中获取元素，而是使用 tryAdvance() 或 forEachRemaining() 方法对元素应用操作。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; line-height: 1.25;\">但 Spliterator 还可以用于估计其中保存的元素数量，而且还可以像细胞分裂一样变为一分为二。这些新增加的能力让流并行处理代码可以很方便地将工作分布到多个可用线程上完成。</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; box-sizing: border-box; line-height: 1.25;\">转自&nbsp;<a href=\"http://blog.sina.com.cn/s/blog_3fe961ae0102wxdb.html\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">http://blog.sina.com.cn/s/blog_3fe961ae0102wxdb.html</a></p></blockquote><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>总结</h2><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>吐个槽，估计是很多人维护的，有些方法功能代码完全一样</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">比如：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">private&nbsp;boolean&nbsp;isElementIndex(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;index&nbsp;&gt;=&nbsp;0&nbsp;&amp;&amp;&nbsp;index&nbsp;=&nbsp;0&nbsp;&amp;&amp;&nbsp;index&nbsp;&lt;=&nbsp;size;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>LinkedList 特点</h3><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: \" class=\" list-paddingleft-2\"><li><p>双向链表实现</p></li><li><p>元素时有序的，输出顺序与输入顺序一致</p></li><li><p>允许元素为 null</p></li><li><p>所有指定位置的操作都是从头开始遍历进行的</p></li><li><p>和 ArrayList 一样，不是同步容器</p></li></ul><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>并发访问注意事项</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">linkedList 和 ArrayList 一样，不是同步容器。所以需要外部做同步操作，或者直接用&nbsp;<code style=\"box-sizing: border-box; font-family: \">Collections.synchronizedList</code>&nbsp;方法包一下，最好在创建时就报一下：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">List&nbsp;list&nbsp;=&nbsp;Collections.synchronizedList(new&nbsp;LinkedList(...));</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">LinkedList 的迭代器都是 fail-fast 的: 如果在并发环境下，其他线程使用迭代器以外的方法修改数据，会导致 ConcurrentModificationException.</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>ArrayList VS LinkedList</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161020160411557\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">ArrayList</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: \" class=\" list-paddingleft-2\"><li><p>基于数组，在数组中搜索和读取数据是很快的。因此 ArrayList 获取数据的时间复杂度是O(1);</p></li><li><p>但是添加、删除时该元素后面的所有元素都要移动，所以添加/删除数据效率不高；</p></li><li><p>另外其实还是有容量的，每次达到阈值需要扩容，这个操作比较影响效率。</p></li></ul><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">LinkedList</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: \" class=\" list-paddingleft-2\"><li><p>基于双端链表，添加/删除元素只会影响周围的两个节点，开销很低；</p></li><li><p>只能顺序遍历，无法按照索引获得元素，因此查询效率不高；</p></li><li><p>没有固定容量，不需要扩容；</p></li><li><p>需要更多的内存，如文章开头图片所示 LinkedList 每个节点中需要多存储前后节点的信息，占用空间更多些。</p></li></ul><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>拓展</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">两个队列实现一个栈 ？</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><a href=\"http://www.cnblogs.com/kaituorensheng/archive/2013/03/02/2939690.html\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">http://www.cnblogs.com/kaituorensheng/archive/2013/03/02/2939690.html</a></p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Thanks</h2><p><br/></p>' WHERE `id` = 214 [ RunTime:0.1094s ]

[ 2016-11-20T22:00:14+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001073s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001992s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0079s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0016s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0005s ]

[ 2016-11-20T22:00:15+08:00 ] ::1 /think_blog/Home/Article/personInfo
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000452s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000844s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0044s ]
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0039s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,m.member_name AS `member_name`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name`,COUNT(ac.id) AS `article_comment_count` FROM `member` `m` LEFT JOIN article a ON a.member_id=m.id LEFT JOIN article_type at ON a.article_type_id=at.id LEFT JOIN article_comment ac ON a.id=ac.article_id  WHERE a.id = '215' GROUP BY a.id  [ RunTime:0.0006s ]

[ 2016-11-20T22:00:15+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000373s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000711s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0041s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T22:00:21+08:00 ] ::1 /think_blog/Home/Article/personEdit
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000373s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000722s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0045s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0048s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0050s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 50  [ RunTime:0.0003s ]
SQL: UPDATE `article` SET `title`='Java 集合深入理解（7）：古老的 Vector',`member_id`='87',`article_type_id`='50',`content`='<h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \">什么是 Vector</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161021113111379\" alt=\"这里写图片描述\" title=\"\"/></p><h4 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Vector 和 ArrayList 一样，都是继承自&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52834074\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">AbstractList</a>。它是 Stack 的父类。英文的意思是 “矢量”。</h4><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161021114436771\" alt=\"这里写图片描述\" title=\"\"/></p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Vector 成员变量</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161021233315132\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">1.底层也是个数组</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">protected&nbsp;Object[]&nbsp;elementData;</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">2.数组元素个数，为啥不就叫 size 呢？奇怪</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">protected&nbsp;int&nbsp;elementCount;</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">3.扩容时增长数量，允许用户自己设置。如果这个值是 0 或者 负数，扩容时会扩大 2 倍，而不是 1.5</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">protected&nbsp;int&nbsp;capacityIncrement;</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">4.默认容量</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">private&nbsp;static&nbsp;final&nbsp;int&nbsp;DEFAULT_SIZE&nbsp;=&nbsp;10;</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Vector 的 4 种构造方法</h2><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">//创建默认容量&nbsp;10&nbsp;的数组，同时增长量为&nbsp;0&nbsp;
public&nbsp;Vector()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;this(DEFAULT_SIZE,&nbsp;0);
}

//创建一个用户指定容量的数组，同时增长量为&nbsp;0&nbsp;
public&nbsp;Vector(int&nbsp;capacity)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;this(capacity,&nbsp;0);
}

//创建指定容量大小的数组，设置增长量。如果增长量为&nbsp;非正数，扩容时会扩大两倍
public&nbsp;Vector(int&nbsp;capacity,&nbsp;int&nbsp;capacityIncrement)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(capacity&nbsp;&lt;&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IllegalArgumentException(&quot;capacity&nbsp;&nbsp;&quot;&nbsp;+&nbsp;elementCount);
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;ensureCapacityHelper(elementCount&nbsp;+&nbsp;1);
&nbsp;&nbsp;&nbsp;&nbsp;//扩容后就把插入点后面的元素统一后移一位
&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(elementData,&nbsp;index,&nbsp;elementData,&nbsp;index&nbsp;+&nbsp;1,&nbsp;elementCount&nbsp;-&nbsp;index);
&nbsp;&nbsp;&nbsp;&nbsp;//赋值
&nbsp;&nbsp;&nbsp;&nbsp;elementData[index]&nbsp;=&nbsp;obj;
&nbsp;&nbsp;&nbsp;&nbsp;elementCount++;
}

//尾部插入元素，同步的
public&nbsp;synchronized&nbsp;void&nbsp;addElement(E&nbsp;obj)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;ensureCapacityHelper(elementCount&nbsp;+&nbsp;1);
&nbsp;&nbsp;&nbsp;&nbsp;elementData[elementCount++]&nbsp;=&nbsp;obj;
}

public&nbsp;void&nbsp;add(int&nbsp;index,&nbsp;E&nbsp;element)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;insertElementAt(element,&nbsp;index);
}

//添加一个集合到尾部，同步的
public&nbsp;synchronized&nbsp;boolean&nbsp;addAll(Collection&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;//转成数组
&nbsp;&nbsp;&nbsp;&nbsp;Object[]&nbsp;a&nbsp;=&nbsp;c.toArray();
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;numNew&nbsp;=&nbsp;a.length;
&nbsp;&nbsp;&nbsp;&nbsp;//扩容，复制到数组后面
&nbsp;&nbsp;&nbsp;&nbsp;ensureCapacityHelper(elementCount&nbsp;+&nbsp;numNew);
&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(a,&nbsp;0,&nbsp;elementData,&nbsp;elementCount,&nbsp;numNew);
&nbsp;&nbsp;&nbsp;&nbsp;elementCount&nbsp;+=&nbsp;numNew;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;numNew&nbsp;!=&nbsp;0;
}

//添加一个结合到指定位置，同步的
public&nbsp;synchronized&nbsp;boolean&nbsp;addAll(int&nbsp;index,&nbsp;Collection&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(index&nbsp;&nbsp;elementCount)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ArrayIndexOutOfBoundsException(index);

&nbsp;&nbsp;&nbsp;&nbsp;Object[]&nbsp;a&nbsp;=&nbsp;c.toArray();
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;numNew&nbsp;=&nbsp;a.length;
&nbsp;&nbsp;&nbsp;&nbsp;ensureCapacityHelper(elementCount&nbsp;+&nbsp;numNew);

&nbsp;&nbsp;&nbsp;&nbsp;//要移动多少个元素
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;numMoved&nbsp;=&nbsp;elementCount&nbsp;-&nbsp;index;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(numMoved&nbsp;&gt;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//把插入位置后面的元素后移这么多位
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(elementData,&nbsp;index,&nbsp;elementData,&nbsp;index&nbsp;+&nbsp;numNew,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numMoved);
&nbsp;&nbsp;&nbsp;&nbsp;//复制元素到数组中
&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(a,&nbsp;0,&nbsp;elementData,&nbsp;index,&nbsp;numNew);
&nbsp;&nbsp;&nbsp;&nbsp;elementCount&nbsp;+=&nbsp;numNew;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;numNew&nbsp;!=&nbsp;0;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">最后还有个 ListIterator 的添加方法</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;add(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;cursor;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(Vector.this)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vector.this.add(i,&nbsp;e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expectedModCount&nbsp;=&nbsp;modCount;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor&nbsp;=&nbsp;i&nbsp;+&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastRet&nbsp;=&nbsp;-1;
&nbsp;&nbsp;&nbsp;&nbsp;}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>4.Vector 中的 9 种删除方法</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">//删除指定位置的元素，同步的
public&nbsp;synchronized&nbsp;void&nbsp;removeElementAt(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(index&nbsp;&gt;=&nbsp;elementCount)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ArrayIndexOutOfBoundsException(index&nbsp;+&nbsp;&quot;&nbsp;&gt;=&nbsp;&quot;&nbsp;+
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementCount);
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;if&nbsp;(index&nbsp;&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//把删除位置后面的元素往前移一位
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(elementData,&nbsp;index&nbsp;+&nbsp;1,&nbsp;elementData,&nbsp;index,&nbsp;j);
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;elementCount--;
&nbsp;&nbsp;&nbsp;&nbsp;//最后多余的一位置为&nbsp;null
&nbsp;&nbsp;&nbsp;&nbsp;elementData[elementCount]&nbsp;=&nbsp;null;&nbsp;/*&nbsp;to&nbsp;let&nbsp;gc&nbsp;do&nbsp;its&nbsp;work&nbsp;*/
}

//删除指定元素，同步的
public&nbsp;synchronized&nbsp;boolean&nbsp;removeElement(Object&nbsp;obj)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;indexOf(obj);
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(i&nbsp;&gt;=&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;removeElementAt(i);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
}

E&nbsp;elementData(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(E)&nbsp;elementData[index];
}

//删除指定位置的元素
public&nbsp;synchronized&nbsp;E&nbsp;remove(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(index&nbsp;&gt;=&nbsp;elementCount)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ArrayIndexOutOfBoundsException(index);
&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;oldValue&nbsp;=&nbsp;elementData(index);

&nbsp;&nbsp;&nbsp;&nbsp;//找到删除该元素后，后面有多少位元素需要前移一位
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;numMoved&nbsp;=&nbsp;elementCount&nbsp;-&nbsp;index&nbsp;-&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(numMoved&nbsp;&gt;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//迁移一位
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(elementData,&nbsp;index+1,&nbsp;elementData,&nbsp;index,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numMoved);
&nbsp;&nbsp;&nbsp;&nbsp;//最后一位置为&nbsp;null，不浪费空间
&nbsp;&nbsp;&nbsp;&nbsp;elementData[--elementCount]&nbsp;=&nbsp;null;&nbsp;//&nbsp;Let&nbsp;gc&nbsp;do&nbsp;its&nbsp;work

&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;oldValue;
}

public&nbsp;boolean&nbsp;remove(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;removeElement(o);
}

//删除指定集合的所有元素，同步的
public&nbsp;synchronized&nbsp;boolean&nbsp;removeAll(Collection&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//直接调用&nbsp;AbstractCollection&nbsp;的&nbsp;removeAll&nbsp;方法，用迭代器挨个删除
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;super.removeAll(c);
}

//删除所有元素，同步的
public&nbsp;synchronized&nbsp;void&nbsp;removeAllElements()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;挨个置为空，Let&nbsp;gc&nbsp;do&nbsp;its&nbsp;work
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;elementCount;&nbsp;i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementData[i]&nbsp;=&nbsp;null;

&nbsp;&nbsp;&nbsp;&nbsp;elementCount&nbsp;=&nbsp;0;
}

//删除指定范围的元素,同步的
protected&nbsp;synchronized&nbsp;void&nbsp;removeRange(int&nbsp;fromIndex,&nbsp;int&nbsp;toIndex)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;//把结束位置以后的元素向前移动&nbsp;指定数量个位置，覆盖
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;numMoved&nbsp;=&nbsp;elementCount&nbsp;-&nbsp;toIndex;
&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(elementData,&nbsp;toIndex,&nbsp;elementData,&nbsp;fromIndex,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numMoved);

&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;把多余的位置置为&nbsp;null
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;newElementCount&nbsp;=&nbsp;elementCount&nbsp;-&nbsp;(toIndex-fromIndex);
&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(elementCount&nbsp;!=&nbsp;newElementCount)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementData[--elementCount]&nbsp;=&nbsp;null;
}

//排除异己，同步的
public&nbsp;synchronized&nbsp;boolean&nbsp;retainAll(Collection&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;super.retainAll(c);
}

//JDK&nbsp;1.8&nbsp;新增的
public&nbsp;synchronized&nbsp;boolean&nbsp;removeIf(Predicate&nbsp;filter)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;Objects.requireNonNull(filter);
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;将要删除的内容加入&nbsp;removeSet
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;removeCount&nbsp;=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;int&nbsp;size&nbsp;=&nbsp;elementCount;
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;BitSet&nbsp;removeSet&nbsp;=&nbsp;new&nbsp;BitSet(size);
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;int&nbsp;expectedModCount&nbsp;=&nbsp;modCount;
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i=0;&nbsp;modCount&nbsp;==&nbsp;expectedModCount&nbsp;&amp;&amp;&nbsp;i&nbsp;&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(anyToRemove)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;int&nbsp;newSize&nbsp;=&nbsp;size&nbsp;-&nbsp;removeCount;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i=0,&nbsp;j=0;&nbsp;(i&nbsp;&lt;&nbsp;size)&nbsp;&amp;&amp;&nbsp;(j&nbsp;&lt;&nbsp;newSize);&nbsp;i++,&nbsp;j++)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i&nbsp;=&nbsp;removeSet.nextClearBit(i);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementData[j]&nbsp;=&nbsp;elementData[i];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;k=newSize;&nbsp;k&nbsp;&lt;&nbsp;size;&nbsp;k++)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementData[k]&nbsp;=&nbsp;null;&nbsp;&nbsp;//&nbsp;Let&nbsp;gc&nbsp;do&nbsp;its&nbsp;work
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementCount&nbsp;=&nbsp;newSize;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(modCount&nbsp;!=&nbsp;expectedModCount)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;anyToRemove;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">写“同步的”写的手抽筋，还是统计不是同步的方法吧 - -。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>5. Vector 中的修改方法</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">//修改指定位置为指定元素
public&nbsp;synchronized&nbsp;E&nbsp;set(int&nbsp;index,&nbsp;E&nbsp;element)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(index&nbsp;&gt;=&nbsp;elementCount)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ArrayIndexOutOfBoundsException(index);
&nbsp;&nbsp;&nbsp;&nbsp;//找到这个元素，直接设置新值
&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;oldValue&nbsp;=&nbsp;elementData(index);
&nbsp;&nbsp;&nbsp;&nbsp;elementData[index]&nbsp;=&nbsp;element;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;oldValue;
}

//修改指定位置为指定元素
public&nbsp;synchronized&nbsp;void&nbsp;setElementAt(E&nbsp;obj,&nbsp;int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(index&nbsp;&gt;=&nbsp;elementCount)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ArrayIndexOutOfBoundsException(index&nbsp;+&nbsp;&quot;&nbsp;&gt;=&nbsp;&quot;&nbsp;+
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementCount);
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;//数组就是方便，直接更新就好了
&nbsp;&nbsp;&nbsp;&nbsp;elementData[index]&nbsp;=&nbsp;obj;
}

//修改数组容量
public&nbsp;synchronized&nbsp;void&nbsp;setSize(int&nbsp;newSize)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;//元素个数超出容量就要扩容
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(newSize&nbsp;&gt;&nbsp;elementCount)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ensureCapacityHelper(newSize);
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//新增&nbsp;elementCount&nbsp;-&nbsp;newSize&nbsp;个元素
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;newSize&nbsp;;&nbsp;i&nbsp;&lt;&nbsp;elementCount&nbsp;;&nbsp;i++)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementData[i]&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;elementCount&nbsp;=&nbsp;newSize;
}

//排序，修改顺序
public&nbsp;synchronized&nbsp;void&nbsp;sort(Comparator&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;int&nbsp;expectedModCount&nbsp;=&nbsp;modCount;
&nbsp;&nbsp;&nbsp;&nbsp;//用的是&nbsp;Arrays.sort&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;Arrays.sort((E[])&nbsp;elementData,&nbsp;0,&nbsp;elementCount,&nbsp;c);
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(modCount&nbsp;!=&nbsp;expectedModCount)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
}

//缩小数组容量，减少占用资源
public&nbsp;synchronized&nbsp;void&nbsp;trimToSize()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;oldCapacity&nbsp;=&nbsp;elementData.length;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(elementCount&nbsp;&lt;&nbsp;oldCapacity)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//新建个小点的数组，赋值
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementData&nbsp;=&nbsp;Arrays.copyOf(elementData,&nbsp;elementCount);
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>6. Vector 中的查询</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">//查找&nbsp;o&nbsp;从指定位置&nbsp;index&nbsp;开始第一次出现的位置
public&nbsp;synchronized&nbsp;int&nbsp;indexOf(Object&nbsp;o,&nbsp;int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;index&nbsp;;&nbsp;i&nbsp;&lt;&nbsp;elementCount&nbsp;;&nbsp;i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(elementData[i]==null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;index&nbsp;;&nbsp;i&nbsp;=&nbsp;0;
}

//是否包含整个集合
public&nbsp;synchronized&nbsp;boolean&nbsp;containsAll(Collection&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//调用&nbsp;AbstractCollection&nbsp;的方法，使用迭代器挨个遍历查找，两重循环
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;super.containsAll(c);
}

//第一个元素，其实提供了&nbsp;get()&nbsp;方法就够了
public&nbsp;synchronized&nbsp;E&nbsp;firstElement()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(elementCount&nbsp;==&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException();
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;elementData(0);
}

//最后一个元素，其实提供了&nbsp;get()&nbsp;方法就够了
public&nbsp;synchronized&nbsp;E&nbsp;lastElement()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(elementCount&nbsp;==&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException();
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;elementData(elementCount&nbsp;-&nbsp;1);
}

public&nbsp;synchronized&nbsp;boolean&nbsp;isEmpty()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;elementCount&nbsp;==&nbsp;0;
}

//实际包含元素个数
public&nbsp;synchronized&nbsp;int&nbsp;size()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;elementCount;
}

//数组大小，&gt;=&nbsp;元素个数
public&nbsp;synchronized&nbsp;int&nbsp;capacity()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;elementData.length;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>7. Vector 也可以转成数组</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;synchronized&nbsp;Object[]&nbsp;toArray()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Arrays.copyOf(elementData,&nbsp;elementCount);
}

//跟&nbsp;ArrayList&nbsp;简直一样
public&nbsp;synchronized&nbsp;&nbsp;T[]&nbsp;toArray(T[]&nbsp;a)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(a.length&nbsp;&nbsp;elementCount)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[elementCount]&nbsp;=&nbsp;null;

&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;a;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>8. Vector 中的迭代器</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">普通迭代器　Iterator:</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;synchronized&nbsp;Iterator&nbsp;iterator()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;Itr();
}

private&nbsp;class&nbsp;Itr&nbsp;implements&nbsp;Iterator&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;cursor;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;index&nbsp;of&nbsp;next&nbsp;element&nbsp;to&nbsp;return
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;lastRet&nbsp;=&nbsp;-1;&nbsp;//&nbsp;index&nbsp;of&nbsp;last&nbsp;element&nbsp;returned;&nbsp;-1&nbsp;if&nbsp;no&nbsp;such
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;expectedModCount&nbsp;=&nbsp;modCount;

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;hasNext()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;调用&nbsp;next()&nbsp;前的检查
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cursor&nbsp;!=&nbsp;elementCount;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;E&nbsp;next()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//注意了，Vector&nbsp;连迭代器的方法也加了同步
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(Vector.this)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;cursor;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(i&nbsp;&gt;=&nbsp;elementCount)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor&nbsp;=&nbsp;i&nbsp;+&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;elementData(lastRet&nbsp;=&nbsp;i);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;remove()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(lastRet&nbsp;==&nbsp;-1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IllegalStateException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//注意了，Vector&nbsp;连迭代器的方法也加了同步
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(Vector.this)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vector.this.remove(lastRet);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expectedModCount&nbsp;=&nbsp;modCount;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor&nbsp;=&nbsp;lastRet;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastRet&nbsp;=&nbsp;-1;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//大概看下这个&nbsp;1.8&nbsp;的方法
&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;forEachRemaining(Consumer&nbsp;action)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Objects.requireNonNull(action);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(Vector.this)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;int&nbsp;size&nbsp;=&nbsp;elementCount;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;cursor;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(i&nbsp;&gt;=&nbsp;size)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;@SuppressWarnings(&quot;unchecked&quot;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;E[]&nbsp;elementData&nbsp;=&nbsp;(E[])&nbsp;Vector.this.elementData;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(i&nbsp;&gt;=&nbsp;elementData.length)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(i&nbsp;!=&nbsp;size&nbsp;&amp;&amp;&nbsp;modCount&nbsp;==&nbsp;expectedModCount)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action.accept(elementData[i++]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;update&nbsp;once&nbsp;at&nbsp;end&nbsp;of&nbsp;iteration&nbsp;to&nbsp;reduce&nbsp;heap&nbsp;write&nbsp;traffic
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor&nbsp;=&nbsp;i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastRet&nbsp;=&nbsp;i&nbsp;-&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;void&nbsp;checkForComodification()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(modCount&nbsp;!=&nbsp;expectedModCount)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">ListIterator:</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;synchronized&nbsp;ListIterator&nbsp;listIterator(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(index&nbsp;&nbsp;elementCount)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IndexOutOfBoundsException(&quot;Index:&nbsp;&quot;+index);
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;ListItr(index);
}

final&nbsp;class&nbsp;ListItr&nbsp;extends&nbsp;Itr&nbsp;implements&nbsp;ListIterator&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;ListItr(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor&nbsp;=&nbsp;index;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;hasPrevious()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cursor&nbsp;!=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;nextIndex()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cursor;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;previousIndex()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cursor&nbsp;-&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;E&nbsp;previous()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(Vector.this)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;cursor&nbsp;-&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(i&nbsp;&lt;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor&nbsp;=&nbsp;i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;elementData(lastRet&nbsp;=&nbsp;i);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;set(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(lastRet&nbsp;==&nbsp;-1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IllegalStateException();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(Vector.this)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vector.this.set(lastRet,&nbsp;e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;add(E&nbsp;e)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;cursor;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(Vector.this)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkForComodification();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vector.this.add(i,&nbsp;e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expectedModCount&nbsp;=&nbsp;modCount;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor&nbsp;=&nbsp;i&nbsp;+&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastRet&nbsp;=&nbsp;-1;
&nbsp;&nbsp;&nbsp;&nbsp;}
}

//1.8&nbsp;新增的略过。。。

//还多了个&nbsp;sort&nbsp;方法，自己传入的集合需要实现比较器
@SuppressWarnings(&quot;unchecked&quot;)
@Override
public&nbsp;synchronized&nbsp;void&nbsp;sort(Comparator&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;int&nbsp;expectedModCount&nbsp;=&nbsp;modCount;
&nbsp;&nbsp;&nbsp;&nbsp;Arrays.sort((E[])&nbsp;elementData,&nbsp;0,&nbsp;elementCount,&nbsp;c);
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(modCount&nbsp;!=&nbsp;expectedModCount)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConcurrentModificationException();
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">Vector 还支持 Enumeration　迭代：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;Enumeration&nbsp;elements()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;Enumeration()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;count&nbsp;=&nbsp;0;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;hasMoreElements()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;count&nbsp;&lt;&nbsp;elementCount;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;E&nbsp;nextElement()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized&nbsp;(Vector.this)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(count&nbsp;&lt;&nbsp;elementCount)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;elementData(count++);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;NoSuchElementException(&quot;Vector&nbsp;Enumeration&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;};
}</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>总结</h2><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Vector 特点</h3><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: \" class=\" list-paddingleft-2\"><li><p>底层由一个可以增长的数组组成</p></li><li><p>Vector 通过 capacity (容量) 和 capacityIncrement (增长数量) 来尽量少的占用空间</p></li><li><p>扩容时默认扩大两倍</p></li><li><p>最好在插入大量元素前增加 vector 容量，那样可以减少重新申请内存的次数</p></li><li><p>通过 iterator 和 lastIterator 获得的迭代器是 fail-fast 的</p></li><li><p>通过 elements 获得的老版迭代器 Enumeration 不是 fail-fast 的</p></li><li><p>同步类，每个方法前都有同步锁 synchronized</p></li><li><p>在 JDK 2.0 以后，经过优化，Vector 也加入了 Java 集合框架大家族</p></li></ul><p><br/></p>' WHERE `id` = 215 [ RunTime:0.1422s ]

[ 2016-11-20T22:00:21+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000806s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001568s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0076s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0009s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0005s ]

[ 2016-11-20T22:00:23+08:00 ] ::1 /think_blog/Home/Article/personInfo
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000500s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001045s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0053s ]
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0054s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,m.member_name AS `member_name`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name`,COUNT(ac.id) AS `article_comment_count` FROM `member` `m` LEFT JOIN article a ON a.member_id=m.id LEFT JOIN article_type at ON a.article_type_id=at.id LEFT JOIN article_comment ac ON a.id=ac.article_id  WHERE a.id = '216' GROUP BY a.id  [ RunTime:0.0005s ]

[ 2016-11-20T22:00:23+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000383s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000739s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0035s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T22:00:29+08:00 ] ::1 /think_blog/Home/Article/personEdit
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000393s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000723s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0039s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0039s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0040s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 50  [ RunTime:0.0003s ]
SQL: UPDATE `article` SET `title`='Java 集合深入理解（8）：Stack 栈',`member_id`='87',`article_type_id`='50',`content`='<h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \">数据结构中的 栈</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><a href=\"http://lib.csdn.net/base/datastructure\" class=\"replace_word\" title=\"算法与数据结构知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">数据结构</a>中，栈是一种线性数据结构，遵从 LIFO（后进先出）的操作顺序，所有操作都是在顶部进行</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161023122559358\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">有点像羽毛球筒：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161023122848425\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><strong style=\"box-sizing: border-box;\">栈通常有三种操作：</strong></p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: \" class=\" list-paddingleft-2\"><li><p>push 入栈</p></li><li><p>pop 栈顶元素出栈，并返回</p></li><li><p>peek 获取栈顶元素，并不删除</p></li></ul><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">我们自定义一个 栈 时只要实现上述三个主要操作即可，本文中将使用&nbsp;<a href=\"http://lib.csdn.net/base/javaee\" class=\"replace_word\" title=\"Java EE知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Java</a>&nbsp;中的 LinkedList　实现一个栈。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><strong style=\"box-sizing: border-box;\">栈的使用场景：</strong></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">栈最主要的意义就在于：入栈和出栈的对称性。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">在&nbsp;<a href=\"http://lib.csdn.net/base/android\" class=\"replace_word\" title=\"Android知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Android</a>&nbsp;开发中，我们经常需要开启、回退一个 Activity，其实这里就有栈的应用，每次开启Activity，如果不是特殊的启动模式，就会在栈顶加入一个 Activity，点击返回后，之前的 Activity 出栈 。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">其他场景比如递归（斐波那契数列，汉诺塔）。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161023125933294\" alt=\"这里写图片描述\" title=\"\"/></p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Java 集合框架中的栈 Stack</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161023121612835\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161023132347177\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">Java 集合框架中的 Stack 继承自&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52900893\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Vector</a>：</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: \" class=\" list-paddingleft-2\"><li><p>由于 Vector 有 4 个构造函数，加上 Stack 本身的一种，也就是说有 5 中创建 Stack 的方法</p></li><li><p>跟 Vector 一样，它是&nbsp;<strong style=\"box-sizing: border-box;\">数组实现的栈</strong>。</p></li></ul><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Stack 的方法</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">Stack 中新建的方法比较少：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161023121637601\" alt=\"这里写图片描述\" title=\"\"/></p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>1.构造函数</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">//构建一个空栈
public&nbsp;Stack()&nbsp;{
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>2.入栈</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">//调用的&nbsp;Vector.addElement()
public&nbsp;E&nbsp;push(E&nbsp;item)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;addElement(item);

&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;item;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">Vector 的 addElement() 方法，就是在数组尾部添加元素：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;synchronized&nbsp;void&nbsp;addElement(E&nbsp;obj)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;ensureCapacityHelper(elementCount&nbsp;+&nbsp;1);
&nbsp;&nbsp;&nbsp;&nbsp;elementData[elementCount++]&nbsp;=&nbsp;obj;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>3.获取顶端元素，但不删除</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;synchronized&nbsp;E&nbsp;peek()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//调用&nbsp;Vector.size()&nbsp;返回元素个数
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;len&nbsp;=&nbsp;size();

&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(len&nbsp;==&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;EmptyStackException();
&nbsp;&nbsp;&nbsp;&nbsp;//调用&nbsp;Vector.elementAt&nbsp;得到栈顶元素
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;elementAt(len&nbsp;-&nbsp;1);
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">Vector.elementAt(int):</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;synchronized&nbsp;E&nbsp;elementAt(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(index&nbsp;&gt;=&nbsp;elementCount)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ArrayIndexOutOfBoundsException(index&nbsp;+&nbsp;&quot;&nbsp;&gt;=&nbsp;&quot;&nbsp;+&nbsp;elementCount);
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;elementData(index);
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">Vector.elementData(int):</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">E&nbsp;elementData(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(E)&nbsp;elementData[index];
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>4.出栈</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;synchronized&nbsp;E&nbsp;pop()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;obj;
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;len&nbsp;=&nbsp;size();

&nbsp;&nbsp;&nbsp;&nbsp;//调用&nbsp;peek()&nbsp;获取顶端元素，一会儿返回
&nbsp;&nbsp;&nbsp;&nbsp;obj&nbsp;=&nbsp;peek();
&nbsp;&nbsp;&nbsp;&nbsp;//调用&nbsp;Vector.removeElementAt&nbsp;删除顶端元素
&nbsp;&nbsp;&nbsp;&nbsp;removeElementAt(len&nbsp;-&nbsp;1);

&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;obj;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">Vector.removeElementAt(int):</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;synchronized&nbsp;void&nbsp;removeElementAt(int&nbsp;index)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;modCount++;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(index&nbsp;&gt;=&nbsp;elementCount)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ArrayIndexOutOfBoundsException(index&nbsp;+&nbsp;&quot;&nbsp;&gt;=&nbsp;&quot;&nbsp;+
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementCount);
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;if&nbsp;(index&nbsp;&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(elementData,&nbsp;index&nbsp;+&nbsp;1,&nbsp;elementData,&nbsp;index,&nbsp;j);
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;elementCount--;
&nbsp;&nbsp;&nbsp;&nbsp;elementData[elementCount]&nbsp;=&nbsp;null;&nbsp;/*&nbsp;to&nbsp;let&nbsp;gc&nbsp;do&nbsp;its&nbsp;work&nbsp;*/
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>5.查找元素是否在栈中</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;synchronized&nbsp;int&nbsp;search(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;lastIndexOf(o);

&nbsp;&nbsp;&nbsp;&nbsp;//返回的是栈顶到该元素出现的位置的距离
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(i&nbsp;&gt;=&nbsp;0)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;size()&nbsp;-&nbsp;i;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;-1;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>6.是否为空</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;boolean&nbsp;empty()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;size()&nbsp;==&nbsp;0;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">Vector.size():</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;synchronized&nbsp;int&nbsp;size()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;elementCount;
}</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>总结</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">Java 集合框架中的 Stack 具有以下特点：</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: \" class=\" list-paddingleft-2\"><li><p>继承自 Vector</p></li><li><p>有 5 种创建 Stack 的方法</p></li><li><p>采用数组实现</p></li><li><p>除了 push()，剩下的方法都是同步的</p></li></ul><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>用链表实现一个栈？</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">由于 Stack　是用数组实现的，我们用链表实现一下吧，这里就选择　<a href=\"http://blog.csdn.net/u011240877/article/details/52876543\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">LinkedList</a>&nbsp;来实现：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">/**
&nbsp;*&nbsp;description:LinkedList&nbsp;模拟&nbsp;Stack
&nbsp;*&nbsp;
&nbsp;*&nbsp;author:&nbsp;shixinzhang
&nbsp;*&nbsp;
&nbsp;*&nbsp;data:&nbsp;10/23/2016
&nbsp;*/
public&nbsp;class&nbsp;LinkedListStack&nbsp;extends&nbsp;LinkedList{
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;LinkedListStack(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;push(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.push(o);
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Object&nbsp;pop()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;super.pop();
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Object&nbsp;peek()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;super.peek();
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;isEmpty()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;super.isEmpty();
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;search(Object&nbsp;o){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;indexOf(o);
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">调用：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">@Test
public&nbsp;void&nbsp;testPush()&nbsp;throws&nbsp;Exception&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;LinkedListStack&nbsp;stack&nbsp;=&nbsp;new&nbsp;LinkedListStack();
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;栈是否为空:&nbsp;&quot;&nbsp;+&nbsp;stack.isEmpty());

&nbsp;&nbsp;&nbsp;&nbsp;stack.push(&quot;shixin&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;stack.push(&quot;好帅&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;stack.push(&quot;技巧一流&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;stack.push(&quot;haha&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;栈中元素:&nbsp;&quot;&nbsp;+&nbsp;stack);

&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;获取顶端元素&nbsp;peek&nbsp;:&quot;&nbsp;+&nbsp;stack.peek());

&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;顶端元素出栈&nbsp;pop&nbsp;:&quot;&nbsp;+&nbsp;stack.pop());

&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;出栈后栈内元素:&quot;&nbsp;+&nbsp;stack);

&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;search(好帅)&nbsp;的位置:&quot;&nbsp;+&nbsp;stack.search(&quot;好帅&quot;));
}
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">结果：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161023131850761\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">可以看到，我其实都没做什么哈哈，都是&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52876543\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">LinkedList</a>&nbsp;内部提供的方法，操作的都是在链表头部的元素，而不是尾部。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">其实 LinkedList 这个栈的特性也是继承自&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52865173\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">双端队列 Deque</a>，官方也推荐在使用栈时优先使用 Deque，而不是 Stack,有兴趣的可以去了解下。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Thanks</h2><p><br/></p>' WHERE `id` = 216 [ RunTime:0.1238s ]

[ 2016-11-20T22:00:30+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000781s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001501s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0051s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0014s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0006s ]

[ 2016-11-20T22:00:31+08:00 ] ::1 /think_blog/Home/Article/personInfo
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000945s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001567s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0042s ]
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0045s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,m.member_name AS `member_name`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name`,COUNT(ac.id) AS `article_comment_count` FROM `member` `m` LEFT JOIN article a ON a.member_id=m.id LEFT JOIN article_type at ON a.article_type_id=at.id LEFT JOIN article_comment ac ON a.id=ac.article_id  WHERE a.id = '217' GROUP BY a.id  [ RunTime:0.0005s ]

[ 2016-11-20T22:00:31+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000357s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000699s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0041s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T22:00:36+08:00 ] ::1 /think_blog/Home/Article/personEdit
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000368s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000697s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0039s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0043s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0039s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 50  [ RunTime:0.0003s ]
SQL: UPDATE `article` SET `title`='Java 集合深入理解（9）：Map 概述',`member_id`='87',`article_type_id`='50',`content`='<h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \">什么是 Map</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><a href=\"http://lib.csdn.net/base/javaee\" class=\"replace_word\" title=\"Java EE知识库\" target=\"_blank\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(223, 52, 52); font-weight: bold;\">Java</a>&nbsp;中的 Map 接口 是和&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52773577\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Collection 接口</a>&nbsp;同一等级的集合根接口，它 表示一个<strong style=\"box-sizing: border-box;\">键值对 (key-value) 的映射</strong>。类似数学中&nbsp;<strong style=\"box-sizing: border-box;\">函数&nbsp;</strong>的概念。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">数学中的函数：</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161025222801415\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">一个 Map 中，任意一个 key 都有唯一确定的 value 与其对应，这个 key-value 的映射就是 map。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">Map 中元素的顺序取决于迭代器迭代时的顺序，有的实现类保证了元素输入输出时的顺序，比如说 TreeMap；有的实现类则是无序的，比如 HashMap。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Map 的三个 collection 视图：</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161025193401464\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">Map 接口提供了三种角度来分析 Map:</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: \" class=\" list-paddingleft-2\"><li><p>KeySet</p></li><li><p>Values</p></li><li><p>Entry</p></li></ul><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>1.KeySet</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">KeySet 是一个 Map 中键（key）的集合，<strong style=\"box-sizing: border-box;\">以 Set 的形式保存</strong>，不允许重复，因此键存储的对象需要重写 equals() 和 hashCode() 方法。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">在上图就是保存 AA, BB, CC, DD… 等键的集合。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">可以通过 Map.keySet() 方法获得。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>2.Values</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">Values 是一个 Map 中值 (value) 的集合，<strong style=\"box-sizing: border-box;\">以 Collection 的形式保存</strong>，因此可以重复。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">在上图就是保存 90,90,56,78… 等值的集合。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">通过 Map.values() 方法获得。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>3.Entry</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">Entry 是 Map 接口中的静态内部接口，表示一个键值对的映射，例如上图中 AA-90 这一组映射关系。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161025225202362\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">Entry 具有上图中的方法：</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: \" class=\" list-paddingleft-2\"><li><p>getKey() , 获取这组映射中的键 key</p></li><li><p>getValue() , 获取这组映射中的值 value</p></li><li><p>setValue() , 修改这组映射中的值</p></li><li><p>hashCode() , 返回这个 Entry 的哈希值</p></li><li><p>equals() , 对比 key-value 是否相等</p></li></ul><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">通过 Map.entrySet() 方法获得的是一组 Entry 的集合，保存在 Set 中，所以 Map 中的 Entry 也不能重复。</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;Set&lt;Map.Entry&gt;&nbsp;entrySet();</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Map 的三种遍历方式</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">根据 Map 提供的三种视图，可以有三种 map 遍历方式 :</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>1.使用 keySet 遍历：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">&nbsp;&nbsp;&nbsp;&nbsp;Set&nbsp;set&nbsp;=&nbsp;map.keySet();
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Object&nbsp;key&nbsp;:&nbsp;set)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(map.get(key));
&nbsp;&nbsp;&nbsp;&nbsp;}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>2.使用 values 遍历：</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">&nbsp;&nbsp;&nbsp;&nbsp;Collection&nbsp;values&nbsp;=&nbsp;map.values();
&nbsp;&nbsp;&nbsp;&nbsp;Iterator&nbsp;iterator&nbsp;=&nbsp;values.iterator();
&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(iterator.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;value&nbsp;&quot;&nbsp;+&nbsp;iterator.next());
&nbsp;&nbsp;&nbsp;&nbsp;}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>3.使用 Entry 遍历</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">&nbsp;&nbsp;&nbsp;&nbsp;Set&nbsp;entrySet&nbsp;=&nbsp;map.entrySet();
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Object&nbsp;o&nbsp;:&nbsp;entrySet)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map.Entry&nbsp;entry&nbsp;=&nbsp;(Map.Entry)&nbsp;o;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(entry);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//key=value
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(entry.getKey()&nbsp;+&nbsp;&quot;&nbsp;/&nbsp;&quot;&nbsp;+&nbsp;entry.getValue());
&nbsp;&nbsp;&nbsp;&nbsp;}</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Map 的实现类</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161025193344555\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">Map 的实现类主要有 4 种：</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: \" class=\" list-paddingleft-2\"><li><p>Hashtable&nbsp;<br/></p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p>古老，线程安全</p></li></ul><li><p>HashMap&nbsp;<br/></p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p>速度很快，但没有顺序</p></li></ul><li><p>TreeMap&nbsp;<br/></p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p>有序的，效率比 HashMap 低</p></li></ul><li><p>LinkedHashMap&nbsp;<br/></p></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p>结合 HashMap 和 TreeMap 的有点，有序的同时效率也不错，仅比 HashMap 慢一点</p></li></ul></ul><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">其中后三个的区别很类似&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52929523\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Set 的实现类</a>：</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: \" class=\" list-paddingleft-2\"><li><p>HashSet</p></li><li><p>TreeSet</p></li><li><p>LinkedHashSet</p></li></ul><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">Map 的每个实现类都应该实现 2 个构造方法：</p><ol style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: \" class=\" list-paddingleft-2\"><li><p>无参构造方法，用于创建一个空的 map</p></li><li><p>参数是 Map 的构造方法，用于创建一个包含参数内容的新 map</p></li></ol><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">第二种构造方法允许我们复制一个 map。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">虽然没有强制要求，但自定义 Map 实现类时最好都这样来。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>总结</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">Map 有以下特点：</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: \" class=\" list-paddingleft-2\"><li><p>没有重复的 key</p></li><li><p>每个 key 只能对应一个 value, 多个 key 可以对应一个 value</p></li><li><p>key,value 都可以是任何引用类型的数据，包括 null</p></li><li><p>Map 取代了古老的 Dictionary 抽象类</p></li></ul><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">注意：&nbsp;<br/>可以使用 Map 作为 Map 的值，但禁止使用 Map 作为 Map 的键。因为在这么复杂的 Map 中，equals() 方法和 hashCode() 比较难定义。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">另一方面，你应该尽量避免使用“可变”的类作为 Map 的键。如果你将一个对象作为键值并保存在 Map 中，之后又改变了其状态，那么 Map 就会产生混乱，你所保存的值可能丢失。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Thanks</h2><p><br/></p>' WHERE `id` = 217 [ RunTime:0.1097s ]

[ 2016-11-20T22:00:37+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000744s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001412s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0062s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0018s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T22:00:41+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000446s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000887s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0037s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T22:01:42+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000523s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000900s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0042s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0044s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0042s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 51  [ RunTime:0.0002s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('Git详解之一 Git起步','87','51','<p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">起步</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">本章介绍开始使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">前的相关知识。我们会先了解一些<a href=\"http://lib.csdn.net/base/git\" class=\"replace_word\" title=\"Git知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">版本控制</a>工具的历史背景，然后试着让</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">在你的系统上跑起来，直到最后配置好，可以正常开始开发工作。读完本章，你就会明白为什么</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会如此流行，为什么你应该立即开始使用它。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">1.1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">关于版本控制</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">什么是版本控制？我真的需要吗？版本控制是一种记录若干文件内容变化，以便将来查阅特定版本修订情况的系统。在本书所展示的例子中，我们仅对保存着软件源代码的文本文件作版本控制管理，但实际上，你可以对任何类型的文件进行版本控制。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果你是位图形或网页设计师，可能会需要保存某一幅图片或页面布局文件的所有修订版本（这或许是你非常渴望拥有的功能）。采用版本控制系统</span><span style=\"color: rgb(64, 64, 64);\">（</span><span style=\"color: rgb(64, 64, 64);\">VCS</span><span style=\"color: rgb(64, 64, 64);\">）是个明智的选择。有了它你就可以将某个文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态。你可以比较文件的变化细节，查出最</span><span style=\"color: rgb(64, 64, 64);\">后是谁修改了哪个地方，从而导致出现怪异问题，又是谁在何时报告了某个功能缺陷等等。使用版本控制系统通常还意味着，就算你乱来一气把整个项目中的文件改</span><span style=\"color: rgb(64, 64, 64);\">的改删的删，你也照样可以轻松恢复到原先的样子。但额外增加的工作量却微乎其微。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">本地版本控制系统</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">许多人习惯用复制整个项目目录的方式来保存不同的版本，或许还会改名加上备份时间以示区别。这么做唯一的好处就是简单。不过坏处也不少：有时候会混淆所在的工作目录，一旦弄错文件丢了数据就没法撤销恢复。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">为了解决这个问题，人们很久以前就开发了许多种本地版本控制系统，大多都是采用某种简单的<a href=\"http://lib.csdn.net/base/mysql\" class=\"replace_word\" title=\"MySQL知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">数据库</a>来记录文件的历次更新差异（见图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;1-1</span><span style=\"color: rgb(64, 64, 64);\">）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;1-1.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">本地版本控制系统</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">其中最流行的一种叫做</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;rcs</span><span style=\"color: rgb(64, 64, 64);\">，现今许多计算机系统上都还看得到它的踪影。甚至在流行的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Mac OS X&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">系统上安装了开发者工具包之后，也可以使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;rcs&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令。它的工作原理基本上就是保存并管理文件补丁（</span><span style=\"color: rgb(64, 64, 64);\">patch</span><span style=\"color: rgb(64, 64, 64);\">）。文件补丁是一种特定格式的文本文件，记录着对应文件修订前后的内容变化。所以，根据每次</span><span style=\"color: rgb(64, 64, 64);\">修订后的补丁，</span><span style=\"color: rgb(64, 64, 64);\">rcs&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">可以通过不断打补丁，计算出各个版本的文件内容。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">集中化的版本控制系统</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">接下来人们又遇到一个问题，如何让在不同系统上的开发者协同工作？于是，集中化的版本控制系统（</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Centralized Version Control Systems</span><span style=\"color: rgb(64, 64, 64);\">，简称</span><span style=\"color: rgb(64, 64, 64);\">CVCS&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">）应运而生。这类系统，诸如</span><span style=\"color: rgb(64, 64, 64);\">CVS</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">Subversion</span><span style=\"color: rgb(64, 64, 64);\">以及</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Perforce&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。多年以来，这</span><span style=\"color: rgb(64, 64, 64);\">已成为版本控制系统的标准做法（见图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;1-2</span><span style=\"color: rgb(64, 64, 64);\">）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;1-2.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">集中化的版本控制系统</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">这种做法带来了许多好处，特别是相较于老式的本地</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;VCS&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">来说。现在，每个人都可以在一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;CVCS&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">要远比在各个客户端上维护本地数据库来得轻松容易。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">事分两面，有好有坏。这么做最显而易见的缺点是中央服务器的单点故障。如果宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。要</span><span style=\"color: rgb(64, 64, 64);\">是中央服务器的磁盘发生故障，碰巧没做备份，或者备份不够及时，就还是会有丢失数据的风险。最坏的情况是彻底丢失整个项目的所有历史更改记录，而被客户端</span><span style=\"color: rgb(64, 64, 64);\">提取出来的某些快照数据除外，但这样的话依然是个问题，你不能保证所有的数据都已经有人事先完整提取出来过。本地版本控制系统也存在类似问题，只要整个项</span><span style=\"color: rgb(64, 64, 64);\">目的历史记录被保存在单一位置，就有丢失所有历史更新记录的风险。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">分布式版本控制系统</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">于是分布式版本控制系统（</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Distributed Version Control System</span><span style=\"color: rgb(64, 64, 64);\">，简称</span><span style=\"color: rgb(64, 64, 64);\">DVCS&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">）面世了。在这类系统中，像</span><span style=\"color: rgb(64, 64, 64);\">Git</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">Mercurial</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">Bazaar&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">以及</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Darcs&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">等，客户端并不只提取最新版本的文件快照，而是把原始的代码仓库完整地镜像下来。这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜</span><span style=\"color: rgb(64, 64, 64);\">像出来的本地仓库恢复。因为每一次的提取操作，实际上都是一次对代码仓库的完整备份（见图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;1-3</span><span style=\"color: rgb(64, 64, 64);\">）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;1-3.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分布式版本控制系统</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">更进一步，许多这类系统都可以指定和若干不同的远端代码仓库进行交互。籍此，你就可以在同一个项目中，分别和不同工作小组的人相互协作。你可以根据需要设定不同的协作流程，比如层次模型式的工作流，而这在以前的集中式系统中是无法实现的。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">1.2 Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">简史</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">同生活中的许多伟大事件一样，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">诞生于一个极富纷争大举创新的年代。</span><span style=\"color: rgb(64, 64, 64);\"><a href=\"http://lib.csdn.net/base/linux\" class=\"replace_word\" title=\"Linux知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">Linux</a>&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">内核开源项目有着为数众广的参与者。绝大多数的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Linux&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">内核维护工作都花在了提交补丁和保存归档的繁琐事务上（</span><span style=\"color: rgb(64, 64, 64);\">1991</span><span style=\"color: rgb(64, 64, 64);\">－</span><span style=\"color: rgb(64, 64, 64);\">2002</span><span style=\"color: rgb(64, 64, 64);\">年间）。到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;2002&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">年，整个项目组开始启用分布式版本控制系统</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;BitKeeper&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">来管理和维护代码。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">到了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;2005&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">年，开发</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;BitKeeper&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的商业公司同</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Linux&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">内核开源社区的合作关系结束，他们收回了免费使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;BitKeeper&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的权力。这就迫使</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Linux&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">开源社区（特别是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Linux&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的缔造者</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Linus Torvalds&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">）不得不吸取教训，只有开发一套属于自己的版本控制系统才不至于重蹈覆辙。他们对新的系统制订了若干目标：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">*&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">速度</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;*&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">简单的设计</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;*&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对非线性开发模式的强力支持（允许上千个并行开发的分支）</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;*&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">完全分布式</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;*&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">有能力高效管理类似</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Linux&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">内核一样的超大规模项目（速度和数据量）</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">自诞生于</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;2005&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">年以来，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">日臻成熟完善，在高度易用的同时，仍然保留着初期设定的目标。它的速度飞快，极其适合管理大项目，它还有着令人难以置信的非线性分支管理系统（见第三章），可以应付各种复杂的项目开发需求。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">1.3 Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">基础</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">那么，简单地说，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">究竟是怎样的一个系统呢？请注意，接下来的内容非常重要，若是理解了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的思想和基本工作原理，用起来就会知其所以然，游刃有余。在开始学习</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的时候，请不要尝试把各种概念和其他版本控制系统（诸如</span><span style=\"color: rgb(64, 64, 64);\">Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Perforce&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">等）相比拟，否则容易混淆每个操作的实际意义。</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">在保存和处理各种信息的时候，虽然操作起来的命令形式非常相近，但它与其他版本控制系统的做法颇为不同。理解这些差异将有助于你准确地使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">提供的各种工具。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">直接记录快照，而非差异比较</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和其他版本控制系统的主要差别在于，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">只关心文件数据的整体是否发生变化，而大多数其他系统则只关心文件内容的具体差异。这类系统</span><span style=\"color: rgb(64, 64, 64);\">（</span><span style=\"color: rgb(64, 64, 64);\">CVS</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">Subversion</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">Perforce</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">Bazaar&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">等等）每次记录有哪些文件作了更新，以及都更新了哪些行的什么内容，请看图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;1-4</span><span style=\"color: rgb(64, 64, 64);\">。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;1-4.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">其他系统在每个版本中记录着各个文件的具体差异</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">并不保存这些前后变化的差异数据。实际上，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">更像是把变化的文件作快照后，记录在一个微型的文件系统中。每次提交更新时，它会纵览一遍所有文件的指纹信息并对文件作一快照，然后保存一个指向这次快照</span><span style=\"color: rgb(64, 64, 64);\">的索引。为提高性能，若文件没有变化，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">不会再次保存，而只对上次保存的快照作一链接。</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的工作方式就像图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;1-5&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所示。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;1-5. Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">保存每次更新时的文件快照</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">这是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">同其他系统的重要区别。它完全颠覆了传统版本控制的套路，并对各个环节的实现方式作了新的设计。</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">更像是个小型的文件系统，但它同时还提供了许多以此为基础的超强工具，而不只是一个简单的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;VCS</span><span style=\"color: rgb(64, 64, 64);\">。稍后在第三章讨论</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支管理的时候，我们会再看看这样的设计究竟会带来哪些好处。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">近乎所有操作都是本地执行</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">中的绝大多数操作都只需要访问本地文件和资源，不用连网。但如果用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;CVCS&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的话，差不多所有操作都需要连接网络。因为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">在本地磁盘上就保存着所有当前项目的历史更新，所以处理起来速度飞快。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">举个例子，如果要浏览项目的历史更新摘要，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">不用跑到外面的服务器上去取数据回来，而直接从本地数据库读取后展示给你看。所以任何时候你都可以马上翻阅，无需等待。如果想要看当前版本的文件和一个月</span><span style=\"color: rgb(64, 64, 64);\">前的版本之间有何差异，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会取出一个月前的快照和当前文件作一次差异运算，而不用请求远程服务器来做这件事，或是把老版本的文件拉到本地来作比较。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;CVCS&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的话，没有网络或者断开</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;VPN&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">你就无法做任何事情。但用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的话，就算你在飞机或者火车上，都可以非常愉快地频繁提交更新，等到了有网络的时候再上传到远程仓库。同样，在回家的路上，不用连接</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;VPN&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">你也可以继续工作。换作其他版本控制系统，这么做几乎不可能，抑或非常麻烦。比如</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Perforce</span><span style=\"color: rgb(64, 64, 64);\">，如果不连到服务器，几乎什么都做不了（译注：默认无法发出命令</span><span style=\"color: rgb(64, 64, 64);\">p4 edit file</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">开始编辑文件，因为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Perforce&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">需要联网通知系统声明该文件正在被谁修订。但实际上手工修改文件权限可以绕过这个限制，只是完成后还是无法提交更新。）；如果是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">或</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;CVS</span><span style=\"color: rgb(64, 64, 64);\">，虽然可以编辑文件，但无法提交更新，因为数据库在网络上。看上去好像这些都不是什么大问题，但实际体验过之后，你就会惊喜地发现，这其实是会带来很大不同的。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">时刻保持数据完整性</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">在保存到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">之前，所有数据都要进行内容的校验和（</span><span style=\"color: rgb(64, 64, 64);\">checksum</span><span style=\"color: rgb(64, 64, 64);\">）计算，并将此结果作为数据的唯一标识和索引。换句话说，不可能在你修改了文件或目录之后，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">一无所知。这项特性作为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的设计哲学，建在整体<a href=\"http://lib.csdn.net/base/architecture\" class=\"replace_word\" title=\"大型网站架构知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">架构</a>的最底层。所以如果文件在传输时变得不完整，或者磁盘损坏导致文件数据缺失，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">都能立即察觉。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\"><a href=\"http://lib.csdn.net/base/datastructure\" class=\"replace_word\" title=\"算法与数据结构知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">算法</a>计算数据的校验和，通过对文件的内容或目录的结构计算出一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">哈希值，作为指纹字符串。该字串由</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;40&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">个十六进制字符（</span><span style=\"color: rgb(64, 64, 64);\">0-9&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">及</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;a-f</span><span style=\"color: rgb(64, 64, 64);\">）组成，看起来就像是：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">24b9da6552252987aa493b52f8696cd6d3b00373</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的工作完全依赖于这类指纹字串，所以你会经常看到这样的哈希值。实际上，所有保存在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">数据库中的东西都是用此哈希值来作索引的，而不是靠文件名。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">多数操作仅添加数据</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">常用的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">操作大多仅仅是把数据添加到数据库。因为任何一种不可逆的操作，比如删除数据，都会使回退或重现历史版本变得困难重重。在别的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;VCS&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">中，若还未提交更新，就有可能丢失或者混淆一些修改的内容，但在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">里，一旦提交快照之后就完全不用担心丢失数据，特别是养成定期推送到其他仓库的习惯的话。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">这种高可靠性令我们的开发工作安心不少，尽管去做各种试验性的尝试好了，再怎样也不会弄丢数据。至于</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">内部究竟是如何保存和恢复数据的，我们会在第九章讨论</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">内部原理时再作详述。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">文件的三种状态</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">好，现在请注意，接下来要讲的概念非常重要。对于任何一个文件，在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">内都只有三种状态：已提交（</span><span style=\"color: rgb(64, 64, 64);\">committed</span><span style=\"color: rgb(64, 64, 64);\">），已修改（</span><span style=\"color: rgb(64, 64, 64);\">modified</span><span style=\"color: rgb(64, 64, 64);\">）和已暂存（</span><span style=\"color: rgb(64, 64, 64);\">staged</span><span style=\"color: rgb(64, 64, 64);\">）。已提交表示该文件已经被安全地保存在本地数据库</span><span style=\"color: rgb(64, 64, 64);\">中了；已修改表示修改了某个文件，但还没有提交保存；已暂存表示把已修改的文件放在下次提交时要保存的清单中。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">由此我们看到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">管理项目时，文件流转的三个工作区域：</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的工作目录，暂存区域，以及本地仓库。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;1-6.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">工作目录，暂存区域，以及本地仓库</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">每个项目都有一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录（译注：如果</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git clone</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">出来的话，就是其中</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">.git</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的目录；如果</span><span style=\"color: rgb(64, 64, 64);\">git clone --bare</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的话，新建的目录本身就是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录。），它是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">用来保存元数据和对象数据库的地方。该目录非常重要，每次克隆镜像仓库的时候，实际拷贝的就是这个目录里面的数据。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">从项目中取出某个版本的所有文件和目录，用以开始后续工作的叫做工作目录。这些文件实际上都是从</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录中的压缩对象数据库中提取出来的，接下来就可以在工作目录中对这些文件进行编辑。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">所谓的暂存区域只不过是个简单的文件，一般都放在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录中。有时候人们会把这个文件叫做索引文件，不过标准说法还是叫暂存区域。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">基本的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">工作流程如下：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">1.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">在工作目录中修改某些文件。</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;2.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对修改后的文件进行快照，然后保存到暂存区域。</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">提交更新，将保存在暂存区域的文件快照永久转储到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录中。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">所以，我们可以从文件所处的位置来判断状态：如果是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录中保存着的特定版本文件，就属于已提交状态；如果作了修改并已放入暂存区域，就属于已暂存状态；如果自上次取出后，作了修改但还没有放到暂存区域，就</span><span style=\"color: rgb(64, 64, 64);\">是已修改状态。到第二章的时候，我们会进一步了解其中细节，并学会如何根据文件状态实施后续操作，以及怎样跳过暂存直接提交。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">1.4&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">安装</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">是时候动手尝试下</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">了，不过得先安装好它。有许多种安装方式，主要分为两种，一种是通过编译源代码来安装；另一种是使用为特定平台预编译好的安装包。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">从源代码安装</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">若是条件允许，从源代码安装有很多好处，至少可以安装最新的版本。</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的每个版本都在不断尝试改进用户体验，所以能通过源代码自己编译安装最新版本就再好不过了。有些</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Linux&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">版本自带的安装包更新起来并不及时，所以除非你在用最新的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;distro&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">或者</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;backports</span><span style=\"color: rgb(64, 64, 64);\">，那么从源代码安装其实该算是最佳选择。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的工作需要调用</span><span style=\"color: rgb(64, 64, 64);\">curl</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">zlib</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">openssl</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">expat</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">libiconv&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">等库的代码，所以需要先安装这些依赖工具。在有</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;yum&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的系统上（比如</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Fedora</span><span style=\"color: rgb(64, 64, 64);\">）或者有</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;apt-get&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的系统上（比如</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Debian&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">体系），可以用下面的命令安装：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ yum install curl-devel expat-devel gettext-devel \\</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; openssl-develzlib-devel</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ apt-get install libcurl4-gnutls-dev libexpat1-devgettext \\</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; libz-devlibssl-dev</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">之后，从下面的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">官方站点下载最新版本源代码：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">http://git-scm.com/download</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">然后编译并安装：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ tar -zxf git-1.7.2.2.tar.gz</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ cd git-1.7.2.2</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ make prefix=/usr/local all</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ sudo make prefix=/usr/local install</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在已经可以用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令了，用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">把</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">项目仓库克隆到本地，以便日后随时更新：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git clone git://git.kernel.org/pub/scm/git/git.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Linux&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">上安装</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果要在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Linux&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">上安装预编译好的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">二进制安装包，可以直接用系统提供的包管理工具。在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Fedora&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">上用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;yum&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">安装：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ yum install git-core</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Ubuntu&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">这类</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Debian&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">体系的系统上，可以用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;apt-get&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">安装：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ apt-get install git-core</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Mac&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">上安装</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Mac&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">上安装</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">有两种方式。最容易的当属使用图形化的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">安装工具，界面如图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;1-7</span><span style=\"color: rgb(64, 64, 64);\">，下载地址在：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">http://code.google.com/p/git-osx-installer</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;1-7. GitOS X&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">安装工具</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">另一种是通过</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;MacPorts (</span><span style=\"color: rgb(64, 64, 64);\">http://www.macports.org</span><span style=\"color: rgb(64, 64, 64);\">)&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">安装。如果已经装好了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;MacPorts</span><span style=\"color: rgb(64, 64, 64);\">，用下面的命令安装</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git</span><span style=\"color: rgb(64, 64, 64);\">：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ sudo port install git-core +svn +doc +bash_completion+gitweb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">这种方式就不需要再自己安装依赖库了，</span><span style=\"color: rgb(64, 64, 64);\">Macports&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会帮你搞定这些麻烦事。一般上面列出的安装选项已经够用，要是你想用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">连接</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的代码仓库，还可以加上</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;+svn&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">选项，具体将在第八章作介绍。（译注：还有一种是使用</span><span style=\"color: rgb(64, 64, 64);\">homebrew</span><span style=\"color: rgb(64, 64, 64);\">（</span><span style=\"color: rgb(64, 64, 64);\">https://github.com/mxcl/homebrew</span><span style=\"color: rgb(64, 64, 64);\">）：</span><span style=\"color: rgb(64, 64, 64);\">brewinstall git</span><span style=\"color: rgb(64, 64, 64);\">。）</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Windows&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">上安装</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Windows&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">上安装</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">同样轻松，有个叫做</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;msysGit&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的项目提供了安装包，可以到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Google Code&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的页面上下载</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;exe</span><span style=\"color: rgb(64, 64, 64);\">安装文件并运行：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">http://code.google.com/p/msysgit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">完成安装之后，就可以使用命令行的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">工具（已经自带了</span><span style=\"color: rgb(64, 64, 64);\">ssh&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">客户端）了，另外还有一个图形界面的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">项目管理工具。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">1.5&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">初次运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">前的配置</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">一般在新的系统上，我们都需要先配置下自己的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">工作环境。配置工作只需一次，以后升级时还会沿用现在的配置。当然，如果需要，你随时可以用相同的命令修改已有的配置。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">提供了一个叫做</span><span style=\"color: rgb(64, 64, 64);\">git config&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的工具（译注：实际是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git-config</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令，只不过可以通过</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">加一个名字来呼叫此命令。），专门用来配置或读取相应的工作环境变量。而正是由这些环境变量，决定了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">/etc/gitconfig</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件：系统中对所有用户都普遍适用的配置。若使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git config</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">时用</span><span style=\"color: rgb(64, 64, 64);\">--system</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">选项，读写的就是这个文件。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">~/.gitconfig</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件：用户目录下的配置文件只适用于该用户。若使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git config</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">时用</span><span style=\"color: rgb(64, 64, 64);\">--global</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">选项，读写的就是这个文件。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">当前项目的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录中的配置文件（也就是工作目录中的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">.git/config</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以</span><span style=\"color: rgb(64, 64, 64);\">.git/config</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">里的配置会覆盖</span><span style=\"color: rgb(64, 64, 64);\">/etc/gitconfig</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">中的同名变量。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Windows&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">系统上，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会找寻用户主目录下的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">.gitconfig</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件。主目录即</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">$HOME</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">变量指定的目录，一般都是</span><span style=\"color: rgb(64, 64, 64);\">C:\\Documents and Settings\\$USER</span><span style=\"color: rgb(64, 64, 64);\">。此外，</span><span style=\"color: rgb(64, 64, 64);\">Git</span><span style=\"color: rgb(64, 64, 64);\">还会尝试找寻</span><span style=\"color: rgb(64, 64, 64);\">/etc/gitconfig</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件，只不过看当初</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">装在什么目录，就以此作为根目录来定位。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">用户信息</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git config --global user.name &quot;John Doe&quot;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git config --global user.email johndoe@example.com</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果用了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">--global</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉</span><span style=\"color: rgb(64, 64, 64);\">--global</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">选项重新配置即可，新的设定保存在当前项目的</span><span style=\"color: rgb(64, 64, 64);\">.git/config</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件里。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">文本编辑器</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">接下来要设置的是默认使用的文本编辑器。</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">需要你输入一些额外消息的时候，会自动调用一个外部文本编辑器给你用。默认会使用<a href=\"http://lib.csdn.net/base/operatingsystem\" class=\"replace_word\" title=\"操作系统知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">操作系统</a>指定的默认编辑器，一般可能会是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Vi&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">或者</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Vim</span><span style=\"color: rgb(64, 64, 64);\">。如果你有其他偏好，比如</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Emacs&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的话，可以重新设置：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git config --global core.editor emacs</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">差异分析工具</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;vimdiff&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的话：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git config --global merge.tool vimdiff</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">可以理解</span><span style=\"color: rgb(64, 64, 64);\">kdiff3</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">tkdiff</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">meld</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">xxdiff</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">emerge</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">vimdiff</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">gvimdiff</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">ecmerge</span><span style=\"color: rgb(64, 64, 64);\">，和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;opendiff&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">等合并工具的输出信息。当然，你也可以指定使用自己开发的工具，具体怎么做可以参阅第七章。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">查看配置信息</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">要检查已有的配置信息，可以使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git config --list</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git config --list</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">user.name=Scott Chacon</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">user.email=schacon@gmail.com</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">color.status=auto</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">color.branch=auto</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">color.interactive=auto</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">color.diff=auto</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">...</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">/etc/gitconfig</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">~/.gitconfig</span><span style=\"color: rgb(64, 64, 64);\">），不过最终</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">实际采用的是最后一个。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git config user.name</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Scott Chacon</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">1.6&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">获取帮助</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">想了解</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的各式工具该怎么用，可以阅读它们的使用帮助，方法有三：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git help</span></span><span style=\"font-size: 18px; color: rgb(64, 64, 64);\">&nbsp; &nbsp; &nbsp; &nbsp;</span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px; color: rgb(64, 64, 64);\">$ git</span><span style=\"color: rgb(64, 64, 64); font-size: 18px;\">--help</span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ man git-</span></span><span style=\"font-size: 18px; color: rgb(64, 64, 64);\">&nbsp; &nbsp;&nbsp;</span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">比如，要学习</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;config&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令可以怎么用，运行：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git help config</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">我们随时都可以浏览这些帮助信息而无需连网。不过，要是你觉得还不够，可以到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Frenode IRC&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">服务器（</span><span style=\"color: rgb(64, 64, 64);\">irc.freenode<a href=\"http://lib.csdn.net/base/dotnet\" class=\"replace_word\" title=\".NET知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">.NET</a></span><span style=\"color: rgb(64, 64, 64);\">）上的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">#git</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">或</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">#github</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">频道寻求他人帮助。这两个频道上总有着上百号人，大多都有着丰富的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;git</span><span style=\"color: rgb(64, 64, 64);\">知识，并且乐于助人。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">1.7&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">小结</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">至此，你该对</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">有了点基本认识，包括它和以前你使用的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;CVCS&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">之间的差别。现在，在你的系统上应该已经装好了</span><span style=\"color: rgb(64, 64, 64);\">Git</span><span style=\"color: rgb(64, 64, 64);\">，设置了自己的名字和电邮。接下来让我们继续学习</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的基础知识。</span></span></p><p><br/></p>','0','2016-11-20 10:01:42') [ RunTime:0.3839s ]

[ 2016-11-20T22:01:44+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000745s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001311s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0035s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0030s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0005s ]

[ 2016-11-20T22:01:49+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000442s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000845s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0042s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 10,10   [ RunTime:0.0007s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T22:01:50+08:00 ] ::1 /think_blog/Home/Article/personInfo
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000437s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000827s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0036s ]
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0039s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,m.member_name AS `member_name`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name`,COUNT(ac.id) AS `article_comment_count` FROM `member` `m` LEFT JOIN article a ON a.member_id=m.id LEFT JOIN article_type at ON a.article_type_id=at.id LEFT JOIN article_comment ac ON a.id=ac.article_id  WHERE a.id = '218' GROUP BY a.id  [ RunTime:0.0006s ]

[ 2016-11-20T22:01:50+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000425s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000749s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0040s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T22:01:58+08:00 ] ::1 /think_blog/Home/Article/personEdit
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000492s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001337s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0044s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0043s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0040s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 50  [ RunTime:0.0002s ]
SQL: UPDATE `article` SET `title`='Java 集合深入理解（9）：AbstractMap',`member_id`='87',`article_type_id`='50',`content`='<h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \">什么是 AbstractMap</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">AbstractMap 是&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52929523\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Map 接口的</a>的实现类之一，也是 HashMap, TreeMap, ConcurrentHashMap 等类的父类。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \"><img src=\"http://img.blog.csdn.net/20161027110129194\" alt=\"这里写图片描述\" title=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">AbstractMap 提供了 Map 的基本实现，使得我们以后要实现一个 Map 不用从头开始，只需要继承 AbstractMap, 然后按需求实现/重写对应方法即可。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">AbstarctMap 中唯一的抽象方法：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;abstract&nbsp;Set&lt;Entry&gt;&nbsp;entrySet();</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">当我们要实现一个&nbsp;<strong style=\"box-sizing: border-box;\">不可变</strong>的 Map 时，只需要继承这个类，然后实现&nbsp;<code style=\"box-sizing: border-box; font-family: \">entrySet()</code>&nbsp;方法，这个方法返回一个保存所有 key-value 映射的 set。 通常这个 Set 不支持 add(), remove() 方法，Set 对应的迭代器也不支持 remove() 方法。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">如果想要实现一个&nbsp;<strong style=\"box-sizing: border-box;\">可变的</strong>&nbsp;Map,我们需要在上述操作外，重写 put() 方法，因为 默认不支持 put 操作：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;V&nbsp;put(K&nbsp;key,&nbsp;V&nbsp;value)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;UnsupportedOperationException();
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">而且 entrySet() 返回的 Set 的迭代器，也得实现 remove() 方法，因为 AbstractMap 中的 删除相关操作都需要调用该迭代器的 remove() 方法。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">正如其他集合推荐的那样，比如&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52829912\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">AbstractCollection 接口</a>&nbsp;，实现类最好提供两种构造方法：</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: \" class=\" list-paddingleft-2\"><li><p>一种是不含参数的，返回一个空 map</p></li><li><p>一种是以一个 map 为参数，返回一个和参数内容一样的 map</p></li></ul><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>AbstractMap 的成员变量</h2><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">transient&nbsp;volatile&nbsp;Set&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keySet;
transient&nbsp;volatile&nbsp;Collection&nbsp;values;</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">有两个成员变量：</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: \" class=\" list-paddingleft-2\"><li><p>keySet, 保存 map 中所有键的 Set</p></li><li><p>values, 保存 map 中所有值的集合</p></li></ul><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">他们都是 transient, volatile, 分别表示不可序列化、并发环境下变量的修改能够保证线程可见性。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">需要注意的是 volatile 只能保证可见性，不能保证原子性，需要保证操作是原子性操作，才能保证使用 volatile 关键字的程序在并发时能够正确执行。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>AbstractMap 的成员方法</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">AbstractMap 中实现了许多方法，实现类会根据自己不同的要求选择性的覆盖一些。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">接下来根据看看 AbstractMap 中的方法。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>1.添加</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;V&nbsp;put(K&nbsp;key,&nbsp;V&nbsp;value)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;UnsupportedOperationException();
}

public&nbsp;void&nbsp;putAll(Map&nbsp;m)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Map.Entry&nbsp;e&nbsp;:&nbsp;m.entrySet())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;put(e.getKey(),&nbsp;e.getValue());
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">可以看到默认是不支持添加操作的，实现类需要重写 put() 方法。</p><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>2.删除</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;V&nbsp;remove(Object&nbsp;key)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//获取保存&nbsp;Map.Entry&nbsp;集合的迭代器
&nbsp;&nbsp;&nbsp;&nbsp;Iterator&lt;Entry&gt;&nbsp;i&nbsp;=&nbsp;entrySet().iterator();
&nbsp;&nbsp;&nbsp;&nbsp;Entry&nbsp;correctEntry&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;//遍历查找，当某个&nbsp;Entry&nbsp;的&nbsp;key&nbsp;和&nbsp;指定&nbsp;key&nbsp;一致时结束
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(key==null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(correctEntry==null&nbsp;&amp;&amp;&nbsp;i.hasNext())&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entry&nbsp;e&nbsp;=&nbsp;i.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(e.getKey()==null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;correctEntry&nbsp;=&nbsp;e;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(correctEntry==null&nbsp;&amp;&amp;&nbsp;i.hasNext())&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entry&nbsp;e&nbsp;=&nbsp;i.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(key.equals(e.getKey()))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;correctEntry&nbsp;=&nbsp;e;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//找到了，返回要删除的值
&nbsp;&nbsp;&nbsp;&nbsp;V&nbsp;oldValue&nbsp;=&nbsp;null;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(correctEntry&nbsp;!=null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue&nbsp;=&nbsp;correctEntry.getValue();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//调用迭代器的&nbsp;remove&nbsp;方法
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i.remove();
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;oldValue;
}

//调用&nbsp;Set.clear()&nbsp;方法清除
public&nbsp;void&nbsp;clear()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;entrySet().clear();
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>3.获取</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">//时间复杂度为&nbsp;O(n)
//许多实现类都重写了这个方法
public&nbsp;V&nbsp;get(Object&nbsp;key)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//使用&nbsp;Set&nbsp;迭代器进行遍历，根据&nbsp;key&nbsp;查找
&nbsp;&nbsp;&nbsp;&nbsp;Iterator&lt;Entry&gt;&nbsp;i&nbsp;=&nbsp;entrySet().iterator();
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(key==null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(i.hasNext())&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entry&nbsp;e&nbsp;=&nbsp;i.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(e.getKey()==null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;e.getValue();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(i.hasNext())&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entry&nbsp;e&nbsp;=&nbsp;i.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(key.equals(e.getKey()))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;e.getValue();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;null;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>4.查询状态</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">//是否存在指定的&nbsp;key
//时间复杂度为&nbsp;O(n)
//许多实现类都重写了这个方法
public&nbsp;boolean&nbsp;containsKey(Object&nbsp;key)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//还是迭代器遍历，查找&nbsp;key，跟&nbsp;get()&nbsp;很像啊
&nbsp;&nbsp;&nbsp;&nbsp;Iterator&lt;Map.Entry&gt;&nbsp;i&nbsp;=&nbsp;entrySet().iterator();
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(key==null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(i.hasNext())&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entry&nbsp;e&nbsp;=&nbsp;i.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//getKey()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(e.getKey()==null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(i.hasNext())&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entry&nbsp;e&nbsp;=&nbsp;i.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(key.equals(e.getKey()))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
}


//查询是否存在指定的值
public&nbsp;boolean&nbsp;containsValue(Object&nbsp;value)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;Iterator&lt;Entry&gt;&nbsp;i&nbsp;=&nbsp;entrySet().iterator();
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(value==null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(i.hasNext())&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entry&nbsp;e&nbsp;=&nbsp;i.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//getValue()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(e.getValue()==null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(i.hasNext())&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entry&nbsp;e&nbsp;=&nbsp;i.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(value.equals(e.getValue()))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
}


public&nbsp;int&nbsp;size()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//使用&nbsp;Set.size()&nbsp;获取元素个数
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;entrySet().size();
}

public&nbsp;boolean&nbsp;isEmpty()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;size()&nbsp;==&nbsp;0;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>5.用于比较的 equals(), hashCode()</h3><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">//内部用来测试&nbsp;SimpleEntry,&nbsp;SimpleImmutableEntry&nbsp;是否相等的方法
private&nbsp;static&nbsp;boolean&nbsp;eq(Object&nbsp;o1,&nbsp;Object&nbsp;o2)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;o1&nbsp;==&nbsp;null&nbsp;?&nbsp;o2&nbsp;==&nbsp;null&nbsp;:&nbsp;o1.equals(o2);
}

//判断指定的对象是否和当前&nbsp;Map&nbsp;一致
//为什么参数不是泛型而是&nbsp;对象呢
//据说是创建这个方法时还没有泛型&nbsp;-&nbsp;-
public&nbsp;boolean&nbsp;equals(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//引用指向同一个对象
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(o&nbsp;==&nbsp;this)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;

&nbsp;&nbsp;&nbsp;&nbsp;//必须是&nbsp;Map&nbsp;的实现类
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!(o&nbsp;instanceof&nbsp;Map))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
&nbsp;&nbsp;&nbsp;&nbsp;//强转为&nbsp;Map
&nbsp;&nbsp;&nbsp;&nbsp;Map&nbsp;m&nbsp;=&nbsp;(Map)&nbsp;o;
&nbsp;&nbsp;&nbsp;&nbsp;//元素个数必须一致
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(m.size()&nbsp;!=&nbsp;size())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;

&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//还是需要一个个遍历，对比
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Iterator&lt;Entry&gt;&nbsp;i&nbsp;=&nbsp;entrySet().iterator();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(i.hasNext())&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//对比每个&nbsp;Entry&nbsp;的&nbsp;key&nbsp;和&nbsp;value
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entry&nbsp;e&nbsp;=&nbsp;i.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;K&nbsp;key&nbsp;=&nbsp;e.getKey();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;V&nbsp;value&nbsp;=&nbsp;e.getValue();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(value&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//对比&nbsp;key,&nbsp;value
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!(m.get(key)==null&nbsp;&amp;&amp;&nbsp;m.containsKey(key)))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!value.equals(m.get(key)))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(ClassCastException&nbsp;unused)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(NullPointerException&nbsp;unused)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
}

//整个&nbsp;map&nbsp;的&nbsp;hashCode()&nbsp;
public&nbsp;int&nbsp;hashCode()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;h&nbsp;=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;//是所有&nbsp;Entry&nbsp;哈希值的和
&nbsp;&nbsp;&nbsp;&nbsp;Iterator&lt;Entry&gt;&nbsp;i&nbsp;=&nbsp;entrySet().iterator();
&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(i.hasNext())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h&nbsp;+=&nbsp;i.next().hashCode();
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;h;
}</pre><h3 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>6.获取三个主要的视图</h3><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">获取所有的键:</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;Set&nbsp;keySet()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//如果成员变量&nbsp;keySet&nbsp;为&nbsp;null,创建个空的&nbsp;AbstractSet
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(keySet&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keySet&nbsp;=&nbsp;new&nbsp;AbstractSet()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Iterator&nbsp;iterator()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;Iterator()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Iterator&lt;Entry&gt;&nbsp;i&nbsp;=&nbsp;entrySet().iterator();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;hasNext()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i.hasNext();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;K&nbsp;next()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i.next().getKey();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;remove()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i.remove();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;size()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;AbstractMap.this.size();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;isEmpty()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;AbstractMap.this.isEmpty();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;clear()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AbstractMap.this.clear();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;contains(Object&nbsp;k)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;AbstractMap.this.containsKey(k);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;keySet;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">获取所有的值:</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;Collection&nbsp;values()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(values&nbsp;==&nbsp;null)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//没有就创建个空的&nbsp;AbstractCollection&nbsp;返回
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;values&nbsp;=&nbsp;new&nbsp;AbstractCollection()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Iterator&nbsp;iterator()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;Iterator()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Iterator&lt;Entry&gt;&nbsp;i&nbsp;=&nbsp;entrySet().iterator();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;hasNext()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i.hasNext();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;V&nbsp;next()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i.next().getValue();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;remove()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i.remove();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;size()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;AbstractMap.this.size();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;isEmpty()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;AbstractMap.this.isEmpty();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;clear()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AbstractMap.this.clear();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;contains(Object&nbsp;v)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;AbstractMap.this.containsValue(v);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;values;
}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">获取所有键值对，需要子类实现：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;abstract&nbsp;Set&lt;Entry&gt;&nbsp;entrySet();</pre><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>AbstractMap 中的内部类</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">正如&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52929523\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">Map 接口</a>&nbsp;中有内部类 Map.Entry 一样， AbstractMap 也有两个内部类：</p><ul style=\"box-sizing: border-box; color: rgb(85, 85, 85); font-family: \" class=\" list-paddingleft-2\"><li><p>SimpleImmutableEntry, 表示一个不可变的键值对</p></li><li><p>SimpleEntry, 表示可变的键值对</p></li></ul><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">SimpleImmutableEntry，不可变的键值对,实现了 Map.Entry &lt; K,V&gt; 接口：</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;static&nbsp;class&nbsp;SimpleImmutableEntry&nbsp;&nbsp;&nbsp;&nbsp;implements&nbsp;Entry,&nbsp;java.io.Serializable
{
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;final&nbsp;long&nbsp;serialVersionUID&nbsp;=&nbsp;7138329143949025153L;
&nbsp;&nbsp;&nbsp;&nbsp;//key-value
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;final&nbsp;K&nbsp;key;
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;final&nbsp;V&nbsp;value;

&nbsp;&nbsp;&nbsp;&nbsp;//构造函数，传入&nbsp;key&nbsp;和&nbsp;value
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;SimpleImmutableEntry(K&nbsp;key,&nbsp;V&nbsp;value)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.key&nbsp;&nbsp;&nbsp;=&nbsp;key;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.value&nbsp;=&nbsp;value;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//构造函数2，传入一个&nbsp;Entry，赋值给本地的&nbsp;key&nbsp;和&nbsp;value
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;SimpleImmutableEntry(Entry&nbsp;entry)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.key&nbsp;&nbsp;&nbsp;=&nbsp;entry.getKey();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.value&nbsp;=&nbsp;entry.getValue();
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//返回&nbsp;键
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;K&nbsp;getKey()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;key;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//返回&nbsp;值
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;V&nbsp;getValue()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;value;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//修改值，不可修改的&nbsp;Entry&nbsp;默认不支持这个操作
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;V&nbsp;setValue(V&nbsp;value)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;UnsupportedOperationException();
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//比较指定&nbsp;Entry&nbsp;和本地是否相等
&nbsp;&nbsp;&nbsp;&nbsp;//要求顺序，key-value&nbsp;必须全相等
&nbsp;&nbsp;&nbsp;&nbsp;//只要是&nbsp;Map&nbsp;的实现类即可，不同实现也可以相等
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;equals(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!(o&nbsp;instanceof&nbsp;Map.Entry))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map.Entry&nbsp;e&nbsp;=&nbsp;(Map.Entry)o;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;eq(key,&nbsp;e.getKey())&nbsp;&amp;&amp;&nbsp;eq(value,&nbsp;e.getValue());
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//哈希值
&nbsp;&nbsp;&nbsp;&nbsp;//是键的哈希与值的哈希的&nbsp;异或
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;hashCode()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(key&nbsp;&nbsp;&nbsp;==&nbsp;null&nbsp;?&nbsp;0&nbsp;:&nbsp;&nbsp;&nbsp;key.hashCode())&nbsp;^
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(value&nbsp;==&nbsp;null&nbsp;?&nbsp;0&nbsp;:&nbsp;value.hashCode());
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//返回一个&nbsp;String
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;toString()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;key&nbsp;+&nbsp;&quot;=&quot;&nbsp;+&nbsp;value;
&nbsp;&nbsp;&nbsp;&nbsp;}

}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">SimpleEntry, 可变的键值对:</p><pre style=\"white-space: pre-wrap; word-wrap: break-word; box-sizing: border-box; margin-top: 0px; margin-bottom: 10.5px; font-family: \">public&nbsp;static&nbsp;class&nbsp;SimpleEntry&nbsp;&nbsp;&nbsp;&nbsp;implements&nbsp;Entry,&nbsp;java.io.Serializable
{
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;final&nbsp;long&nbsp;serialVersionUID&nbsp;=&nbsp;-8499721149061103585L;

&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;final&nbsp;K&nbsp;key;
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;V&nbsp;value;

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;SimpleEntry(K&nbsp;key,&nbsp;V&nbsp;value)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.key&nbsp;&nbsp;&nbsp;=&nbsp;key;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.value&nbsp;=&nbsp;value;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;SimpleEntry(Entry&nbsp;entry)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.key&nbsp;&nbsp;&nbsp;=&nbsp;entry.getKey();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.value&nbsp;=&nbsp;entry.getValue();
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;K&nbsp;getKey()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;key;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;V&nbsp;getValue()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;value;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;//支持&nbsp;修改值
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;V&nbsp;setValue(V&nbsp;value)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;V&nbsp;oldValue&nbsp;=&nbsp;this.value;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.value&nbsp;=&nbsp;value;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;oldValue;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;equals(Object&nbsp;o)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!(o&nbsp;instanceof&nbsp;Map.Entry))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map.Entry&nbsp;e&nbsp;=&nbsp;(Map.Entry)o;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;eq(key,&nbsp;e.getKey())&nbsp;&amp;&amp;&nbsp;eq(value,&nbsp;e.getValue());
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;hashCode()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(key&nbsp;&nbsp;&nbsp;==&nbsp;null&nbsp;?&nbsp;0&nbsp;:&nbsp;&nbsp;&nbsp;key.hashCode())&nbsp;^
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(value&nbsp;==&nbsp;null&nbsp;?&nbsp;0&nbsp;:&nbsp;value.hashCode());
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;toString()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;key&nbsp;+&nbsp;&quot;=&quot;&nbsp;+&nbsp;value;
&nbsp;&nbsp;&nbsp;&nbsp;}

}</pre><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">SimpleEntry 与 SimpleImmutableEntry 唯一的区别就是支持 setValue() 操作。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>总结</h2><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">和&nbsp;<a href=\"http://blog.csdn.net/u011240877/article/details/52829912\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">AbstractCollection 接口</a>，<a href=\"http://blog.csdn.net/u011240877/article/details/52834074\" style=\"text-decoration: none; box-sizing: border-box; color: rgb(12, 137, 207);\">AbstractList 接口</a>&nbsp;作用相似， AbstractMap 是一个基础实现类，实现了 Map 的主要方法，默认不支持修改。</p><p style=\"margin-top: 0px; margin-bottom: 1.1em; padding: 0px; box-sizing: border-box; color: rgb(85, 85, 85); font-family: \">常用的几种 Map, 比如 HashMap, TreeMap, LinkedHashMap 都继承自它。</p><h2 style=\"margin: 0.8em 0px; padding: 0px; box-sizing: border-box; font-weight: 100; color: rgb(85, 85, 85); font-family: \"><a style=\"box-sizing: border-box; color: rgb(12, 137, 207);\"></a>Thanks</h2><p><br/></p>' WHERE `id` = 218 [ RunTime:0.0624s ]

[ 2016-11-20T22:01:59+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000651s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001292s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0065s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0023s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T22:02:00+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000452s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000847s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0042s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 10,10   [ RunTime:0.0008s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0004s ]

[ 2016-11-20T22:02:01+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000363s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000705s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0049s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0010s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T22:02:02+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000455s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000851s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0043s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 10,10   [ RunTime:0.0007s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0004s ]

[ 2016-11-20T22:02:14+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000439s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000838s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0042s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T22:02:38+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000372s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000744s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0045s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0044s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0043s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 51  [ RunTime:0.0002s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('Git详解之二 Git基础','87','51','<p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">基础</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">读完本章你就能上手使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">了。本章将介绍几个最基本的，也是最常用的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令，以后绝大多数时间里用到的也就是这几个命令。读完本章，你就能初始化一个新的代码仓库，做一些适当配置；开始或停止跟踪某些文件；暂存或提交某些更</span><span style=\"color: rgb(64, 64, 64);\">新。我们还会展示如何让</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">忽略某些文件，或是名称符合特定模式的文件；如何既快且容易地撤消犯下的小错误；如何浏览项目的更新历史，查看某两次更新之间的差异；以及如何从远程仓库</span><span style=\"color: rgb(64, 64, 64);\">拉数据下来或者推数据上去。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">2.1&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">取得项目的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">有两种取得</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">项目仓库的方法。第一种是在现存的目录下，通过导入所有文件来创建新的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库。第二种是从已有的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库克隆出一个新的镜像仓库来。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">在工作目录中初始化新仓库</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">要对现有的某个项目开始用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">管理，只需到此项目所在的目录，执行：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git init</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">初始化后，在当前目录下会出现一个名为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;.git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的目录，所有</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">需要的数据和资源都存放在这个目录中。不过目前，仅仅是按照既有的结构框架初始化好了里边所有的文件和目录，但我们还没有开始跟踪管理项目中的任何一个文件。（在第九章我们会详细说明刚才创建的</span><span style=\"color: rgb(64, 64, 64);\">.git</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录中究竟有哪些文件，以及都起些什么作用。）</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果当前目录下有几个文件想要纳入<a href=\"http://lib.csdn.net/base/git\" class=\"replace_word\" title=\"Git知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">版本控制</a>，需要先用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;git add&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令告诉</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">开始对这些文件进行跟踪，然后提交：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git add *.c</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git add README</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git commit -m &#39;initial project version&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">稍后我们再逐一解释每条命令的意思。不过现在，你已经得到了一个实际维护着若干文件的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">从现有仓库克隆</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果想对某个开源项目出一份力，可以先把该项目的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库复制一份出来，这就需要用到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;git clone&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令。如果你熟悉其他的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;VCS&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">比如</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion</span><span style=\"color: rgb(64, 64, 64);\">，你可能已经注意到这里使用的是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;clone&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">而不是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;checkout</span><span style=\"color: rgb(64, 64, 64);\">。这是个非常重要的差别，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">收取的是项目历史的所有数据（每一个文件的每一个版本），服务器上有的数据克隆之后本地也都有了。实际上，即便服务器的磁盘发生故障，用任何一个克隆出来</span><span style=\"color: rgb(64, 64, 64);\">的客户端都可以重建服务器上的仓库，回到当初克隆时的状态（虽然可能会丢失某些服务器端的挂钩设置，但所有版本的数据仍旧还在，有关细节请参考第四章）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">克隆仓库的命令格式为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitclone [url]</span><span style=\"color: rgb(64, 64, 64);\">。比如，要克隆</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Ruby&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">语言的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">代码仓库</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Grit</span><span style=\"color: rgb(64, 64, 64);\">，可以用下面的命令：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git clone git://github.com/schacon/grit.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">这会在当前目录下创建一个名为</span><span style=\"color: rgb(64, 64, 64);\">“grit”</span><span style=\"color: rgb(64, 64, 64);\">的目录，其中包含一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">.git</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的目录，用于保存下载下来的所有版本记录，然后从中取出最新版本的文件拷贝。如果进入这个新建的</span><span style=\"color: rgb(64, 64, 64);\">grit</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录，你会看到项目中的所有文件已经在里边了，准备好后续的开发和使用。如果希望在克隆的时候，自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git clone git://github.com/schacon/grit.git mygrit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">唯一的差别就是，现在新建的目录成了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;mygrit</span><span style=\"color: rgb(64, 64, 64);\">，其他的都和上边的一样。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">支持许多数据传输协议。之前的例子使用的是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git://</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">协议，不过你也可以用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">http(s)://</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">或者</span><span style=\"color: rgb(64, 64, 64);\">user@server:/path.git</span><span style=\"color: rgb(64, 64, 64);\">表示的</span><span style=\"color: rgb(64, 64, 64);\">SSH&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">传输协议。我们会在第四章详细介绍所有这些协议在服务器端该如何配置使用，以及各种方式之间的利弊。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">2.2&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">记录每次更新到仓库</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在我们手上已经有了一个真实项目的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库，并从这个仓库中取出了所有文件的工作拷贝。接下来，对这些文件作些修改，在完成了一个阶段的目标之后，提交本次更新到仓库。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">请记住，工作目录下面的所有文件都不外乎这两种状态：已跟踪或未跟踪。已跟踪的文件是指本来就被纳入版本控制管理的文件，在上次快照中有它们的记</span><span style=\"color: rgb(64, 64, 64);\">录，工作一段时间后，它们的状态可能是未更新，已修改或者已放入暂存区。而所有其他文件都属于未跟踪文件。它们既没有上次更新时的快照，也不在当前的暂存</span><span style=\"color: rgb(64, 64, 64);\">区域。初次克隆某个仓库时，工作目录中的所有文件都属于已跟踪文件，且状态为未修改。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">在编辑过某些文件之后，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">将这些文件标为已修改。我们逐步把这些修改过的文件放到暂存区域，直到最后一次性提交所有这些暂存起来的文件，如此重复。所以使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">时的文件状态变化周期如图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;2-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所示。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;2-1.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件的状态变化周期</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">检查当前文件状态</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">要确定哪些文件当前处于什么状态，可以用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;git status&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令。如果在克隆仓库之后立即执行此命令，会看到类似这样的输出：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git status</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># On branch master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">nothing to commit (working directory clean)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">这说明你现在的工作目录相当干净。换句话说，当前没有任何跟踪着的文件，也没有任何文件在上次提交后更改过。此外，上面的信息还表明，当前目录下没</span><span style=\"color: rgb(64, 64, 64);\">有出现任何处于未跟踪的新文件，否则</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会在这里列出来。最后，该命令还显示了当前所在的分支是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;master</span><span style=\"color: rgb(64, 64, 64);\">，这是默认的分支名称，实际是可以修改的，现在先不用考虑。下一章我们就会详细讨论分支和引用。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在让我们用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;vim&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">编辑一个新文件</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;README</span><span style=\"color: rgb(64, 64, 64);\">，保存退出后运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git status</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会看到该文件出现在未跟踪文件列表中：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ vim README</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git status</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># On branch master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Untracked files:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp; (use &quot;gitadd</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp; ...&quot; toinclude in what will be committed)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; README</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">nothing added to commit but untracked files present (use&quot;git add&quot; to track)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">就是在</span><span style=\"color: rgb(64, 64, 64);\">“Untracked files”</span><span style=\"color: rgb(64, 64, 64);\">这行下面。</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">不会自动将之纳入跟踪范围，除非你明明白白地告诉它</span><span style=\"color: rgb(64, 64, 64);\">“</span><span style=\"color: rgb(64, 64, 64);\">我需要跟踪该文件</span><span style=\"color: rgb(64, 64, 64);\">”</span><span style=\"color: rgb(64, 64, 64);\">，因而不用担心把临时文件什么的也归入版本管理。不过现在的例子中，我们确实想要跟踪管理</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;README&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">这个文件。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">跟踪新文件</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">使用命令</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitadd</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">开始跟踪一个新文件。所以，要跟踪</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;README&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件，运行：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git add README</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">此时再运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitstatus</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令，会看到</span><span style=\"color: rgb(64, 64, 64);\">README&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件已被跟踪，并处于暂存状态：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git status</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># On branch master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Changes to be committed:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp; (use &quot;gitreset HEAD</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp; ...&quot; tounstage)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newfile:&nbsp;&nbsp; README</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">只要在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;“Changes to be committed”&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">这行下面的，就说明是已暂存状态。如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。你可能会想起之前我们使用</span><span style=\"color: rgb(64, 64, 64);\">git init</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">后就运行了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git add</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令，开始跟踪当前目录下的文件。在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitadd</span><span style=\"color: rgb(64, 64, 64);\">后面可以指明要跟踪的文件或目录路径。如果是目录的话，就说明要递归跟踪该目录下的所有文件。（译注：其实</span><span style=\"color: rgb(64, 64, 64);\">git add</span><span style=\"color: rgb(64, 64, 64);\">的潜台词就是把目标文件快照放入暂存区域，也就是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;add file into staged area</span><span style=\"color: rgb(64, 64, 64);\">，同时未曾跟踪过的文件标记为需要跟踪。这样就好理解后续</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;add&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">操作的实际意义了。）</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">暂存已修改文件</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在我们修改下之前已跟踪过的文件</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">benchmarks.rb</span><span style=\"color: rgb(64, 64, 64);\">，然后再次运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">status</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令，会看到这样的状态报告：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git status</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># On branch master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Changes to be committed:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp; (use &quot;gitreset HEAD</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp; ...&quot; tounstage)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newfile:&nbsp;&nbsp; README</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Changed but not updated:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp; (use &quot;gitadd</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...&quot; toupdate what will be committed)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; modified:&nbsp;&nbsp; benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">文件</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;benchmarks.rb&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">出现在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;“Changed but not updated”&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。要暂存这次更新，需要运行</span><span style=\"color: rgb(64, 64, 64);\">git add</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令（这是个多功能命令，根据目标文件的状态不同，此命令的效果也不同：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等）。现在让我们运行</span><span style=\"color: rgb(64, 64, 64);\">git add</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">将</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;benchmarks.rb&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">放到暂存区，然后再看看</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git status</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的输出：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git add benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git status</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># On branch master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Changes to be committed:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp; (use &quot;gitreset HEAD</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp; ...&quot; tounstage)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newfile:&nbsp;&nbsp; README</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; modified:&nbsp;&nbsp; benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在两个文件都已暂存，下次提交时就会一并记录到仓库。假设此时，你想要在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;benchmarks.rb&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">里再加条注释，重新编辑存盘后，准备好提交。不过且慢，再运行</span><span style=\"color: rgb(64, 64, 64);\">git status</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">看看：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ vim benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git status</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># On branch master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Changes to be committed:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp; (use &quot;gitreset HEAD</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp; ...&quot; tounstage)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newfile:&nbsp;&nbsp; README</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; modified:&nbsp;&nbsp; benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Changed but not updated:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp; (use &quot;gitadd</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...&quot; toupdate what will be committed)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; modified:&nbsp;&nbsp; benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">怎么回事？</span><span style=\"color: rgb(64, 64, 64);\">benchmarks.rb&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件出现了两次！一次算未暂存，一次算已暂存，这怎么可能呢？好吧，实际上</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">只不过暂存了你运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;git add&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令时的版本，如果现在提交，那么提交的是添加注释前的版本，而非当前工作目录中的版本。所以，运行了</span><span style=\"color: rgb(64, 64, 64);\">git add</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">之后又作了修订的文件，需要重新运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git add</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">把最新版本重新暂存起来：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git add benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git status</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># On branch master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Changes to be committed:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp; (use &quot;gitreset HEAD</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp; ...&quot; tounstage)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newfile:&nbsp;&nbsp; README</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; modified:&nbsp;&nbsp; benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">忽略某些文件</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">一般我们总会有些文件无需纳入</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的管理，也不希望它们总出现在未跟踪文件列表。通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。我们可以创建一个名为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;.gitignore&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的文件，列出要忽略的文件模式。来看一个实际的例子：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ cat .gitignore</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">*.[oa]</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">*~</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">第一行告诉</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">忽略所有以</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;.o&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">或</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;.a&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的，我们用不着跟踪它们的版本。第二行告诉</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">忽略所有以波浪符（</span><span style=\"color: rgb(64, 64, 64);\">~</span><span style=\"color: rgb(64, 64, 64);\">）结尾的文件，许多文本编辑软件（比如</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Emacs</span><span style=\"color: rgb(64, 64, 64);\">）都用这样的文件名保存副本。此外，你可能还需要忽略</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;log</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">tmp&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">或者</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;pid&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录，以及自动生成的文档等等。要养成一开始就设置好</span><span style=\"color: rgb(64, 64, 64);\">.gitignore&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件的习惯，以免将来误提交这类无用的文件。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">文件</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;.gitignore&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的格式规范如下：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所有空行或者以注释符号</span><span style=\"color: rgb(64, 64, 64);\">＃</span><span style=\"color: rgb(64, 64, 64);\">开头的行都会被</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">忽略。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">可以使用标准的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;glob&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">模式匹配。</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;*&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">匹配模式最后跟反斜杠（</span><span style=\"color: rgb(64, 64, 64);\">/</span><span style=\"color: rgb(64, 64, 64);\">）说明要忽略的是目录。</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;*&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（</span><span style=\"color: rgb(64, 64, 64);\">!</span><span style=\"color: rgb(64, 64, 64);\">）取反。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">所谓的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;glob&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">模式是指</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;shell&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所使用的简化了的正则表达式。星号（</span><span style=\"color: rgb(64, 64, 64);\">*</span><span style=\"color: rgb(64, 64, 64);\">）匹配零个或多个任意字符；</span><span style=\"color: rgb(64, 64, 64);\">[abc]</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">匹配任何一个列在方括号中的字符（这个例子要么匹配一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;a</span><span style=\"color: rgb(64, 64, 64);\">，要么匹配一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;b</span><span style=\"color: rgb(64, 64, 64);\">，要么匹配一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;c</span><span style=\"color: rgb(64, 64, 64);\">）；问号（</span><span style=\"color: rgb(64, 64, 64);\">?</span><span style=\"color: rgb(64, 64, 64);\">）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如</span><span style=\"color: rgb(64, 64, 64);\">[0-9]</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">表示匹配所有</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;0&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;9</span><span style=\"color: rgb(64, 64, 64);\">的数字）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">我们再看一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;.gitignore&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件的例子：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">#&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">此为注释 –&nbsp;</span>将被 Git 忽略</span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">*.a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">忽略所有 .a&nbsp;</span>结尾的文件</span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">!lib.a&nbsp;&nbsp;&nbsp; #&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">但 lib.a&nbsp;</span>除外</span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">/TODO&nbsp; &nbsp;&nbsp;&nbsp;#&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仅仅忽略项目根目录下的 TODO&nbsp;</span>文件，不包括 subdir/TODO</span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">build/&nbsp;&nbsp;&nbsp; #&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">忽略 build/&nbsp;</span>目录下的所有文件</span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">doc/*.txt #&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会忽略 doc/notes.txt&nbsp;</span>但不包括 doc/server/arch.txt</span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">查看已暂存和未暂存的更新</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">实际上</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitstatus</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的显示比较简单，仅仅是列出了修改过的文件，如果要查看具体修改了什么地方，可以用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git diff</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令。稍后我们会详细介绍</span><span style=\"color: rgb(64, 64, 64);\">git diff</span><span style=\"color: rgb(64, 64, 64);\">，不过现在，它已经能回答我们的两个问题了：当前做的哪些更新还没有暂存？有哪些更新已经暂存起来准备好了下次提交？</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git diff</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会使用文件补丁的格式显示具体添加和删除的行。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">假如再次修改</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;README&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件后暂存，然后编辑</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;benchmarks.rb&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件后先别暂存，运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">status</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令，会看到：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git status</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># On branch master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Changes to be committed:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp; (use &quot;gitreset HEAD</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp; ...&quot; tounstage)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newfile:&nbsp;&nbsp; README</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Changed but not updated:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp; (use &quot;gitadd</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...&quot; toupdate what will be committed)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; modified:&nbsp;&nbsp; benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">要查看尚未暂存的文件更新了哪些部分，不加参数直接输入</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git diff</span><span style=\"color: rgb(64, 64, 64);\">：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git diff</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">diff --git a/benchmarks.rb b/benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">index 3cb747f..da65585 100644</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">--- a/benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">+++ b/benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">@@ -36,6 +36,10 @@ def main</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@commit.parents[0].parents[0].parents[0]</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; end</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;run_code(x, &#39;commits 1&#39;) do</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;git.commits.size</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; end</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">+</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;run_code(x, &#39;commits 2&#39;) do</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; log =git.commits(&#39;master&#39;, 15)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; log.size</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">此命令比较的是工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">若要看已经暂存起来的文件和上次提交时的快照之间的差异，可以用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git diff --cached</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令。（</span><span style=\"color: rgb(64, 64, 64);\">Git 1.6.1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">及更高版本还允许使用</span><span style=\"color: rgb(64, 64, 64);\">git diff --staged</span><span style=\"color: rgb(64, 64, 64);\">，效果是相同的，但更好记些。）来看看实际的效果：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git diff --cached</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">diff --git a/README b/README</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">new file mode 100644</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">index 0000000..03902a1</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">--- /dev/null</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">+++ b/README2</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">@@ -0,0 +1,5 @@</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">+grit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">+ by Tom Preston-Werner, Chris Wanstrath</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">+ http://github.com/mojombo/grit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">+</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">+Grit is a Ruby library for extracting information from aGit repository</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">请注意，单单</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitdiff</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">不过是显示还没有暂存起来的改动，而不是这次工作和上次提交之间的差异。所以有时候你一下子暂存了所有更新过的文件后，运行</span><span style=\"color: rgb(64, 64, 64);\">git diff</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">后却什么也没有，就是这个原因。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">像之前说的，暂存</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;benchmarks.rb&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">后再编辑，运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git status</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会看到暂存前后的两个版本：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git add benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ echo &#39;# test line&#39; &gt;&gt; benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git status</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># On branch master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Changes to be committed:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; modified:&nbsp;&nbsp; benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Changed but not updated:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; modified:&nbsp;&nbsp; benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitdiff</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">看暂存前后的变化：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git diff</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">diff --git a/benchmarks.rb b/benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">index e445e28..86b2f7c 100644</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">--- a/benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">+++ b/benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">@@ -127,3 +127,4 @@ end</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;main()</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;##pp Grit::GitRuby.cache_client.stats</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">+# test line</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">然后用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitdiff --cached</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">查看已经暂存起来的变化：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git diff --cached</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">diff --git a/benchmarks.rb b/benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">index 3cb747f..e445e28 100644</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">--- a/benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">+++ b/benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">@@ -36,6 +36,10 @@ def main</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@commit.parents[0].parents[0].parents[0]</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; end</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;run_code(x, &#39;commits 1&#39;) do</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;git.commits.size</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; end</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">+</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; run_code(x,&#39;commits 2&#39;) do</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; log =git.commits(&#39;master&#39;, 15)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; log.size</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">提交更新</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在的暂存区域已经准备妥当可以提交了。在此之前，请一定要确认还有什么修改过的或新建的文件还没有</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git add</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">过，否则提交的时候不会记录这些还没暂存起来的变化。所以，每次准备提交前，先用</span><span style=\"color: rgb(64, 64, 64);\">git status</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">看下，是不是都已暂存起来了，然后再运行提交命令</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git commit</span><span style=\"color: rgb(64, 64, 64);\">：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git commit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">这种方式会启动文本编辑器以便输入本次提交的说明。（默认会启用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;shell&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的环境变量</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">$EDITOR</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所指定的软件，一般都是</span><span style=\"color: rgb(64, 64, 64);\">vim&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">或</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;emacs</span><span style=\"color: rgb(64, 64, 64);\">。当然也可以按照第一章介绍的方式，使用</span><span style=\"color: rgb(64, 64, 64);\">git config --global core.editor</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令设定你喜欢的编辑软件。）</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">编辑器会显示类似下面的文本信息（本例选用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Vim&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的屏显方式展示）：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Please enter the commit message for your changes. Linesstarting</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># with &#39;#&#39; will be ignored, and an empty message abortsthe commit.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># On branch master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Changes to be committed:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp; (use &quot;gitreset HEAD</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp; ...&quot; tounstage)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newfile:&nbsp;&nbsp; README</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modified:&nbsp;&nbsp; benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">~</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">~</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">~</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&quot;.git/COMMIT_EDITMSG&quot; 10L, 283C</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">可以看到，默认的提交消息包含最后一次运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git status</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的输出，放在注释行里，另外开头还有一空行，供你输入提交说明。你完全可以去掉这些注释行，不过留着也没关系，多少能帮你回想起这次更新的内容有哪些。（如果觉得这还不够，可以用</span><span style=\"color: rgb(64, 64, 64);\">-v</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">选项将修改差异的每一行都包含到注释中来。）退出编辑器时，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会丢掉注释行，将说明内容和本次更新提交到仓库。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">另外也可以用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;-m&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">参数后跟提交说明的方式，在一行命令中提交更新：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git commit -m &quot;Story 182: Fix benchmarks forspeed&quot;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">[master]: created 463dc4f: &quot;Fix benchmarks forspeed&quot;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;2 files changed, 3insertions(+), 0 deletions(-)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;create mode 100644README</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">好，现在你已经创建了第一个提交！可以看到，提交后它会告诉你，当前是在哪个分支（</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">）提交的，本次提交的完整</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">校验和是什么（</span><span style=\"color: rgb(64, 64, 64);\">463dc4f</span><span style=\"color: rgb(64, 64, 64);\">），以及在本次提交中，有多少文件修订过，多少行添改和删改过。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">记住，提交时记录的是放在暂存区域的快照，任何还未暂存的仍然保持已修改状态，可以在下次提交时纳入版本管理。每一次运行提交操作，都是对你项目作一次快照，以后可以回到这个状态，或者进行比较。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">跳过使用暂存区域</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">尽管使用暂存区域的方式可以精心准备要提交的细节，但有时候这么做略显繁琐。</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">提供了一个跳过使用暂存区域的方式，只要在提交的时候，给</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git commit</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">加上</span><span style=\"color: rgb(64, 64, 64);\">-a</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">选项，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过</span><span style=\"color: rgb(64, 64, 64);\">git add</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">步骤：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git status</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># On branch master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Changed but not updated:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; modified:&nbsp;&nbsp; benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git commit -a -m &#39;added new benchmarks&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">[master 83e38c7] added new benchmarks</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;1 files changed, 5insertions(+), 0 deletions(-)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">看到了吗？提交之前不再需要</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitadd</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;benchmarks.rb&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">了。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">移除文件</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">要从</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。可以用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git rm</span><span style=\"color: rgb(64, 64, 64);\">命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果只是简单地从工作目录中手工删除文件，运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git status</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">时就会在</span><span style=\"color: rgb(64, 64, 64);\">“Changed but not updated”&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">部分（也就是</span><span style=\"color: rgb(64, 64, 64);\">_</span><span style=\"color: rgb(64, 64, 64);\">未暂存</span><span style=\"color: rgb(64, 64, 64);\">_</span><span style=\"color: rgb(64, 64, 64);\">清单）看到：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ rm grit.gemspec</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git status</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># On branch master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Changed but not updated:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp; (use &quot;gitadd/rm</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp; ...&quot; toupdate what will be committed)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deleted:&nbsp;&nbsp;&nbsp; grit.gemspec</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">然后再运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitrm</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">记录此次移除文件的操作：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git rm grit.gemspec</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">rm &#39;grit.gemspec&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git status</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># On branch master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Changes to be committed:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp; (use &quot;gitreset HEAD</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp; ...&quot; tounstage)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deleted:&nbsp;&nbsp;&nbsp; grit.gemspec</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">最后提交的时候，该文件就不再纳入版本管理了。如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">-f</span><span style=\"color: rgb(64, 64, 64);\">（译注：即</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;force&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的首字母），以防误删除文件后丢失修改的内容。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">另外一种情况是，我们想把文件从</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。换句话说，仅是从跟踪清单中删除。比如一些大型日志文件或者一堆</span><span style=\"color: rgb(64, 64, 64);\">.a</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">编译文件，不小心纳入仓库后，要移除跟踪但不删除文件，以便稍后在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">.gitignore</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件中补上，用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">--cached</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">选项即可：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git rm --cached readme.txt</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">后面可以列出文件或者目录的名字，也可以使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;glob&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">模式。比方说：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git rm log/\\*.log</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">注意到星号</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">*</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">之前的反斜杠</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">\\</span><span style=\"color: rgb(64, 64, 64);\">，因为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">有它自己的文件模式扩展匹配方式，所以我们不用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;shell&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">来帮忙展开（译注：实际上不加反斜杠也可以运行，只不过按照</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;shell&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">扩展的话，仅仅删除指定目录下的文件而不会递归匹配。上面的例子本来就指定了目录，所以效果等同，但下面的例子就会用递归方式匹配，所以必须加反斜</span><span style=\"color: rgb(64, 64, 64);\">杠。）。此命令删除所有</span><span style=\"color: rgb(64, 64, 64);\">log/</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录下扩展名为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">.log</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的文件。类似的比如：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git rm \\*~</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">会递归删除当前目录及其子目录中所有</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">~</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">结尾的文件。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">移动文件</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">不像其他的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;VCS&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">系统，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">并不跟踪文件移动操作。如果在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">中重命名了某个文件，仓库中存储的元数据并不会体现出这是一次改名操作。不过</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">非常聪明，它会推断出究竟发生了什么，至于具体是如何做到的，我们稍后再谈。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">既然如此，当你看到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">mv</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令时一定会困惑不已。要在</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">中对文件改名，可以这么做：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git mv file_from file_to</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">它会恰如预期般正常工作。实际上，即便此时查看状态信息，也会明白无误地看到关于重命名操作的说明：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git mv README.txt README</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git status</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># On branch master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Your branch is ahead of &#39;origin/master&#39; by 1 commit.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Changes to be committed:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp; (use &quot;gitreset HEAD</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp; ...&quot; tounstage)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;renamed:&nbsp;&nbsp;&nbsp; README.txt -&gt;README</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">其实，运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitmv</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">就相当于运行了下面三条命令：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ mv README.txt README</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git rm README.txt</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git add README</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如此分开操作，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">也会意识到这是一次改名，所以不管何种方式都一样。当然，直接用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git mv</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">轻便得多，不过有时候用其他工具批处理改名的话，要记得在提交前删除老的文件名，再添加新的文件名。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">2.3&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">查看提交历史</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">在提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，可以使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git log</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令查看。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">接下来的例子会用我专门用于演示的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;simplegit&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">项目，运行下面的命令获取该项目源代码：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">git clone git://github.com/schacon/simplegit-progit.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">然后在此项目中运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitlog</span><span style=\"color: rgb(64, 64, 64);\">，应该会看到下面的输出：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git log</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit ca82a6dff817ec66f44342007202690a93763949</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: Scott Chacon</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Mon Mar 17 21:52:112008 -0700</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; changed theversion number</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: Scott Chacon</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Sat Mar 1516:40:33 2008 -0700</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; removedunnecessary test code</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit a11bef06a3f659402fe7563abf99ad00de2209e6</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: Scott Chacon</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Sat Mar 1510:31:28 2008 -0700</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; first commit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">默认不用任何参数的话，</span><span style=\"color: rgb(64, 64, 64);\">git log</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会按提交时间列出所有的更新，最近的更新排在最上面。看到了吗，每次更新都有一个</span><span style=\"color: rgb(64, 64, 64);\">SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">校验和、作者的名字和电子邮件地址、提交时间，最后缩进一个段落显示提交说明。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">gitlog</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">有许多选项可以帮助你搜寻感兴趣的提交，接下来我们介绍些最常用的。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">我们常用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">-p</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">选项展开显示每次提交的内容差异，用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">-2</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">则仅显示最近的两次更新：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git log -p -2</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit ca82a6dff817ec66f44342007202690a93763949</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: Scott Chacon</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Mon Mar 1721:52:11 2008 -0700</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; changed theversion number</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">diff --git a/Rakefile b/Rakefile</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">index a874b73..8f94139 100644</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">--- a/Rakefile</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">+++ b/Rakefile</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">@@ -5,7 +5,7 @@ require &#39;rake/gempackagetask&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;spec = Gem::Specification.newdo |s|</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">-&nbsp;&nbsp;&nbsp; s.version&nbsp;&nbsp; =&nbsp;&nbsp;&quot;0.1.0&quot;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">+&nbsp;&nbsp;&nbsp; s.version&nbsp;&nbsp; =&nbsp;&nbsp;&quot;0.1.1&quot;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp; s.author&nbsp;&nbsp;&nbsp; =&nbsp;&nbsp;&quot;Scott Chacon&quot;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: Scott Chacon</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Sat Mar 1516:40:33 2008 -0700</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; removed unnecessarytest code</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">diff --git a/lib/simplegit.rb b/lib/simplegit.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">index a0a60ae..47c6340 100644</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">--- a/lib/simplegit.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">+++ b/lib/simplegit.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">@@ -18,8 +18,3 @@ class SimpleGit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp; end</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;end</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">-</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">-if $0 == __FILE__</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">-&nbsp; git =SimpleGit.new</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">-&nbsp; puts git.show</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">-end</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">\\ No newline at end of file</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">在做代码审查，或者要快速浏览其他协作者提交的更新都作了哪些改动时，就可以用这个选项。此外，还有许多摘要选项可以用，比如</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">--stat</span><span style=\"color: rgb(64, 64, 64);\">，仅显示简要的增改行数统计：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git log --stat</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit ca82a6dff817ec66f44342007202690a93763949</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: Scott Chacon</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Mon Mar 1721:52:11 2008 -0700</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; changed theversion number</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;Rakefile |&nbsp;&nbsp;&nbsp; 2 +-</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;1 files changed, 1insertions(+), 1 deletions(-)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: Scott Chacon</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Sat Mar 1516:40:33 2008 -0700</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; removedunnecessary test code</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;lib/simplegit.rb|&nbsp;&nbsp;&nbsp; 5 -----</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;1 files changed, 0insertions(+), 5 deletions(-)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit a11bef06a3f659402fe7563abf99ad00de2209e6</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: Scott Chacon</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Sat Mar 1510:31:28 2008 -0700</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; first commit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;README&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;6 ++++++</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;Rakefile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;23 +++++++++++++++++++++++</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;lib/simplegit.rb|&nbsp;&nbsp; 25 +++++++++++++++++++++++++</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;3 files changed,54 insertions(+), 0 deletions(-)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">每个提交都列出了修改过的文件，以及其中添加和移除的行数，并在最后列出所有增减行数小计。还有个常用的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">--pretty</span><span style=\"color: rgb(64, 64, 64);\">选项，可以指定使用完全不同于默认格式的方式展示提交历史。比如用</span><span style=\"color: rgb(64, 64, 64);\">oneline</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">将每个提交放在一行显示，这在提交数很大时非常有用。另外还有</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">short</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">full</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">fuller</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">可以用，展示的信息或多或少有些不同，请自己动手实践一下看看效果如何。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git log --pretty=oneline</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">ca82a6dff817ec66f44342007202690a93763949 changed theversion number</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removedunnecessary test code</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">a11bef06a3f659402fe7563abf99ad00de2209e6 first commit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">但最有意思的是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">format</span><span style=\"color: rgb(64, 64, 64);\">，可以定制要显示的记录格式，这样的输出便于后期编程提取分析，像这样：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git log --pretty=format:&quot;%h - %an, %ar : %s&quot;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">ca82a6d - Scott Chacon, 11 months ago : changed theversion number</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">085bb3b - Scott Chacon, 11 months ago : removedunnecessary test code</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">a11bef0 - Scott Chacon, 11 months ago : first commit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">表</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;2-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">列出了常用的格式占位符写法及其代表的意义。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">选项&nbsp;&nbsp;&nbsp;&nbsp;</span>说明</span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">%H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">提交对象（commit</span>）的完整哈希字串</span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">%h&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">提交对象的简短哈希字串</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">%T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">树对象（tree</span>）的完整哈希字串</span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">%t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">树对象的简短哈希字串</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">%P&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">父对象（parent</span>）的完整哈希字串</span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">%p&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">父对象的简短哈希字串</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">%an&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">作者（author</span>）的名字</span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">%ae&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">作者的电子邮件地址</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">%ad&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">作者修订日期（可以用 -date=&nbsp;</span>选项定制格式）</span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">%ar&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">作者修订日期，按多久以前的方式显示</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">%cn&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">提交者(committer)</span>的名字</span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">%ce&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">提交者的电子邮件地址</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">%cd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">提交日期</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">%cr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">提交日期，按多久以前的方式显示</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">%s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">提交说明</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">你一定奇怪</span><span style=\"color: rgb(64, 64, 64);\">_</span><span style=\"color: rgb(64, 64, 64);\">作者（</span><span style=\"color: rgb(64, 64, 64);\">author</span><span style=\"color: rgb(64, 64, 64);\">）</span><span style=\"color: rgb(64, 64, 64);\">_</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">_</span><span style=\"color: rgb(64, 64, 64);\">提交者（</span><span style=\"color: rgb(64, 64, 64);\">committer</span><span style=\"color: rgb(64, 64, 64);\">）</span><span style=\"color: rgb(64, 64, 64);\">_</span><span style=\"color: rgb(64, 64, 64);\">之间究竟有何差别，其实作者指的是实际作出修改的人，提交者指的是最后将此</span><span style=\"color: rgb(64, 64, 64);\">工作成果提交到仓库的人。所以，当你为某个项目发布补丁，然后某个核心成员将你的补丁并入项目时，你就是作者，而那个核心成员就是提交者。我们会在第五章</span><span style=\"color: rgb(64, 64, 64);\">再详细介绍两者之间的细微差别。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;oneline&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">或</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;format&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">时结合</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">--graph</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">选项，可以看到开头多出一些</span><span style=\"color: rgb(64, 64, 64);\">ASCII&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">字符串表示的简单图形，形象地展示了每个提交所在的分支及其分化衍合情况。在我们之前提到的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Grit&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">项目仓库中可以看到：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git log --pretty=format:&quot;%h %s&quot; --graph</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">* 2d3acf9 ignore errors from SIGCHLD on trap</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">*&nbsp; 5e3ee11 Mergebranch &#39;master&#39; of git://github.com/dustin/grit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">|\\</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">| * 420eac9 Added a method for getting the currentbranch.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">* | 30e367c timeout code and tests</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">* | 5a09431 add timeout protection to grit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">* | e1193f8 support for heads with slashes in them</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">|/</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">* d6016bc require time for xmlschema</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">*&nbsp; 11d191e Merge branch&#39;defunkt&#39; into local</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">以上只是简单介绍了一些</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitlog</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令支持的选项。表</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;2-2&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">还列出了一些其他常用的选项及其释义。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">选项 说明</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">-p&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">按补丁格式显示每个更新之间的差异。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">--stat&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">显示每次更新的文件修改统计信息。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">--shortstat&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">只显示 --stat&nbsp;</span>中最后的行数修改添加移除统计。</span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">--name-only&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仅在提交信息后显示已修改的文件清单。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">--name-status&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">显示新增、修改、删除的文件清单。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">--abbrev-commit&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仅显示 SHA-1&nbsp;</span>的前几个字符，而非所有的 40 个字符。</span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">--relative-date&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">使用较短的相对时间显示（比如，“2 weeks ago”</span>）。</span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">--graph&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">显示 ASCII&nbsp;</span>图形表示的分支合并历史。</span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">--pretty&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">使用其他格式显示历史提交信息。可用的选项包括 oneline</span>，short，full，fuller 和 format（后跟指定格式）。</span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">限制输出长度</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">除了定制输出格式的选项之外，</span><span style=\"color: rgb(64, 64, 64);\">git log</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">还有许多非常实用的限制输出长度的选项，也就是只输出部分提交信息。之前我们已经看到过</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">-2</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">了，它只显示最近的两条提交，实际上，这是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">-&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">选项的写法，其中的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">n</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">可以是任何自然数，表示仅显示最近的若干条提交。不过实践中我们是不太用这个选项的，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">在输出所有提交时会自动调用分页程序（</span><span style=\"color: rgb(64, 64, 64);\">less</span><span style=\"color: rgb(64, 64, 64);\">），要看更早的更新只需翻到下页即可。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">另外还有按照时间作限制的选项，比如</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">--since</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">--until</span><span style=\"color: rgb(64, 64, 64);\">。下面的命令列出所有最近两周内的提交：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git log --since=2.weeks</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">你可以给出各种时间格式，比如说具体的某一天（</span><span style=\"color: rgb(64, 64, 64);\">“2008-01-15”</span><span style=\"color: rgb(64, 64, 64);\">），或者是多久以前（</span><span style=\"color: rgb(64, 64, 64);\">“2 years 1 day 3 minutes ago”</span><span style=\"color: rgb(64, 64, 64);\">）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">还可以给出若干搜索条件，列出符合的提交。用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">--author</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">选项显示指定作者的提交，用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">--grep</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">选项搜索提交说明中的关键字。（请注意，如果要得到同时满足这两个选项搜索条件的提交，就必须用</span><span style=\"color: rgb(64, 64, 64);\">--all-match</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">选项。）</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果只关心某些文件或者目录的历史提交，可以在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git log</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">选项的最后指定它们的路径。因为是放在最后位置上的选项，所以用两个短划线（</span><span style=\"color: rgb(64, 64, 64);\">--</span><span style=\"color: rgb(64, 64, 64);\">）隔开之前的选项和后面限定的路径名。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">表</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;2-3&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">还列出了其他常用的类似选项。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">选项 说明</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">-(n)&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仅显示最近的 n&nbsp;</span>条提交</span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">--since, --after&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仅显示指定时间之后的提交。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">--until, --before&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仅显示指定时间之前的提交。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">--author&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仅显示指定作者相关的提交。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">--committer&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仅显示指定提交者相关的提交。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">来看一个实际的例子，如果要查看</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库中，</span><span style=\"color: rgb(64, 64, 64);\">2008&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">年</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;10&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">月期间，</span><span style=\"color: rgb(64, 64, 64);\">Junio Hamano&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">提交的但未合并的<a href=\"http://lib.csdn.net/base/softwaretest\" class=\"replace_word\" title=\"软件测试知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">测试</a>脚本（位于项目的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;t/&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录下的文件），可以用下面的查询命令：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git log --pretty=&quot;%h - %s&quot; --author=gitster--since=&quot;2008-10-01&quot; \\</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;--before=&quot;2008-11-01&quot; --no-merges -- t/</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">5610e3b - Fix testcase failure when extended attribute</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">acd3b9e - Enhance hold_lock_file_for_{update,append}()</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">f563754 - demonstrate breakage of detached checkout wi</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">d1a43f2 - reset --hard/read-tree --reset -u: remove un</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">51a94af - Fix &quot;checkout --track -b newbranch&quot;on detac</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">b0ad11e - pull: allow &quot;git pull origin$something:$cur</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">项目有</span><span style=\"color: rgb(64, 64, 64);\">20,000&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">多条提交，但我们给出搜索选项后，仅列出了其中满足条件的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;6&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">条。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">使用图形化工具查阅提交历史</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">有时候图形化工具更容易展示历史提交的变化，随</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">一同发布的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;gitk&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">就是这样一种工具。它是用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Tcl/Tk&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">写成的，基本上相当于</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git log</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令的可视化版本，凡是</span><span style=\"color: rgb(64, 64, 64);\">gitlog</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">可以用的选项也都能用在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;gitk&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">上。在项目工作目录中输入</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;gitk&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令后，就会启动图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;2-2&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所示的界面。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;2-2. gitk</span><span style=\"color: rgb(64, 64, 64);\">的图形界面</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">上半个窗口显示的是历次提交的分支祖先图谱，下半个窗口显示当前点选的提交对应的具体差异。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">2.4&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">撤消操作</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">任何时候，你都有可能需要撤消刚才所做的某些操作。接下来，我们会介绍一些基本的撤消操作相关的命令。请注意，有些操作并不总是可以撤消的，所以请务必谨慎小心，一旦失误，就有可能丢失部分工作成果。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">修改最后一次提交</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">有时候我们提交完了才发现漏掉了几个文件没有加，或者提交信息写错了。想要撤消刚才的提交操作，可以使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">--amend</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">选项重新提交：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git commit --amend</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">此命令将使用当前的暂存区域快照提交。如果刚才提交完没有作任何改动，直接运行此命令的话，相当于有机会重新编辑提交说明，但将要提交的文件快照和之前的一样。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">启动文本编辑器后，会看到上次提交时的说明，编辑它确认没问题后保存退出，就会使用新的提交说明覆盖刚才失误的提交。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果刚才提交时忘了暂存某些修改，可以先补上暂存操作，然后再运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">--amend</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">提交：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git commit -m &#39;initial commit&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git add forgotten_file</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git commit --amend</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">上面的三条命令最终只是产生一个提交，第二个提交命令修正了第一个的提交内容。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">取消已经暂存的文件</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">接下来的两个小节将演示如何取消暂存区域中的文件，以及如何取消工作目录中已修改的文件。不用担心，查看文件状态的时候就提示了该如何撤消，所以不需要死记硬背。来看下面的例子，有两个修改过的文件，我们想要分开提交，但不小心用</span><span style=\"color: rgb(64, 64, 64);\">git add .</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">全加到了暂存区域。该如何撤消暂存其中的一个文件呢？其实，</span><span style=\"color: rgb(64, 64, 64);\">git status</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的命令输出已经告诉了我们该怎么做：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git add .</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git status</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># On branch master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Changes to be committed:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp; (use &quot;gitreset HEAD</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp; ...&quot; tounstage)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modified:&nbsp;&nbsp; README.txt</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modified:&nbsp;&nbsp; benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">就在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;“Changes to be committed”&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">下面，括号中有提示，可以使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git reset HEAD&nbsp;...&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的方式取消暂存。好吧，我们来试试取消暂存</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;benchmarks.rb&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git reset HEAD benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">benchmarks.rb: locally modified</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git status</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># On branch master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Changes to be committed:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp; (use &quot;gitreset HEAD</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp; ...&quot; tounstage)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modified:&nbsp;&nbsp; README.txt</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Changed but not updated:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp; (use &quot;gitadd</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...&quot; toupdate what will be committed)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp; (use &quot;gitcheckout --</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...&quot; todiscard changes in working directory)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modified:&nbsp;&nbsp; benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">这条命令看起来有些古怪，先别管，能用就行。现在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;benchmarks.rb&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件又回到了之前已修改未暂存的状态。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">取消对文件的修改</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果觉得刚才对</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;benchmarks.rb&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的修改完全没有必要，该如何取消修改，回到之前的状态（也就是修改之前的版本）呢？</span><span style=\"color: rgb(64, 64, 64);\">git status</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">同样提示了具体的撤消方法，接着上面的例子，现在未暂存区域看起来像这样：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Changed but not updated:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp; (use &quot;gitadd</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp; ...&quot; toupdate what will be committed)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp; (use &quot;gitcheckout --</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...&quot; todiscard changes in working directory)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modified:&nbsp;&nbsp; benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">在第二个括号中，我们看到了抛弃文件修改的命令（至少在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git 1.6.1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">以及更高版本中会这样提示，如果你还在用老版本，我们强烈建议你升级，以获取最佳的用户体验），让我们试试看：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git checkout -- benchmarks.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git status</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># On branch master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Changes to be committed:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp; (use &quot;gitreset HEAD</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp; ...&quot; tounstage)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modified:&nbsp;&nbsp; README.txt</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">可以看到，该文件已经恢复到修改前的版本。你可能已经意识到了，这条命令有些危险，所有对文件的修改都没有了，因为我们刚刚把之前版本的文件复制过</span><span style=\"color: rgb(64, 64, 64);\">来重写了此文件。所以在用这条命令前，请务必确定真的不再需要保留刚才的修改。如果只是想回退版本，同时保留刚才的修改以便将来继续工作，可以用下章介绍</span><span style=\"color: rgb(64, 64, 64);\">的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;stashing&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和分支来处理，应该会更好些。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">记住，任何已经提交到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的都可以被恢复。即便在已经删除的分支中的提交，或者用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">--amend</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">重新改写的提交，都可以被恢复（关于数据恢复的内容见第九章）。所以，你可能失去的数据，仅限于没有提交过的，对</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">来说它们就像从未存在过一样。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">2.5&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">远程仓库的使用</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">要参与任何一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">项目的协作，必须要了解该如何管理远程仓库。远程仓库是指托管在网络上的项目仓库，可能会有好多个，其中有些你只能读，另外有些可以写。同他人协作开发某</span><span style=\"color: rgb(64, 64, 64);\">个项目时，需要管理这些远程仓库，以便推送或拉取数据，分享各自的工作进展。管理远程仓库的工作，包括添加远程库，移除废弃的远程库，管理各式远程库分</span><span style=\"color: rgb(64, 64, 64);\">支，定义是否跟踪这些分支，等等。本节我们将详细讨论远程库的管理和使用。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">查看当前的远程库</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">要查看当前配置有哪些远程仓库，可以用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git remote</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令，它会列出每个远程库的简短名字。在克隆完某个项目后，至少可以看到一个名为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;origin&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的远程库，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">默认使用这个名字来标识你所克隆的原始仓库：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git clone git://github.com/schacon/ticgit.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Initialized empty Git repository in/private/tmp/ticgit/.git/</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">remote: Counting objects: 595, done.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">remote: Compressing objects: 100% (269/269), done.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">remote: Total 595 (delta 255), reused 589 (delta 253)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Receiving objects: 100% (595/595), 73.31 KiB | 1 KiB/s,done.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Resolving deltas: 100% (255/255), done.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ cd ticgit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git remote</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">origin</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">也可以加上</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">-v</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">选项（译注：此为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">--verbose</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的简写，取首字母），显示对应的克隆地址：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git remote -v</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">origin&nbsp; git://github.com/schacon/ticgit.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果有多个远程仓库，此命令将全部列出。比如在我的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Grit&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">项目中，可以看到：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ cd grit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git remote -v</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">bakkdoor&nbsp;git://github.com/bakkdoor/grit.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">cho45&nbsp;&nbsp;&nbsp;&nbsp;git://github.com/cho45/grit.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">defunkt&nbsp;&nbsp; git://github.com/defunkt/grit.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">koke&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;git://github.com/koke/grit.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">origin&nbsp;&nbsp;&nbsp;git@github.com:mojombo/grit.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">这样一来，我就可以非常轻松地从这些用户的仓库中，拉取他们的提交到本地。请注意，上面列出的地址只有</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;origin&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">用的是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SSH URL&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">链接，所以也只有这个仓库我能推送数据上去（我们会在第四章解释原因）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">添加远程仓库</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用，运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git remote add [shortname] [url]</span><span style=\"color: rgb(64, 64, 64);\">：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git remote</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">origin</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git remote add pb git://github.com/paulboone/ticgit.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git remote -v</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">origin&nbsp; git://github.com/schacon/ticgit.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">pb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; git://github.com/paulboone/ticgit.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在可以用字串</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;pb&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">指代对应的仓库地址了。比如说，要抓取所有</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Paul&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">有的，但本地仓库没有的信息，可以运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git fetch pb</span><span style=\"color: rgb(64, 64, 64);\">：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git fetch pb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">remote: Counting objects: 58, done.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">remote: Compressing objects: 100% (41/41), done.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">remote: Total 44 (delta 24), reused 1 (delta 0)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Unpacking objects: 100% (44/44), done.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">From git://github.com/paulboone/ticgit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;* [newbranch]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; master&nbsp;&nbsp;&nbsp;&nbsp; -&gt; pb/master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;* [newbranch]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ticgit&nbsp;&nbsp;&nbsp;&nbsp; -&gt; pb/ticgit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在，</span><span style=\"color: rgb(64, 64, 64);\">Paul&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的主干分支（</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">）已经完全可以在本地访问了，对应的名字是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">pb/master</span><span style=\"color: rgb(64, 64, 64);\">，你可以将它合并到自己的某个分支，或者切换到这个分支，看看有些什么有趣的更新。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">从远程仓库抓取数据</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">正如之前所看到的，可以用下面的命令从远程仓库抓取数据到本地：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git fetch [remote-name]</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">此命令会到远程仓库中拉取所有你本地仓库中还没有的数据。运行完成后，你就可以在本地访问该远程仓库中的所有分支，将其中某个分支合并到本地，或者只是取出某个分支，一探究竟。（我们会在第三章详细讨论关于分支的概念和操作。）</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果是克隆了一个仓库，此命令会自动将远程仓库归于</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;origin&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">名下。所以，</span><span style=\"color: rgb(64, 64, 64);\">git fetch origin</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会抓取从你上次克隆以来别人上传到此远程仓库中的所有更新（或是上次</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;fetch&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">以来别人提交的更新）。有一点很重要，需要记住，</span><span style=\"color: rgb(64, 64, 64);\">fetch&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令只是将远端的数据拉到本地仓库，并不自动合并到当前工作分支，只有当你确实准备好了，才能手工合并。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果设置了某个分支用于跟踪某个远端仓库的分支（参见下节及第三章的内容），可以使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git pull</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令自动抓取数据下来，然后将远端分支自动合并到本地仓库中当前分支。在日常工作中我们经常这么用，既快且好。实际上，默认情况下</span><span style=\"color: rgb(64, 64, 64);\">git clone</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令本质上就是自动创建了本地的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;master&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支用于跟踪远程仓库中的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;master&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支（假设远程仓库确实有</span><span style=\"color: rgb(64, 64, 64);\">master&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支）。所以一般我们运行</span><span style=\"color: rgb(64, 64, 64);\">git pull</span><span style=\"color: rgb(64, 64, 64);\">，目的都是要从原始克隆的远端仓库中抓取数据后，合并到工作目录中的当前分支。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">推送数据到远程仓库</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">项目进行到一个阶段，要同别人分享目前的成果，可以将本地仓库中的数据推送到远程仓库。实现这个任务的命令很简单：</span><span style=\"color: rgb(64, 64, 64);\">git push [remote-name] [branch-name]</span><span style=\"color: rgb(64, 64, 64);\">。如果要把本地的</span><span style=\"color: rgb(64, 64, 64);\">master&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支推送到</span><span style=\"color: rgb(64, 64, 64);\">origin</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">服务器上（再次说明下，克隆操作会自动使用默认的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;master&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;origin&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">名字），可以运行下面的命令：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git push origin master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">只有在所克隆的服务器上有写权限，或者同一时刻没有其他人在推数据，这条命令才会如期完成任务。如果在你推数据前，已经有其他人推送了若干更新，那</span><span style=\"color: rgb(64, 64, 64);\">你的推送操作就会被驳回。你必须先把他们的更新抓取到本地，合并到自己的项目中，然后才可以再次推送。有关推送数据到远程仓库的详细内容见第三章。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">查看远程仓库信息</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">我们可以通过命令</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitremote show [remote-name]</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">查看某个远程仓库的详细信息，比如要看所克隆的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">origin</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库，可以运行：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git remote show origin</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">* remote origin</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; URL:git://github.com/schacon/ticgit.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; Remote branchmerged with &#39;git pull&#39; while on branch master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; Tracked remotebranches</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; ticgit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">除了对应的克隆地址外，它还给出了许多额外的信息。它友善地告诉你如果是在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;master&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支，就可以用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git pull</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令抓取数据合并到本地。另外还列出了所有处于跟踪状态中的远端分支。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">上面的例子非常简单，而随着使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的深入，</span><span style=\"color: rgb(64, 64, 64);\">git remote show</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">给出的信息可能会像这样：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git remote show origin</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">* remote origin</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; URL:git@github.com:defunkt/github.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; Remote branchmerged with &#39;git pull&#39; while on branch issues</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; issues</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; Remote branchmerged with &#39;git pull&#39; while on branch master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; New remotebranches (next fetch will store in remotes/origin)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; caching</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; Stale trackingbranches (use &#39;git remote prune&#39;)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; libwalker</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; walker2</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; Tracked remotebranches</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; acl</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; apiv2</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; dashboard2</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; issues</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; postgres</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; Local branch pushedwith &#39;git push&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; master:master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">它告诉我们，运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitpush</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">时缺省推送的分支是什么（译注：最后两行）。它还显示了有哪些远端分支还没有同步到本地（译注：第六行的</span><span style=\"color: rgb(64, 64, 64);\">caching</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支），哪些已同步到本地的远端分支在远端服务器上已被删除（译注：</span><span style=\"color: rgb(64, 64, 64);\">Stale tracking branches</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">下面的两个分支），以及运行</span><span style=\"color: rgb(64, 64, 64);\">git pull</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">时将自动合并哪些分支（译注：前四行中列出的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">issues</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">远程仓库的删除和重命名</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">在新版</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">中可以用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git remote rename</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令修改某个远程仓库在本地的简短名称，比如想把</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">pb</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">改成</span><span style=\"color: rgb(64, 64, 64);\">paul</span><span style=\"color: rgb(64, 64, 64);\">，可以这么运行：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git remote rename pb paul</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git remote</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">origin</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">paul</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">注意，对远程仓库的重命名，也会使对应的分支名称发生变化，原来的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">pb/master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支现在成了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">paul/master</span><span style=\"color: rgb(64, 64, 64);\">。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">碰到远端仓库服务器迁移，或者原来的克隆镜像不再使用，又或者某个参与者不再贡献代码，那么需要移除对应的远端仓库，可以运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git remote rm</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git remote rm paul</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git remote</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">origin</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">2.6&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">打标签</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">同大多数</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;VCS&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">一样，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">也可以对某一时间点上的版本打上标签。人们在发布某个软件版本（比如</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;v1.0&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">等等）的时候，经常这么做。本节我们一起来学习如何列出所有可用的标签，如何新建标签，以及各种不同类型标签之间的差别。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">列显已有的标签</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">列出现有标签的命令非常简单，直接运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git tag</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">即可：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git tag</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">v0.1</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">v1.3</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">显示的标签按字母顺序排列，所以标签的先后并不表示重要程度的轻重。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">我们可以用特定的搜索模式列出符合条件的标签。在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">自身项目仓库中，有着超过</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;240&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">个标签，如果你只对</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;1.4.2&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">系列的版本感兴趣，可以运行下面的命令：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git tag -l &#39;v1.4.2.*&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">v1.4.2.1</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">v1.4.2.2</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">v1.4.2.3</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">v1.4.2.4</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">新建标签</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">使用的标签有两种类型：轻量级的（</span><span style=\"color: rgb(64, 64, 64);\">lightweight</span><span style=\"color: rgb(64, 64, 64);\">）和含附注的（</span><span style=\"color: rgb(64, 64, 64);\">annotated</span><span style=\"color: rgb(64, 64, 64);\">）。轻量级标签就像是个不会变化的分支，实际上它就是个指向特</span><span style=\"color: rgb(64, 64, 64);\">定提交对象的引用。而含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，电子邮件地址和日期，以及标签说明，标</span><span style=\"color: rgb(64, 64, 64);\">签本身也允许使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;GNU Privacy Guard (GPG)</span><span style=\"color: rgb(64, 64, 64);\">来签署或验证。一般我们都建议使用含附注型的标签，以便保留相关信息；当然，如果只是临时性加注标签，或者不需要旁注额外信息，用轻量级标签也没问题。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">含附注的标签</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">创建一个含附注类型的标签非常简单，用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">-a</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">（译注：取</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">annotated</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的首字母）指定标签名字即可：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git tag -a v1.4 -m &#39;my version 1.4&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git tag</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">v0.1</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">v1.3</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">v1.4</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">而</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">-m</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">选项则指定了对应的标签说明，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会将此说明一同保存在标签对象中。如果没有给出该选项，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会启动文本编辑软件供你输入标签说明。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">可以使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitshow</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令查看相应标签的版本信息，并连同显示打标签时的提交对象。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git show v1.4</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">tag v1.4</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Tagger: Scott Chacon</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Mon Feb 914:45:11 2009 -0800</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">my version 1.4</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit 15027957951b64cf874c3557a0f3547bd83b3ff6</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Merge: 4a447f7... a6b4c97...</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: Scott Chacon</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Sun Feb 819:02:46 2009 -0800</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; Merge branch&#39;experiment&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">我们可以看到在提交对象信息上面，列出了此标签的提交者和提交时间，以及相应的标签说明。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">签署标签</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果你有自己的私钥，还可以用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;GPG&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">来签署标签，只需要把之前的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">-a</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">改为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">-s</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">（译注：</span><span style=\"color: rgb(64, 64, 64);\">取</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">signed</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的首字母）即可：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git tag -s v1.5 -m &#39;my signed 1.5 tag&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">You need a passphrase to unlock the secret key for</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">user: &quot;Scott Chacon</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp; &quot;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">1024-bit DSA key, ID F721C45A, created 2009-02-09</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在再运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitshow</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会看到对应的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;GPG&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">签名也附在其内：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git show v1.5</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">tag v1.5</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Tagger: Scott Chacon</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Mon Feb 915:22:20 2009 -0800</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">my signed 1.5 tag</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">-----BEGIN PGP SIGNATURE-----</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Version: GnuPG v1.4.8 (Darwin)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">iEYEABECAAYFAkmQurIACgkQON3DxfchxFr5cACeIMN+ZxLKggJQf0QYiQBwgySN</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Ki0An2JeAVUCAiJ7Ox6ZEtK+NvZAj82/</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">=WryJ</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">-----END PGP SIGNATURE-----</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit 15027957951b64cf874c3557a0f3547bd83b3ff6</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Merge: 4a447f7... a6b4c97...</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: Scott Chacon</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Sun Feb 819:02:46 2009 -0800</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; Merge branch&#39;experiment&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">稍后我们再学习如何验证已经签署的标签。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">轻量级标签</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">轻量级标签实际上就是一个保存着对应提交对象的校验和信息的文件。要创建这样的标签，一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">-a</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">-s</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">或</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">-m</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">选项都不用，直接给出标签名字即可：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git tag v1.4-lw</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git tag</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">v0.1</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">v1.3</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">v1.4</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">v1.4-lw</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">v1.5</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitshow</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">查看此标签信息，就只有相应的提交对象摘要：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git show v1.4-lw</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit 15027957951b64cf874c3557a0f3547bd83b3ff6</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Merge: 4a447f7... a6b4c97...</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: Scott Chacon</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Sun Feb 819:02:46 2009 -0800</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; Merge branch&#39;experiment&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">验证标签</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">可以使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gittag -v [tag-name]</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">（译注：取</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">verify</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的首字母）的方式验证已经签署的标签。此命令会调用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;GPG&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">来验证签名，所以你需要有签署者的公钥，存放在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;keyring&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">中，才能验证：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git tag -v v1.4.2.1</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">object 883653babd8ee7ea23e6a5c392bb739348b1eb61</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">type commit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">tag v1.4.2.1</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">tagger Junio C Hamano</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1158138501-0700</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">GIT 1.4.2.1</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Minor fixes since 1.4.2, including git-mv and git-httpwith alternates.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">gpg: Signature made Wed Sep 13 02:08:25 2006 PDT usingDSA key ID F3119B9A</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">gpg: Good signature from &quot;Junio C Hamano</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">gpg:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aka &quot;[jpeg image of size 1513]&quot;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Primary key fingerprint: 3565 2A26 2040 E066 C9A7&nbsp; 4A7D C0C6 D9A4 F311 9B9A</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">若是没有签署者的公钥，会报告类似下面这样的错误：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">gpg: Signature made Wed Sep 13 02:08:25 2006 PDT usingDSA key ID F3119B9A</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">gpg: Can&#39;t check signature: public key not found</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">error: could not verify the tag &#39;v1.4.2.1&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">后期加注标签</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">你甚至可以在后期对早先的某次提交加注标签。比如在下面展示的提交历史中：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git log --pretty=oneline</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch&#39;experiment&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">a6b4c97498bd301d84096da251c98a07c7723e65 beginning writesupport</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">0d52aaab4479697da7686c15f77a3d64d9165190 one more thing</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch&#39;experiment&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commitfunction</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">4682c3261057305bdd616e23b64b0857d832627b added a todofile</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">166ae0c4d3f420721acbb115cc33848dfcc2121a started writesupport</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">我们忘了在提交</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;“updated rakefile”&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">后为此项目打上版本号</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;v1.2</span><span style=\"color: rgb(64, 64, 64);\">，没关系，现在也能做。只要在打标签的时候跟上对应提交对象的校验和（或前几位字符）即可：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git tag -a v1.2 9fceb02</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">可以看到我们已经补上了标签：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git tag</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">v0.1</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">v1.2</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">v1.3</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">v1.4</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">v1.4-lw</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">v1.5</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git show v1.2</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">tag v1.2</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Tagger: Scott Chacon</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Mon Feb 915:32:16 2009 -0800</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">version 1.2</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit 9fceb02d0ae598e95dc970b74767f19372d61af8</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: Magnus Chacon</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Sun Apr 2720:43:35 2008 -0700</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; updated rakefile</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">...</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">分享标签</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">默认情况下，</span><span style=\"color: rgb(64, 64, 64);\">git push</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">并不会把标签传送到远端服务器上，只有通过显式命令才能分享标签到远端仓库。其命令格式如同推送分支，运行</span><span style=\"color: rgb(64, 64, 64);\">git push origin [tagname]</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">即可：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git push origin v1.5</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Counting objects: 50, done.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Compressing objects: 100% (38/38), done.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Writing objects: 100% (44/44), 4.56 KiB, done.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Total 44 (delta 18), reused 8 (delta 1)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">To git@github.com:schacon/simplegit.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">* [new tag]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v1.5 -&gt; v1.5</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果要一次推送所有本地新增的标签上去，可以使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">--tags</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">选项：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git push origin --tags</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Counting objects: 50, done.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Compressing objects: 100% (38/38), done.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Writing objects: 100% (44/44), 4.56 KiB, done.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Total 44 (delta 18), reused 8 (delta 1)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">To git@github.com:schacon/simplegit.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;* [new tag]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v0.1 -&gt; v0.1</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;* [new tag]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v1.2 -&gt; v1.2</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;* [new tag]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v1.4 -&gt; v1.4</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;* [new tag]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v1.4-lw -&gt; v1.4-lw</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;* [new tag]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v1.5 -&gt; v1.5</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">现在，其他人克隆共享仓库或拉取数据同步后，也会看到这些标签。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">2.7&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">技巧和窍门</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">在结束本章之前，我还想和大家分享一些</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">使用的技巧和窍门。很多使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的开发者可能根本就没用过这些技巧，我们也不是说在读过本书后非得用这些技巧不可，但至少应该有所了解吧。说实话，有了这些小窍门，我们的工作可以变得更简单，更轻松，更高效。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">自动完成</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果你用的是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Bash shell</span><span style=\"color: rgb(64, 64, 64);\">，可以试试看</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">提供的自动完成脚本。下载</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的源代码，进入</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">contrib/completion</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录，会看到一个</span><span style=\"color: rgb(64, 64, 64);\">git-completion.bash</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件。将此文件复制到你自己的用户主目录中（译注：按照下面的示例，还应改名加上点：</span><span style=\"color: rgb(64, 64, 64);\">cp git-completion.bash~/.git-completion.bash</span><span style=\"color: rgb(64, 64, 64);\">），并把下面一行内容添加到你的</span><span style=\"color: rgb(64, 64, 64);\">.bashrc</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件中：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">source ~/.git-completion.bash</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">也可以为系统上所有用户都设置默认使用此脚本。</span><span style=\"color: rgb(64, 64, 64);\">Mac&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">上将此脚本复制到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">/opt/local/etc/bash_completion.d</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录中，</span><span style=\"color: rgb(64, 64, 64);\"><a href=\"http://lib.csdn.net/base/linux\" class=\"replace_word\" title=\"Linux知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">Linux</a>&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">上则复制到</span><span style=\"color: rgb(64, 64, 64);\">/etc/bash_completion.d/</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录中。这两处目录中的脚本，都会在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Bash&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">启动时自动加载。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Windows&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">上安装了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;msysGit</span><span style=\"color: rgb(64, 64, 64);\">，默认使用的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git Bash&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">就已经配好了这个自动完成脚本，可以直接使用。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">在输入</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令的时候可以敲两次跳格键（</span><span style=\"color: rgb(64, 64, 64);\">Tab</span><span style=\"color: rgb(64, 64, 64);\">），就会看到列出所有匹配的可用命令建议：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git co</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; commitconfig</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">此例中，键入</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;git co&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">然后连按两次</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Tab&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">键，会看到两个相关的建议（命令）</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;commit&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;config</span><span style=\"color: rgb(64, 64, 64);\">。继而输入</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">m&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会自动完成</span><span style=\"color: rgb(64, 64, 64);\">git commit</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令的输入。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">命令的选项也可以用这种方式自动完成，其实这种情况更实用些。比如运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git log</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的时候忘了相关选项的名字，可以输入开头的几个字母，然后敲</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Tab&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">键看看有哪些匹配的：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git log --s</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--shortstat&nbsp; --since=&nbsp; --src-prefix=&nbsp;--stat&nbsp;&nbsp; --summary</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; &nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">这个技巧不错吧，可以节省很多输入和查阅文档的时间。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令别名</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">并不会推断你输入的几个字符将会是哪条命令，不过如果想偷懒，少敲几个命令的字符，可以用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git config</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">为命令设置别名。来看看下面的例子：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git config --global alias.co checkout</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git config --global alias.br branch</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git config --global alias.ci commit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git config --global alias.st status</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在，如果要输入</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitcommit</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">只需键入</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git ci</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">即可。而随着</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">使用的深入，会有很多经常要用到的命令，遇到这种情况，不妨建个别名提高效率。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">使用这种技术还可以创造出新的命令，比方说取消暂存文件时的输入比较繁琐，可以自己设置一下：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git config --global alias.unstage &#39;reset HEAD --&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">这样一来，下面的两条命令完全等同：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git unstage fileA</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git reset HEAD fileA</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">显然，使用别名的方式看起来更清楚。另外，我们还经常设置</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">last</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git config --global alias.last &#39;log -1 HEAD&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">然后要看最后一次的提交信息，就变得简单多了：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git last</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit 66938dae3329c7aebe598c2246a8e6af90d04646</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: Josh Goebel</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Tue Aug 2619:48:51 2008 +0800</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; test forcurrent head</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; Signed-off-by:Scott Chacon</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">可以看出，实际上</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">只是简单地在命令中替换了你设置的别名。不过有时候我们希望运行某个外部命令，而非</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的附属工具，这个好办，只需要在命令前加上</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">!</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">就行。如果你自己写了些处理</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库信息的脚本的话，就可以用这种技术包装起来。作为演示，我们可以设置用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git visual</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">启动</span><span style=\"color: rgb(64, 64, 64);\">gitk</span><span style=\"color: rgb(64, 64, 64);\">：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git config --global alias.visual &quot;!gitk&quot;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">2.8&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">小结</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">到目前为止，你已经学会了最基本的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">操作：创建和克隆仓库，做出更新，暂存并提交这些更新，以及查看所有历史更新记录。接下来，我们将学习</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的必杀技特性：分支模型。</span></span></p><p><br/></p>','0','2016-11-20 10:02:37') [ RunTime:0.1342s ]

[ 2016-11-20T22:02:38+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000630s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001281s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0055s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0016s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0020s ]

[ 2016-11-20T22:02:40+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000463s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000893s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0040s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 10,10   [ RunTime:0.0016s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T22:02:41+08:00 ] ::1 /think_blog/Home/Article/personInfo
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000437s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000827s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0040s ]
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0046s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,m.member_name AS `member_name`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name`,COUNT(ac.id) AS `article_comment_count` FROM `member` `m` LEFT JOIN article a ON a.member_id=m.id LEFT JOIN article_type at ON a.article_type_id=at.id LEFT JOIN article_comment ac ON a.id=ac.article_id  WHERE a.id = '220' GROUP BY a.id  [ RunTime:0.0013s ]

[ 2016-11-20T22:02:41+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000378s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000695s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0034s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T22:02:51+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000443s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000847s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0038s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 10,10   [ RunTime:0.0012s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T22:02:55+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000437s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000834s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0045s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T22:03:07+08:00 ] ::1 /think_blog/Home/Article/personInfo
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000456s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000985s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0039s ]
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0044s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,m.member_name AS `member_name`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name`,COUNT(ac.id) AS `article_comment_count` FROM `member` `m` LEFT JOIN article a ON a.member_id=m.id LEFT JOIN article_type at ON a.article_type_id=at.id LEFT JOIN article_comment ac ON a.id=ac.article_id  WHERE a.id = '220' GROUP BY a.id  [ RunTime:0.0012s ]

[ 2016-11-20T22:03:07+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000357s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000679s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0046s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T22:03:14+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000437s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000827s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0041s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T22:03:44+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000584s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001039s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0037s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0045s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0040s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 51  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('Git详解之三 Git分支','87','51','<p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">几乎每一种<a href=\"http://lib.csdn.net/base/git\" class=\"replace_word\" title=\"Git知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">版本控制</a>系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。在很多版本控制系统中，这是个昂贵的过程，常常需要创建一个源代码目录的完整副本，对大型项目来说会花费很长时间。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">有人把</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的分支模型称为</span><span style=\"color: rgb(64, 64, 64);\">“</span><span style=\"color: rgb(64, 64, 64);\">必杀技特性</span><span style=\"color: rgb(64, 64, 64);\">”</span><span style=\"color: rgb(64, 64, 64);\">，而正是因为它，将</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">从版本控制系统家族里区分出来。</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">有何特别之处呢？</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的分支可谓是难以置信的轻量级，它的新建操作几乎可以在瞬间完成，并且在不同分支间切换起来也差不多一样快。和许多其他版本控制系统不同，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">鼓励在工作流程中频繁使用分支与合并，哪怕一天之内进行许多次都没有关系。理解分支的概念并熟练运用后，你才会意识到为什么</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">是一个如此强大而独特的工具，并从此真正改变你的开发方式。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">3.1&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">何谓分支</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">为了理解</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支的实现方式，我们需要回顾一下</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">是如何储存数据的。或许你还记得第一章的内容，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">保存的不是文件差异或者变化量，而只是一系列文件快照。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">中提交时，会保存一个提交（</span><span style=\"color: rgb(64, 64, 64);\">commit</span><span style=\"color: rgb(64, 64, 64);\">）对象，该对象包含一个指向暂存内容快照的指针，包含本次提交的作者等相关附属信息，包含零个或多个指向该提交对</span><span style=\"color: rgb(64, 64, 64);\">象的父对象指针：首次提交是没有直接祖先的，普通提交有一个祖先，由两个或多个分支合并产生的提交则有多个祖先。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">为直观起见，我们假设在工作目录中有三个文件，准备将它们暂存后提交。暂存操作会对每一个文件计算校验和（即第一章中提到的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">哈希字串），然后把当前版本的文件快照保存到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库中（</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;blob&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">类型的对象存储这些快照），并将校验和加入暂存区域：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git add README test.rb LICENSE</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git commit -m &#39;initial commit of my project&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">当使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitcommit</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">新建一个提交对象前，</span><span style=\"color: rgb(64, 64, 64);\">Git</span><span style=\"color: rgb(64, 64, 64);\">会先计算每一个子目录（本例中就是项目根目录）的校验和，然后在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git</span><span style=\"color: rgb(64, 64, 64);\">仓库中将这些目录保存为树（</span><span style=\"color: rgb(64, 64, 64);\">tree</span><span style=\"color: rgb(64, 64, 64);\">）对象。之后</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">创建的提交对象，除了包含相关提交信息以外，还包含着指向这个树对象（项目根目录）的指针，如此它就可以在将来需要的时候，重现此次快照的内容了。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库中有五个对象：三个表示文件快照内容的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;blob&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象；一个记录着目录树内容及其中各个文件对应</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;blob</span><span style=\"color: rgb(64, 64, 64);\">对象索引的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象；以及一个包含指向</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象（根目录）的索引和其他提交信息元数据的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;commit&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象。概念上来说，仓库中的各个对象保存的数据和相互关系看起来如图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所示：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-1.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">单个提交对象在仓库中的<a href=\"http://lib.csdn.net/base/datastructure\" class=\"replace_word\" title=\"算法与数据结构知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">数据结构</a></span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">作些修改后再次提交，那么这次的提交对象会包含一个指向上次提交对象的指针（译注：即下图中的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;parent&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象）。两次提交后，仓库历史会变成图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-2&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的样子：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-2.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">多个提交对象之间的链接关系</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在来谈分支。</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">中的分支，其实本质上仅仅是个指向</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;commit&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象的可变指针。</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;master&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">作为分支的默认名字。在若干次提交后，你其实已经有了一个指向最后一次提交对象的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;master&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支，它在每次提交的时候都会自动向前移动。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-3.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支其实就是从某个提交对象往回看的历史</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">那么，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">又是如何创建一个新的分支的呢？答案很简单，创建一个新的分支指针。比如新建一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;testing&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支，可以使用</span><span style=\"color: rgb(64, 64, 64);\">git branch</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git branch testing</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">这会在当前</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;commit&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象上新建一个分支指针（见图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-4</span><span style=\"color: rgb(64, 64, 64);\">）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-4.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">多个分支指向提交数据的历史</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">那么，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">是如何知道你当前在哪个分支上工作的呢？其实答案也很简单，它保存着一个名为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;HEAD&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的特别指针。请注意它和你熟知的许多其他版本控制系统（比如</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">或</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;CVS</span><span style=\"color: rgb(64, 64, 64);\">）里的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;HEAD&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">概念大不相同。在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">中，它是一个指向你正在工作中的本地分支的指针（译注：将</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;HEAD&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">想象为当前分支的别名。）。运行</span><span style=\"color: rgb(64, 64, 64);\">git branch</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令，仅仅是建立了一个新的分支，但不会自动切换到这个分支中去，所以在这个例子中，我们依然还在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;master&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支里工作（参考图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-5</span><span style=\"color: rgb(64, 64, 64);\">）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-5. HEAD</span><span style=\"color: rgb(64, 64, 64);\">指向当前所在的分支</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">要切换到其他分支，可以执行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitcheckout</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令。我们现在转换到新建的</span><span style=\"color: rgb(64, 64, 64);\">testing&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git checkout testing</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">这样</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;HEAD&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">就指向了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;testing&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支（见图</span><span style=\"color: rgb(64, 64, 64);\">3-6</span><span style=\"color: rgb(64, 64, 64);\">）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-6. HEAD</span><span style=\"color: rgb(64, 64, 64);\">在你转换分支时指向新的分支</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">这样的实现方式会给我们带来什么好处呢？好吧，现在不妨再提交一次：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ vim test.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git commit -a -m &#39;made a change&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-7&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">展示了提交后的结果。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-7.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">每次提交后</span><span style=\"color: rgb(64, 64, 64);\">HEAD&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">随着分支一起向前移动</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">非常有趣，现在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;testing&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支向前移动了一格，而</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;master&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支仍然指向原先</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git checkout</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">时所在的</span><span style=\"color: rgb(64, 64, 64);\">commit&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象。现在我们回到</span><span style=\"color: rgb(64, 64, 64);\">master&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支看看：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git checkout master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-8&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">显示了结果。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-8. HEAD</span><span style=\"color: rgb(64, 64, 64);\">在一次</span><span style=\"color: rgb(64, 64, 64);\">checkout&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">之后移动到了另一个分支</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">这条命令做了两件事。它把</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;HEAD&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">指针移回到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;master&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支，并把工作目录中的文件换成了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;master&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支所指向的快照内容。也就是说，现在开始所做的改动，将始于本项目中一个较老的版本。它的主要作用是将</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;testing&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支里作出的修改暂时取消，这样你就可以向另一个方向进行开发。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">我们作些修改后再次提交：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ vim test.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git commit -a -m &#39;made other changes&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在我们的项目提交历史产生了分叉（如图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-9&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所示），因为刚才我们创建了一个分支，转换到其中进行了一些工作，然后又回到原来的主分支进行了另外一些工作。这些改变分别孤立在不同的分支里：我们可以</span><span style=\"color: rgb(64, 64, 64);\">在不同分支里反复切换，并在时机成熟时把它们合并到一起。而所有这些工作，仅仅需要</span><span style=\"color: rgb(64, 64, 64);\">branch</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">checkout</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">这两条命令就可以完成。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-9.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">不同流向的分支历史</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">由于</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">中的分支实际上仅是一个包含所指对象校验和（</span><span style=\"color: rgb(64, 64, 64);\">40&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">个字符长度</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">字串）的文件，所以创建和销毁一个分支就变得非常廉价。说白了，新建一个分支就是向一个文件写入</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;41&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">个字节（外加一个换行符）那么简单，当然也就很快了。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">这和大多数版本控制系统形成了鲜明对比，它们管理分支大多采取备份所有项目文件到特定目录的方式，所以根据项目文件数量和大小不同，可能花费的时间</span><span style=\"color: rgb(64, 64, 64);\">也会有相当大的差别，快则几秒，慢则数分钟。而</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的实现与项目复杂度无关，它永远可以在几毫秒的时间内完成分支的创建和切换。同时，因为每次提交时都记录了祖先信息（译注：即</span><span style=\"color: rgb(64, 64, 64);\">parent</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象），将来要合并分支时，寻找恰当的合并基础（译注：即共同祖先）的工作其实已经自然而然地摆在那里了，所以实现起来非常容易。</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">鼓励开发者频繁使用分支，正是因为有着这些特性作保障。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">接下来看看，我们为什么应该频繁使用分支。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">3.2&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支的新建与合并</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">现在让我们来看一个简单的分支与合并的例子，实际工作中大体也会用到这样的工作流程：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">1.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">开发某个网站。</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;2.</span><span style=\"color: rgb(64, 64, 64);\">为实现某个新的需求，创建一个分支。</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">在这个分支上开展工作。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">假设此时，你突然接到一个电话说有个很严重的问题需要紧急修补，那么可以按照下面的方式处理：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">1.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">返回到原先已经发布到生产服务器上的分支。</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;2.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">为这次紧急修补建立一个新分支，并在其中修复问题。</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">通过<a href=\"http://lib.csdn.net/base/softwaretest\" class=\"replace_word\" title=\"软件测试知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">测试</a>后，回到生产服务器所在的分支，将修补分支合并进来，然后再推送到生产服务器上。</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;4.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">切换到之前实现新需求的分支，继续工作。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">分支的新建与切换</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">首先，我们假设你正在项目中愉快地工作，并且已经提交了几次更新（见图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-10</span><span style=\"color: rgb(64, 64, 64);\">）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-10.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">一个简短的提交历史</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在，你决定要修补问题追踪系统上的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;#53&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">问题。顺带说明下，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">并不同任何特定的问题追踪系统打交道。这里为了说明要解决的问题，才把新建的分支取名为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;iss53</span><span style=\"color: rgb(64, 64, 64);\">。要新建并切换到该分支，运行</span><span style=\"color: rgb(64, 64, 64);\">git checkout</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">并加上</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">-b</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">参数：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git checkout -b iss53</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Switched to a new branch &quot;iss53&quot;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">这相当于执行下面这两条命令：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git branch iss53</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git checkout iss53</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-11&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">示意该命令的执行结果。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-11.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">创建了一个新分支的指针</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">接着你开始尝试修复问题，在提交了若干次更新后，</span><span style=\"color: rgb(64, 64, 64);\">iss53</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支的指针也会随着向前推进，因为它就是当前分支（换句话说，当前的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">HEAD</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">指针正指向</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">iss53</span><span style=\"color: rgb(64, 64, 64);\">，见图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-12</span><span style=\"color: rgb(64, 64, 64);\">）：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ vim index.html</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git commit -a -m &#39;added a new footer [issue 53]&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-12.iss53&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支随工作进展向前推进</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在你就接到了那个网站问题的紧急电话，需要马上修补。有了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">，我们就不需要同时发布这个补丁和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">iss53</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">里作出的修改，也不需要在创建和发布该补丁到服务器之前花费大力气来复原这些修改。唯一需要的仅仅是切换回</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">不过在此之前，留心你的暂存区或者工作目录里，那些还没有提交的修改，它会和你即将检出的分支产生冲突从而阻止</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">为你切换分支。切换分支的时候最好保持一个清洁的工作区域。稍后会介绍几个绕过这种问题的办法（分别叫做</span><span style=\"color: rgb(64, 64, 64);\">stashing&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;commit amending</span><span style=\"color: rgb(64, 64, 64);\">）。目前已经提交了所有的修改，所以接下来可以正常转换到</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git checkout master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Switched to branch &quot;master&quot;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">此时工作目录中的内容和你在解决问题</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;#53&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">之前一模一样，你可以集中精力进行紧急修补。这一点值得牢记：</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会把工作目录的内容恢复为检出某分支时它所指向的那个提交对象的快照。它会自动添加、删除和修改文件以确保目录的内容和你当时提交时完全一样。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">接下来，你得进行紧急修补。我们创建一个紧急修补分支</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">hotfix</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">来开展工作，直到搞定（见图</span><span style=\"color: rgb(64, 64, 64);\">3-13</span><span style=\"color: rgb(64, 64, 64);\">）：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git checkout -b &#39;hotfix&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Switched to a new branch &quot;hotfix&quot;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ vim index.html</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git commit -a -m &#39;fixed the broken email address&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">[hotfix]: created 3a0874c: &quot;fixed the broken emailaddress&quot;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;1 files changed, 0insertions(+), 1 deletions(-)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-13.hotfix&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支是从</span><span style=\"color: rgb(64, 64, 64);\">master&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支所在点分化出来的</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">有必要作些测试，确保修补是成功的，然后回到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支并把它合并进来，然后发布到生产服务器。用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitmerge</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令来进行合并：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git checkout master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git merge hotfix</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Updating f42c576..3a0874c</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Fast forward</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;README |&nbsp;&nbsp;&nbsp; 1 -</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;1 files changed, 0insertions(+), 1 deletions(-)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">请注意，合并时出现了</span><span style=\"color: rgb(64, 64, 64);\">“Fast forward”</span><span style=\"color: rgb(64, 64, 64);\">的提示。由于当前</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支所在的提交对象是要并入的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">hotfix</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支的直接上游，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">只需把</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支指针直接右移。换句话说，如果顺着一个分支走下去可以到达另一个分支的话，那么</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git</span><span style=\"color: rgb(64, 64, 64);\">在合并两者时，只会简单地把指针右移，因为这种单线的历史分支不存在任何需要解决的分歧，所以这种合并过程可以称为快进（</span><span style=\"color: rgb(64, 64, 64);\">Fast forward</span><span style=\"color: rgb(64, 64, 64);\">）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在最新的修改已经在当前</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支所指向的提交对象中了，可以部署到生产服务器上去了（见图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-14</span><span style=\"color: rgb(64, 64, 64);\">）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-14.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">合并之后，</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">分支和</span><span style=\"color: rgb(64, 64, 64);\">hotfix&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支指向同一位置。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">在那个超级重要的修补发布以后，你想要回到被打扰之前的工作。由于当前</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">hotfix</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">都指向相同的提交对象，所以</span><span style=\"color: rgb(64, 64, 64);\">hotfix</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">已经完成了历史使命，可以删掉了。使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git branch</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">-d</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">选项执行删除操作：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git branch -d hotfix</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Deleted branch hotfix (3a0874c).</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在回到之前未完成的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;#53&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">问题修复分支上继续工作（图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-15</span><span style=\"color: rgb(64, 64, 64);\">）：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git checkout iss53</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Switched to branch &quot;iss53&quot;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ vim index.html</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git commit -a -m &#39;finished the new footer [issue 53]&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">[iss53]: created ad82d7a: &quot;finished the new footer[issue 53]&quot;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;1 files changed, 1insertions(+), 0 deletions(-)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-15. iss53</span><span style=\"color: rgb(64, 64, 64);\">分支可以不受影响继续推进。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">不用担心之前</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">hotfix</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支的修改内容尚未包含到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">iss53</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">中来。如果确实需要纳入此次修补，可以用</span><span style=\"color: rgb(64, 64, 64);\">git merge master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">把</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;master&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支合并到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">iss53</span><span style=\"color: rgb(64, 64, 64);\">；或者等</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">iss53</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">完成之后，再将</span><span style=\"color: rgb(64, 64, 64);\">iss53</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支中的更新并入</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">分支的合并</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">在问题</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;#53&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">相关的工作完成之后，可以合并回</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支。实际操作同前面合并</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">hotfix</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支差不多，只需回到</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支，运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git merge</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令指定要合并进来的分支：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git checkout master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git merge iss53</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Merge made by recursive.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;README |&nbsp;&nbsp;&nbsp; 1 +</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;1 files changed, 1insertions(+), 0 deletions(-)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">请注意，这次合并操作的底层实现，并不同于之前</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">hotfix</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的并入方式。因为这次你的开发历史是从更早的地方开始分叉的。由于当前</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支所指向的提交对象（</span><span style=\"color: rgb(64, 64, 64);\">C4</span><span style=\"color: rgb(64, 64, 64);\">）并不是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">iss53</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支的直接祖先，</span><span style=\"color: rgb(64, 64, 64);\">Git</span><span style=\"color: rgb(64, 64, 64);\">不得不进行一些额外处理。就此例而言，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会用两个分支的末端（</span><span style=\"color: rgb(64, 64, 64);\">C4&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C5</span><span style=\"color: rgb(64, 64, 64);\">）以及它们的共同祖先（</span><span style=\"color: rgb(64, 64, 64);\">C2</span><span style=\"color: rgb(64, 64, 64);\">）进行一次简单的三方合并计算。图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-16&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">用红框标出了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">用于合并的三个提交对象：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-16. Git</span><span style=\"color: rgb(64, 64, 64);\">为分支合并自动识别出最佳的同源合并点。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">这次，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">没有简单地把分支指针右移，而是对三方合并后的结果重新做一个新的快照，并自动创建一个指向它的提交对象（</span><span style=\"color: rgb(64, 64, 64);\">C6</span><span style=\"color: rgb(64, 64, 64);\">）（见图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-17</span><span style=\"color: rgb(64, 64, 64);\">）。这个提交对象比较特殊，它有两个祖先（</span><span style=\"color: rgb(64, 64, 64);\">C4&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C5</span><span style=\"color: rgb(64, 64, 64);\">）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">值得一提的是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">可以自己裁决哪个共同祖先才是最佳合并基础；这和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;CVS&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">或</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion</span><span style=\"color: rgb(64, 64, 64);\">（</span><span style=\"color: rgb(64, 64, 64);\">1.5&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">以后的版本）不同，它们需要开发者手工指定合并基础。所以此特性让</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的合并操作比其他系统都要简单不少。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-17. Git</span><span style=\"color: rgb(64, 64, 64);\">自动创建了一个包含了合并结果的提交对象。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">既然之前的工作成果已经合并到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">了，那么</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">iss53</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">也就没用了。你可以就此删除它，并在问题追踪系统里关闭该问题。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git branch -d iss53</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">遇到冲突时的分支合并</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">有时候合并操作并不会如此顺利。如果在不同的分支中都修改了同一个文件的同一部分，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">就无法干净地把两者合到一起（译注：逻辑上说，这种问题只能由人来裁决。）。如果你在解决问题</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;#53&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的过程中修改了</span><span style=\"color: rgb(64, 64, 64);\">hotfix</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">中修改的部分，将得到类似下面的结果：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git merge iss53</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Auto-merging index.html</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">CONFLICT (content): Merge conflict in index.html</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Automatic merge failed; fix conflicts and then commit theresult.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">作了合并，但没有提交，它会停下来等你解决冲突。要看看哪些文件在合并时发生冲突，可以用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git status</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">查阅：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">[master*]$ git status</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">index.html: needs merge</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># On branch master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Changed but not updated:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp; (use &quot;gitadd</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp; ...&quot; toupdate what will be committed)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp; (use &quot;gitcheckout --</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...&quot; todiscard changes in working directory)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unmerged:&nbsp;&nbsp; index.html</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">任何包含未解决冲突的文件都会以未合并（</span><span style=\"color: rgb(64, 64, 64);\">unmerged</span><span style=\"color: rgb(64, 64, 64);\">）的状态列出。</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会在有冲突的文件里加入标准的冲突解决标记，可以通过它们来手工定位并解决这些冲突。可以看到此文件包含类似下面这样的部分：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp; contact :email.support@github.com</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">=======</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; please contact usat support@github.com</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; iss53:index.html</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">可以看到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">=======</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">隔开的上半部分，是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">HEAD</span><span style=\"color: rgb(64, 64, 64);\">（即</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支，在运行</span><span style=\"color: rgb(64, 64, 64);\">merge</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令时所切换到的分支）中的内容，下半部分是在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">iss53</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支中的内容。解决冲突的办法无非是二者选其一或者由你亲自整合到一起。比如你可以通过把这段内容替换为下面这样来解决：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; &nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">please contact us at email.support@github.com</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">这个解决方案各采纳了两个分支中的一部分内容，而且我还删除了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">=======</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">这些行。在解决了所有文件里的所有冲突后，运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git add</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">将把它们标记为已解决状态（译注：实际上就是来一次快照保存到暂存区域。）。因为一旦暂存，就表示冲突已经解决。如果你想用一个有图形界面的工具来解决这些问题，不妨运行</span><span style=\"color: rgb(64, 64, 64);\">git mergetool</span><span style=\"color: rgb(64, 64, 64);\">，它会调用一个可视化的合并工具并引导你解决所有冲突：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git mergetool</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">merge tool candidates: kdiff3 tkdiff xxdiff meld gvimdiffopendiff emerge vimdiff</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Merging the files: index.html</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Normal merge conflict for &#39;index.html&#39;:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; {local}: modified</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; {remote}:modified</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Hit return to start merge resolution tool (opendiff):</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果不想用默认的合并工具（</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">为我默认选择了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">opendiff</span><span style=\"color: rgb(64, 64, 64);\">，因为我在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Mac&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">上运行了该命令），你可以在上方</span><span style=\"color: rgb(64, 64, 64);\">”merge tool candidates”</span><span style=\"color: rgb(64, 64, 64);\">里找到可用的合并工具列表，输入你想用的工具名。我们将在第七章讨论怎样改变环境中的默认值。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">退出合并工具以后，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会询问你合并是否成功。如果回答是，它会为你把相关文件暂存起来，以表明状态为已解决。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">再运行一次</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitstatus</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">来确认所有冲突都已解决：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git status</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># On branch master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Changes to be committed:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp; (use &quot;gitreset HEAD</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp; ...&quot; tounstage)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; modified:&nbsp;&nbsp; index.html</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果觉得满意了，并且确认所有冲突都已解决，也就是进入了暂存区，就可以用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git commit</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">来完成这次合并提交。提交的记录差不多是这样：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Merge branch &#39;iss53&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Conflicts:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; index.html</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># It looks like you may be committing a MERGE.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># If this is not correct, please remove the file</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># .git/MERGE_HEAD</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># and try again.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">如果想给将来看这次合并的人一些方便，可以修改该信息，提供更多合并细节。比如你都作了哪些改动，以及这么做的原因。有时候裁决冲突的理由并不直接或明显，有必要略加注解。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">3.3&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支的管理</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">到目前为止，你已经学会了如何创建、合并和删除分支。除此之外，我们还需要学习如何管理分支，在日后的常规工作中会经常用到下面介绍的管理命令。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">gitbranch</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令不仅仅能创建和删除分支，如果不加任何参数，它会给出当前所有分支的清单：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git branch</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; iss53</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">* master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; testing</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">注意看</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支前的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">*</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">字符：它表示当前所在的分支。也就是说，如果现在提交更新，</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支将随着开发进度前移。若要查看各个分支最后一个提交对象的信息，运行</span><span style=\"color: rgb(64, 64, 64);\">git branch -v</span><span style=\"color: rgb(64, 64, 64);\">：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git branch -v</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; iss53&nbsp;&nbsp; 93b412c fix&nbsp;<a href=\"http://lib.csdn.net/base/javascript\" class=\"replace_word\" title=\"JavaScript知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">JavaScript</a>&nbsp;issue</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">* master&nbsp; 7a98805Merge branch &#39;iss53&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; testing 782fd34add scott to the author list in the readmes</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">要从该清单中筛选出你已经（或尚未）与当前分支合并的分支，可以用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">--merge</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">--no-merged</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">选项（</span><span style=\"color: rgb(64, 64, 64);\">Git 1.5.6&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">以上版本）。比如用</span><span style=\"color: rgb(64, 64, 64);\">git branch --merge</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">查看哪些分支已被并入当前分支（译注：也就是说哪些分支是当前分支的直接上游。）：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git branch --merged</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; iss53</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">* master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">之前我们已经合并了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">iss53</span><span style=\"color: rgb(64, 64, 64);\">，所以在这里会看到它。一般来说，列表中没有</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">*</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的分支通常都可以用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git branch -d</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">来删掉。原因很简单，既然已经把它们所包含的工作整合到了其他分支，删掉也不会损失什么。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">另外可以用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitbranch --no-merged</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">查看尚未合并的工作：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git branch --no-merged</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; testing</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">它会显示还未合并进来的分支。由于这些分支中还包含着尚未合并进来的工作成果，所以简单地用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git branch -d</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">删除该分支会提示错误，因为那样做会丢失数据：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git branch -d testing</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">error: The branch &#39;testing&#39; is not an ancestor of yourcurrent HEAD.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">If you are sure you want to delete it, run &#39;git branch -Dtesting&#39;.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">不过，如果你确实想要删除该分支上的改动，可以用大写的删除选项</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">-D</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">强制执行，就像上面提示信息中给出的那样。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">3.4&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">利用分支进行开发的工作流程</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">现在我们已经学会了新建分支和合并分支，可以（或应该）用它来做点什么呢？在本节，我们会介绍一些利用分支进行开发的工作流程。而正是由于分支管理的便捷，才衍生出了这类典型的工作模式，你可以根据项目的实际情况选择一种用用看。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">长期分支</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">由于</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">使用简单的三方合并，所以就算在较长一段时间内，反复多次把某个分支合并到另一分支，也不是什么难事。也就是说，你可以同时拥有多个开放的分支，每个分支用于完成特定的任务，随着开发的推进，你可以随时把某个特性分支的成果并到其他分支中。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">许多使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的开发者都喜欢用这种方式来开展工作，比如仅在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支中保留完全稳定的代码，即已经发布或即将发布的代码。与此同时，他们还有一个名为</span><span style=\"color: rgb(64, 64, 64);\">develop</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">或</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">next</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的平行分支，专门用于后续的开发，或仅用于稳定性测试</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;—&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">当然并不是说一定要绝对稳定，不过一旦进入某种稳定状态，便可以把它合并到</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">里。这样，在确保这些已完成的特性分支（短期分支，比如之前的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">iss53</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支）能够通过所有测试，并且不会引入更多错误之后，就可以并到主干分支中，等待下一次的发布。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">本质上我们刚才谈论的，是随着提交对象不断右移的指针。稳定分支的指针总是在提交历史中落后一大截，而前沿分支总是比较靠前（见图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-18</span><span style=\"color: rgb(64, 64, 64);\">）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-18.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">稳定分支总是比较老旧。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">或者把它们想象成工作流水线，或许更好理解一些，经过测试的提交对象集合被遴选到更稳定的流水线（见图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-19</span><span style=\"color: rgb(64, 64, 64);\">）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-19.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">想象成流水线可能会容易点。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">你可以用这招维护不同层次的稳定性。某些大项目还会有个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">proposed</span><span style=\"color: rgb(64, 64, 64);\">（建议）或</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">pu</span><span style=\"color: rgb(64, 64, 64);\">（</span><span style=\"color: rgb(64, 64, 64);\">proposed updates</span><span style=\"color: rgb(64, 64, 64);\">，建议更新）分支，它包含着那些可能还没有成熟到进入</span><span style=\"color: rgb(64, 64, 64);\">next</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">或</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的内容。这么做的目的是拥有不同层次的稳定性：当这些分支进入到更稳定的水平时，再把它们合并到更高层分支中去。再次说明下，使用多个长期分支的做法并非必需，不过一般来说，对于特大型项目或特复杂的项目，这么做确实更容易管理。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">特性分支</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">在任何规模的项目中都可以使用特性（</span><span style=\"color: rgb(64, 64, 64);\">Topic</span><span style=\"color: rgb(64, 64, 64);\">）分支。一个特性分支是指一个短期的，用来实现单一特性或与其相关工作的分支。可能你在以前的版本控</span><span style=\"color: rgb(64, 64, 64);\">制系统里从未做过类似这样的事情，因为通常创建与合并分支消耗太大。然而在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git</span><span style=\"color: rgb(64, 64, 64);\">中，一天之内建立、使用、合并再删除多个分支是常见的事。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">我们在上节的例子里已经见过这种用法了。我们创建了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">iss53</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">hotfix</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">这两个特性分支，在提交了若干更新后，把它们合并到主干分支，然后删除。该技术允许你迅速且完全的进行语境切换</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;—&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">因为你的工作分散在不同的流水线里，每个分支里的改变都和它的目标特性相关，浏览代码之类的事情因而变得更简单了。你可以把作出的改变保持在特性分支中几</span><span style=\"color: rgb(64, 64, 64);\">分钟，几天甚至几个月，等它们成熟以后再合并，而不用在乎它们建立的顺序或者进度。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在我们来看一个实际的例子。请看图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-20</span><span style=\"color: rgb(64, 64, 64);\">，由下往上，起先我们在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">工作到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C1</span><span style=\"color: rgb(64, 64, 64);\">，然后开始一个新分支</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">iss91</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">尝试修复</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;91&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">号缺陷，提交到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C6&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的时候，又冒出一个解决该问题的新办法，于是从之前</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C4&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的地方又分出一个分支</span><span style=\"color: rgb(64, 64, 64);\">iss91v2</span><span style=\"color: rgb(64, 64, 64);\">，干到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C8&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的时候，又回到主干</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">中提交了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C9</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C10</span><span style=\"color: rgb(64, 64, 64);\">，再回到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">iss91v2</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">继续工作，提交</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C11</span><span style=\"color: rgb(64, 64, 64);\">，接着，又冒出个不太确定的想法，从</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的最新提交</span><span style=\"color: rgb(64, 64, 64);\">C10&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">处开了个新的分支</span><span style=\"color: rgb(64, 64, 64);\">dumbidea</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">做些试验。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-20.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">拥有多个特性分支的提交历史。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在，假定两件事情：我们最终决定使用第二个解决方案，即</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">iss91v2</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">中的办法；另外，我们把</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">dumbidea</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支拿给同事们看了以后，发现它竟然是个天才之作。所以接下来，我们准备抛弃原来的</span><span style=\"color: rgb(64, 64, 64);\">iss91</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支（实际上会丢弃</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C5&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C6</span><span style=\"color: rgb(64, 64, 64);\">），直接在主干中并入另外两个分支。最终的提交历史将变成图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-21&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">这样：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-21.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">合并了</span><span style=\"color: rgb(64, 64, 64);\">dumbidea&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;iss91v2&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">后的分支历史。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">请务必牢记这些分支全部都是本地分支，这一点很重要。当你在使用分支及合并的时候，一切都是在你自己的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库中进行的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;—&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">完全不涉及与服务器的交互。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">3.5&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">远程分支</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">远程分支（</span><span style=\"color: rgb(64, 64, 64);\">remote branch</span><span style=\"color: rgb(64, 64, 64);\">）是对远程仓库中的分支的索引。它们是一些无法移动的本地分支；只有在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">进行网络交互时才会更新。远程分支就像是书签，提醒着你上次连接远程仓库时上面各分支的位置。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">我们用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">(</span><span style=\"color: rgb(64, 64, 64);\">远程仓库名)/(</span>分支名)<span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">这样的形式表示远程分支。比如我们想看看上次同</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">origin</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库通讯时</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的样子，就应该查看</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">origin/master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支。如果你和同伴一起修复某个问题，但他们先推送了一个</span><span style=\"color: rgb(64, 64, 64);\">iss53</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支到远程仓库，虽然你可能也有一个本地的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">iss53</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支，但指向服务器上最新更新的却应该是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">origin/iss53</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">可能有点乱，我们不妨举例说明。假设你们团队有个地址为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git.ourcompany.com</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">服务器。如果你从这里克隆，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会自动为你将此远程仓库命名为</span><span style=\"color: rgb(64, 64, 64);\">origin</span><span style=\"color: rgb(64, 64, 64);\">，并下载其中所有的数据，建立一个指向它的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支的指针，在本地命名为</span><span style=\"color: rgb(64, 64, 64);\">origin/master</span><span style=\"color: rgb(64, 64, 64);\">，但你无法在本地更改其数据。接着，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">建立一个属于你自己的本地</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支，始于</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">origin</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">上</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">分支相同的位置，你可以就此开始工作（见图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-22</span><span style=\"color: rgb(64, 64, 64);\">）：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-22.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">一次</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">克隆会建立你自己的本地分支</span><span style=\"color: rgb(64, 64, 64);\">master&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和远程分支</span><span style=\"color: rgb(64, 64, 64);\">origin/master</span><span style=\"color: rgb(64, 64, 64);\">，它们都指向</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;origin/master&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支的最后一次提交。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果你在本地</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支做了些改动，与此同时，其他人向</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git.ourcompany.com</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">推送了他们的更新，那么服务器上的</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支就会向前推进，而于此同时，你在本地的提交历史正朝向不同方向发展。不过只要你不和服务器通讯，你的</span><span style=\"color: rgb(64, 64, 64);\">origin/master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">指针仍然保持原位不会移动（见图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-23</span><span style=\"color: rgb(64, 64, 64);\">）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-23.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">在本地工作的同时有人向远程仓库推送内容会让提交历史开始分流。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">可以运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitfetch origin</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">来同步远程服务器上的数据到本地。该命令首先找到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">origin</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">是哪个服务器（本例为</span><span style=\"color: rgb(64, 64, 64);\">git.ourcompany.com</span><span style=\"color: rgb(64, 64, 64);\">），从上面获取你尚未拥有的数据，更新你本地的<a href=\"http://lib.csdn.net/base/mysql\" class=\"replace_word\" title=\"MySQL知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">数据库</a>，然后把</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">origin/master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的指针移到它最新的位置上（见图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-24</span><span style=\"color: rgb(64, 64, 64);\">）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-24. gitfetch&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令会更新</span><span style=\"color: rgb(64, 64, 64);\">remote&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">索引。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">为了演示拥有多个远程分支（在不同的远程服务器上）的项目是如何工作的，我们假设你还有另一个仅供你的<a href=\"http://lib.csdn.net/base/agile\" class=\"replace_word\" title=\"敏捷知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">敏捷</a>开发小组使用的内部服务器</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git.team1.ourcompany.com</span><span style=\"color: rgb(64, 64, 64);\">。可以用第二章中提到的</span><span style=\"color: rgb(64, 64, 64);\">git remote add</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令把它加为当前项目的远程分支之一。我们把它命名为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">teamone</span><span style=\"color: rgb(64, 64, 64);\">，以便代替原始的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">地址（见图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-25</span><span style=\"color: rgb(64, 64, 64);\">）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-25.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">把另一个服务器加为远程仓库</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在你可以用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitfetch teamone</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">来获取小组服务器上你还没有的数据了。由于当前该服务器上的内容是你</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">origin</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">服务器上的子集，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">不会下载任何数据，而只是简单地创建一个名为</span><span style=\"color: rgb(64, 64, 64);\">teamone/master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的分支，指向</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">teamone</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">服务器上</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支所在的提交对象</span><span style=\"color: rgb(64, 64, 64);\">31b8e</span><span style=\"color: rgb(64, 64, 64);\">（见图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-26</span><span style=\"color: rgb(64, 64, 64);\">）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-26.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">你在本地有了一个指向</span><span style=\"color: rgb(64, 64, 64);\">teamone&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">服务器上</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;master&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支的索引。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">推送本地分支</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">要想和其他人分享某个本地分支，你需要把它推送到一个你拥有写权限的远程仓库。你的本地分支不会被自动同步到你引入的远程服务器上，除非你明确执行推送操作。换句话说，对于无意分享的分支，你尽管保留为私人分支好了，而只推送那些协同工作要用到的特性分支。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果你有个叫</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">serverfix</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的分支需要和他人一起开发，可以运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git push (</span><span style=\"color: rgb(64, 64, 64);\">远程仓库名) (</span>分支名)<span style=\"color: rgb(64, 64, 64);\">：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git push origin serverfix</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Counting objects: 20, done.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Compressing objects: 100% (14/14), done.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Writing objects: 100% (15/15), 1.74 KiB, done.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Total 15 (delta 5), reused 0 (delta 0)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">To git@github.com:schacon/simplegit.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;* [newbranch]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; serverfix -&gt; serverfix</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">这其实有点像条捷径。</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">自动把</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">serverfix</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支名扩展为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">refs/heads/serverfix:refs/heads/serverfix</span><span style=\"color: rgb(64, 64, 64);\">，意为</span><span style=\"color: rgb(64, 64, 64);\">“</span><span style=\"color: rgb(64, 64, 64);\">取出我在本地的</span><span style=\"color: rgb(64, 64, 64);\">serverfix&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支，推送到远程仓库的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;serverfix&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支中去</span><span style=\"color: rgb(64, 64, 64);\">”</span><span style=\"color: rgb(64, 64, 64);\">。我们将在第九章进一步介绍</span><span style=\"color: rgb(64, 64, 64);\">refs/heads/</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">部分的细节，不过一般使用的时候都可以省略它。也可以运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git push origin serverfix:serferfix</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">来实现相同的效果，它的意思是</span><span style=\"color: rgb(64, 64, 64);\">“</span><span style=\"color: rgb(64, 64, 64);\">上传我本地的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;serverfix&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支到远程仓库中去，仍旧称它为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;serverfix&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支</span><span style=\"color: rgb(64, 64, 64);\">”</span><span style=\"color: rgb(64, 64, 64);\">。通过此语法，你可以把本地分支推送到某个命名不同的远程分支：若想把远程分支叫作</span><span style=\"color: rgb(64, 64, 64);\">awesomebranch</span><span style=\"color: rgb(64, 64, 64);\">，可以用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git push origin serverfix:awesomebranch</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">来推送数据。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">接下来，当你的协作者再次从服务器上获取数据时，他们将得到一个新的远程分支</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">origin/serverfix</span><span style=\"color: rgb(64, 64, 64);\">：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git fetch origin</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">remote: Counting objects: 20, done.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">remote: Compressing objects: 100% (14/14), done.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">remote: Total 15 (delta 5), reused 0 (delta 0)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Unpacking objects: 100% (15/15), done.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">From git@github.com:schacon/simplegit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;* [newbranch]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; serverfix&nbsp;&nbsp;&nbsp; -&gt; origin/serverfix</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">值得注意的是，在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">fetch</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">操作下载好新的远程分支之后，你仍然无法在本地编辑该远程仓库中的分支。换句话说，在本例中，你不会有一个新的</span><span style=\"color: rgb(64, 64, 64);\">serverfix</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支，有的只是一个你无法移动的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">origin/serverfix</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">指针。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果要把该内容合并到当前分支，可以运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git merge origin/serverfix</span><span style=\"color: rgb(64, 64, 64);\">。如果想要一份自己的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">serverfix</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">来开发，可以在远程分支的基础上分化出一个新的分支来：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git checkout -b serverfix origin/serverfix</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Branch serverfix set up to track remote branchrefs/remotes/origin/serverfix.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Switched to a new branch &quot;serverfix&quot;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">这会切换到新建的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">serverfix</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">本地分支，其内容同远程分支</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">origin/serverfix</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">一致，这样你就可以在里面继续开发了。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">跟踪远程分支</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">从远程分支</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">checkout</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">出来的本地分支，称为</span><span style=\"color: rgb(64, 64, 64);\">_</span><span style=\"color: rgb(64, 64, 64);\">跟踪分支</span><span style=\"color: rgb(64, 64, 64);\">(tracking branch)_</span><span style=\"color: rgb(64, 64, 64);\">。跟踪分支是一种和远程分支有直接联系的本地分支。在跟踪分支里输入</span><span style=\"color: rgb(64, 64, 64);\">git push</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会自行推断应该向哪个服务器的哪个分支推送数据。反过来，在这些分支里运行</span><span style=\"color: rgb(64, 64, 64);\">git pull</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会获取所有远程索引，并把它们的数据都合并到本地分支中来。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">在克隆仓库时，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">通常会自动创建一个名为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的分支来跟踪</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">origin/master</span><span style=\"color: rgb(64, 64, 64);\">。这正是</span><span style=\"color: rgb(64, 64, 64);\">git push</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git pull</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">一开始就能正常工作的原因。当然，你可以随心所欲地设定为其它跟踪分支，比如</span><span style=\"color: rgb(64, 64, 64);\">origin</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">上除了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">之外的其它分支。刚才我们已经看到了这样的一个例子：</span><span style=\"color: rgb(64, 64, 64);\">git checkout -b [</span><span style=\"color: rgb(64, 64, 64);\">分支名] [</span>远程名]/[分支名]<span style=\"color: rgb(64, 64, 64);\">。如果你有</span><span style=\"color: rgb(64, 64, 64);\">1.6.2&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">以上版本的</span><span style=\"color: rgb(64, 64, 64);\">Git</span><span style=\"color: rgb(64, 64, 64);\">，还可以用</span><span style=\"color: rgb(64, 64, 64);\">--track</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">选项简化：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git checkout --track origin/serverfix</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Branch serverfix set up to track remote branchrefs/remotes/origin/serverfix.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Switched to a new branch &quot;serverfix&quot;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">要为本地分支设定不同于远程分支的名字，只需在前个版本的命令里换个名字：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git checkout -b sf origin/serverfix</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Branch sf set up to track remote branchrefs/remotes/origin/serverfix.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Switched to a new branch &quot;sf&quot;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在你的本地分支</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">sf</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会自动向</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">origin/serverfix</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">推送和抓取数据了。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">删除远程分支</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果不再需要某个远程分支了，比如搞定了某个特性并把它合并进了远程的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支（或任何其他存放稳定代码的地方），可以用这个非常无厘头的语法来删除它：</span><span style=\"color: rgb(64, 64, 64);\">git push [</span><span style=\"color: rgb(64, 64, 64);\">远程名] :[</span>分支名]<span style=\"color: rgb(64, 64, 64);\">。如果想在服务器上删除</span><span style=\"color: rgb(64, 64, 64);\">serverfix</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支，运行下面的命令：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git push origin :serverfix</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">To git@github.com:schacon/simplegit.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;- [deleted]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; serverfix</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">咚！服务器上的分支没了。你最好特别留心这一页，因为你一定会用到那个命令，而且你很可能会忘掉它的语法。有种方便记忆这条命令的方法：记住我们不久前见过的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git push [</span><span style=\"color: rgb(64, 64, 64);\">远程名] [</span>本地分支]:[远程分支]<span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">语法，如果省略</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">[</span><span style=\"color: rgb(64, 64, 64);\">本地分支]</span><span style=\"color: rgb(64, 64, 64);\">，那就等于是在说</span><span style=\"color: rgb(64, 64, 64);\">“</span><span style=\"color: rgb(64, 64, 64);\">在这里提取空白然后把它变成</span><span style=\"color: rgb(64, 64, 64);\">[</span><span style=\"color: rgb(64, 64, 64);\">远程分支]</span><span style=\"color: rgb(64, 64, 64);\">”</span><span style=\"color: rgb(64, 64, 64);\">。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">3.6&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支的衍合</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">把一个分支整合到另一个分支的办法有两种：</span><span style=\"color: rgb(64, 64, 64);\">merge</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">rebase</span><span style=\"color: rgb(64, 64, 64);\">（译注：</span><span style=\"color: rgb(64, 64, 64);\">rebase</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的翻译暂定为</span><span style=\"color: rgb(64, 64, 64);\">“</span><span style=\"color: rgb(64, 64, 64);\">衍合</span><span style=\"color: rgb(64, 64, 64);\">”</span><span style=\"color: rgb(64, 64, 64);\">，大家知道就可以了。）。在本章我们会学习什么是衍合，如何使用衍合，为什么衍合操作如此富有魅力，以及我们应该在什么情况下使用衍合。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">基本的衍合操作</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">请回顾之前有关合并的一节（见图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-27</span><span style=\"color: rgb(64, 64, 64);\">），你会看到开发进程分叉到两个不同分支，又各自提交了更新。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-27.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">最初分叉的提交历史。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">之前介绍过，最容易的整合分支的方法是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">merge</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令，它会把两个分支最新的快照（</span><span style=\"color: rgb(64, 64, 64);\">C3&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C4</span><span style=\"color: rgb(64, 64, 64);\">）以及二者最新的共同祖先（</span><span style=\"color: rgb(64, 64, 64);\">C2</span><span style=\"color: rgb(64, 64, 64);\">）进行三方合并，合并的结果是产生一个新的提交对象（</span><span style=\"color: rgb(64, 64, 64);\">C5</span><span style=\"color: rgb(64, 64, 64);\">）。如图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-28&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所示：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-28.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">通过合并一个分支来整合分叉了的历史。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">其实，还有另外一个选择：你可以把在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C3&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">里产生的变化补丁在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C4&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的基础上重新打一遍。在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">里，这种操作叫做</span><span style=\"color: rgb(64, 64, 64);\">_</span><span style=\"color: rgb(64, 64, 64);\">衍合（</span><span style=\"color: rgb(64, 64, 64);\">rebase</span><span style=\"color: rgb(64, 64, 64);\">）</span><span style=\"color: rgb(64, 64, 64);\">_</span><span style=\"color: rgb(64, 64, 64);\">。有了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">rebase</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令，就可以把在一个分支里提交的改变移到另一个分支里重放一遍。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">在上面这个例子中，运行：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git checkout experiment</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git rebase master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">First, rewinding head to replay your work on top of it...</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Applying: added staged command</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">它的原理是回到两个分支最近的共同祖先，根据当前分支（也就是要进行衍合的分支</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">experiment</span><span style=\"color: rgb(64, 64, 64);\">）后续的历次提交对象（这里只有一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C3</span><span style=\"color: rgb(64, 64, 64);\">），生成一系列文件补丁，然后以基底分支（也就是主干分支</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">）最后一个提交对象（</span><span style=\"color: rgb(64, 64, 64);\">C4</span><span style=\"color: rgb(64, 64, 64);\">）为新的出发点，逐个应用之前准备好的补丁文件，最后会生成一个新的合并提交对象（</span><span style=\"color: rgb(64, 64, 64);\">C3’</span><span style=\"color: rgb(64, 64, 64);\">），从而改写</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">experiment</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的提交历史，使它成为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支的直接下游，如图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-29&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所示：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-29.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">把</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C3&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">里产生的改变到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C4</span><span style=\"color: rgb(64, 64, 64);\">上重演一遍。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在回到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支，进行一次快进合并（见图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-30</span><span style=\"color: rgb(64, 64, 64);\">）：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-30.master&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支的快进。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C3’&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对应的快照，其实和普通的三方合并，即上个例子中的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C5&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对应的快照内容一模一样了。虽然最后整合得到的结果没有任何区别，但衍合能产生一个更为整洁的提交历史。如果视察一个衍合过的分支的历史记录，看起来会更</span><span style=\"color: rgb(64, 64, 64);\">清楚：仿佛所有修改都是在一根线上先后进行的，尽管实际上它们原本是同时并行发生的。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">一般我们使用衍合的目的，是想要得到一个能在远程分支上干净应用的补丁</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;—&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">比如某些项目你不是维护者，但想帮点忙的话，最好用衍合：先在自己的一个分支里进行开发，当准备向主项目提交补丁的时候，根据最新的</span><span style=\"color: rgb(64, 64, 64);\">origin/master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">进行一次衍合操作然后再提交，这样维护者就不需要做任何整合工作（译注：实际上是把解决分支补丁同最新主干代码之间冲突的责任，化转为由提交补丁的人来解决。），只需根据你提供的仓库地址作一次快进合并，或者直接采纳你提交的补丁。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">请注意，合并结果中最后一次提交所指向的快照，无论是通过衍合，还是三方合并，都会得到相同的快照内容，只不过提交历史不同罢了。衍合是按照每行的修改次序重演一遍修改，而合并是把最终结果合在一起。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">有趣的衍合</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">衍合也可以放到其他分支进行，并不一定非得根据分化之前的分支。以图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-31&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的历史为例，我们为了给服务器端代码添加一些功能而创建了特性分支</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">server</span><span style=\"color: rgb(64, 64, 64);\">，然后提交</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C3&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C4</span><span style=\"color: rgb(64, 64, 64);\">。然后又从</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C3&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的地方再增加一个</span><span style=\"color: rgb(64, 64, 64);\">client</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支来对客户端代码进行一些相应修改，所以提交了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C8&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C9</span><span style=\"color: rgb(64, 64, 64);\">。最后，又回到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">server</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支提交了</span><span style=\"color: rgb(64, 64, 64);\">C10</span><span style=\"color: rgb(64, 64, 64);\">。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-31.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">从一个特性分支里再分出一个特性分支的历史。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">假设在接下来的一次软件发布中，我们决定先把客户端的修改并到主线中，而暂缓并入服务端软件的修改（因为还需要进一步测试）。这个时候，我们就可以把基于</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">server</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支而非</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支的改变（即</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C8&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C9</span><span style=\"color: rgb(64, 64, 64);\">），跳过</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">server</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">直接放到</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支中重演一遍，但这需要用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git rebase</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">--onto</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">选项指定新的基底分支</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git rebase --onto master server client</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">这好比在说：</span><span style=\"color: rgb(64, 64, 64);\">“</span><span style=\"color: rgb(64, 64, 64);\">取出</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">client</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支，找出</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">client</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">server</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支的共同祖先之后的变化，然后把它们在</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">上重演一遍</span><span style=\"color: rgb(64, 64, 64);\">”</span><span style=\"color: rgb(64, 64, 64);\">。是不是有点复杂？不过它的结果如图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-32&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所示，非常酷（译注：虽然</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">client</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">里的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C8, C9&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C3&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">之后，但这仅表明时间上的先后，而非在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C3&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">修改的基础上进一步改动，因为</span><span style=\"color: rgb(64, 64, 64);\">server</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">client</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">这两个分支对应的代码应该是两套文件，虽然这么说不是很严格，但应理解为在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C3&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">时间点之后，对另外的文件所做的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C8</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">C9&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">修改，放到主干重演。）：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-32.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">将特性分支上的另一个特性分支衍合到其他分支。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在可以快进</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支了（见图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-33</span><span style=\"color: rgb(64, 64, 64);\">）：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git checkout master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git merge client</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-33.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">快进</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;master&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支，使之包含</span><span style=\"color: rgb(64, 64, 64);\">client&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支的变化。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在我们决定把</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">server</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支的变化也包含进来。我们可以直接把</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">server</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支衍合到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">，而不用手工切换到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">server</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支后再执行衍合操作</span><span style=\"color: rgb(64, 64, 64);\">—&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git rebase [</span><span style=\"color: rgb(64, 64, 64);\">主分支] [</span>特性分支]<span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令会先取出特性分支</span><span style=\"color: rgb(64, 64, 64);\">server</span><span style=\"color: rgb(64, 64, 64);\">，然后在主分支</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">上重演：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git rebase master server</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">于是，</span><span style=\"color: rgb(64, 64, 64);\">server</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的进度应用到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的基础上，如图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-34&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所示：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-34.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;master&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支上衍合</span><span style=\"color: rgb(64, 64, 64);\">server&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">然后就可以快进主干分支</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">了：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git checkout master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git merge server</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">client</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">server</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支的变化都已经集成到主干分支来了，可以删掉它们了。最终我们的提交历史会变成图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-35&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的样子：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git branch -d client</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git branch -d server</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-35.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">最终的提交历史</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">衍合的风险</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">呃，奇妙的衍合也并非完美无缺，要用它得遵守一条准则：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行衍合操作。</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">如果你遵循这条金科玉律，就不会出差错。否则，人民群众会仇恨你，你的朋友和家人也会嘲笑你，唾弃你。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">在进行衍合的时候，实际上抛弃了一些现存的提交对象而创造了一些类似但不同的新的提交对象。如果你把原来分支中的提交对象发布出去，并且其他人更新下载后在其基础上开展工作，而稍后你又用</span><span style=\"color: rgb(64, 64, 64);\">git rebase</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">抛弃这些提交对象，把新的重演后的提交对象发布出去的话，你的合作者就不得不重新合并他们的工作，这样当你再次从他们那里获取内容时，提交历史就会变得一团糟。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">下面我们用一个实际例子来说明为什么公开的衍合会带来问题。假设你从一个中央服务器克隆然后在它的基础上搞了一些开发，提交历史类似图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-36&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所示：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-36.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">克隆一个仓库，在其基础上工作一番。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在，某人在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的基础上做了些改变，并合并他自己的分支得到结果</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C6</span><span style=\"color: rgb(64, 64, 64);\">，推送到中央服务器。当你抓取并合并这些数据到你本地的开发分支中后，会得到合并结果</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C7</span><span style=\"color: rgb(64, 64, 64);\">，历史提交会变成图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-37&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">这样：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-37.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">抓取他人提交，并入自己主干。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">接下来，那个推送</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C6&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">上来的人决定用衍合取代之前的合并操作；继而又用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git push --force</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">覆盖了服务器上的历史，得到</span><span style=\"color: rgb(64, 64, 64);\">C4’</span><span style=\"color: rgb(64, 64, 64);\">。而之后当你再从服务器上下载最新提交后，会得到：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-38.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">有人推送了衍合后得到的</span><span style=\"color: rgb(64, 64, 64);\">C4’</span><span style=\"color: rgb(64, 64, 64);\">，丢弃了你作为开发基础的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C4</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C6</span><span style=\"color: rgb(64, 64, 64);\">。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">下载更新后需要合并，但此时衍合产生的提交对象</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C4’&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">校验值和之前</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C4&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">完全不同，所以</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会把它们当作新的提交对象处理，而实际上此刻你的提交历史</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C7&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">中早已经包含了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C4&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的修改内容，于是合并操作会把</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C7&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C4’&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">合并为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C8</span><span style=\"color: rgb(64, 64, 64);\">（见图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-39</span><span style=\"color: rgb(64, 64, 64);\">）</span><span style=\"color: rgb(64, 64, 64);\">:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;3-39.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">你把相同的内容又合并了一遍，生成一个新的提交</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C8</span><span style=\"color: rgb(64, 64, 64);\">。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">C8&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">这一步的合并是迟早会发生的，因为只有这样你才能和其他协作者提交的内容保持同步。而在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C8&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">之后，你的提交历史里就会同时包含</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C4&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C4’</span><span style=\"color: rgb(64, 64, 64);\">，两者有着不同的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">校验值，如果用</span><span style=\"color: rgb(64, 64, 64);\">git log</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">查看历史，会看到两个提交拥有相同的作者日期与说明，令人费解。而更糟的是，当你把这样的历史推送到服务器后，会再次把这些衍合后的提交引入到中央服务</span><span style=\"color: rgb(64, 64, 64);\">器，进一步困扰其他人（译注：这个例子中，出问题的责任方是那个发布了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C6&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">后又用衍合发布</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;C4’&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的人，其他人会因此反馈双重历史到共享主干，从而混淆大家的视听。）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">如果把衍合当成一种在推送之前清理提交历史的手段，而且仅仅衍合那些尚未公开的提交对象，就没问题。如果衍合那些已经公开的提交对象，并且已经有人基于这些提交对象开展了后续开发工作的话，就会出现叫人沮丧的麻烦。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">3.7&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">小结</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">读到这里，你应该已经学会了如何创建分支并切换到新分支，在不同分支间转换，合并本地分支，把分支推送到共享服务器上，使用共享分支与他人协作，以及在分享之前进行衍合。</span></span></p><p><br/></p>','0','2016-11-20 10:03:44') [ RunTime:0.1362s ]

[ 2016-11-20T22:03:45+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000580s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001257s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0058s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0021s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0007s ]

[ 2016-11-20T22:04:00+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000432s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000818s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0035s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T22:04:14+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000387s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000769s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0049s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0050s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0045s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 51  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('Git详解之四 服务器上的Git','87','51','<p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">服务器上的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">到目前为止，你应该已经学会了使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">来完成日常工作。然而，如果想与他人合作，还需要一个远程的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库。尽管技术上可以从个人的仓库里推送和拉取修改内容，但我们不鼓励这样做，因为一不留心就很容易弄混其他人的进度。另外，你也一定希望合作者们即使在</span><span style=\"color: rgb(64, 64, 64);\">自己不开机的时候也能从仓库获取数据</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;—&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">拥有一个更稳定的公共仓库十分有用。因此，更好的合作方式是建立一个大家都可以访问的共享仓库，从那里推送和拉取数据。我们将把这个仓库称为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;“Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">服务器</span><span style=\"color: rgb(64, 64, 64);\">”</span><span style=\"color: rgb(64, 64, 64);\">；代理一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库只需要花费很少的资源，几乎从不需要整个服务器来支持它的运行。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">架设一台</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">服务器并不难。第一步是选择与服务器通讯的协议。本章第一节将介绍可用的协议以及各自优缺点。下面一节将介绍一些针对各个协议典型的设置以及如何在服务器</span><span style=\"color: rgb(64, 64, 64);\">上实施。最后，如果你不介意在他人服务器上保存你的代码，又想免去自己架设和维护服务器的麻烦，倒可以试试我们介绍的几个仓库托管服务。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">如果你对架设自己的服务器没兴趣，可以跳到本章最后一节去看看如何申请一个代码托管服务的账户然后继续下一章，我们会在那里讨论分布式源码控制环境的林林总总。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">远程仓库通常只是一个</span><span style=\"color: rgb(64, 64, 64);\">_</span><span style=\"color: rgb(64, 64, 64);\">裸仓库（</span><span style=\"color: rgb(64, 64, 64);\">bare repository</span><span style=\"color: rgb(64, 64, 64);\">）</span><span style=\"color: rgb(64, 64, 64);\">_ —&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">即一个没有当前工作目录的仓库。因为该仓库只是一个合作媒介，所以不需要从硬盘上取出最新版本的快照；仓库里存放的仅仅是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的数据。简单地说，裸仓库就是你工作目录中</span><span style=\"color: rgb(64, 64, 64);\">.git</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">子目录内的内容。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">4.1&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">协议</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">可以使用四种主要的协议来传输数据：本地传输，</span><span style=\"color: rgb(64, 64, 64);\">SSH&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">协议，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">协议和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;HTTP&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">协议。下面分别介绍一下哪些情形应该使用（或避免使用）这些协议。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">值得注意的是，除了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;HTTP&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">协议外，其他所有协议都要求在服务器端安装并运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git</span><span style=\"color: rgb(64, 64, 64);\">。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">本地协议</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">最基本的就是</span><span style=\"color: rgb(64, 64, 64);\">_</span><span style=\"color: rgb(64, 64, 64);\">本地协议（</span><span style=\"color: rgb(64, 64, 64);\">Local protocol</span><span style=\"color: rgb(64, 64, 64);\">）</span><span style=\"color: rgb(64, 64, 64);\">_</span><span style=\"color: rgb(64, 64, 64);\">，所谓的远程仓库在该协议中的表示，就是硬盘上的另一个目录。这常见于团队每一个成员都对一个共享的文件系统（例如</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;NFS</span><span style=\"color: rgb(64, 64, 64);\">）拥有访问权，或者比较少见的多人共用同一台电脑的情况。后面一种情况并不安全，因为所有代码仓库实例都储存在同一台电脑里，增加了灾难性数据损失</span><span style=\"color: rgb(64, 64, 64);\">的可能性。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果你使用一个共享的文件系统，就可以在一个本地文件系统中克隆仓库，推送和获取。克隆的时候只需要将远程仓库的路径作为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;URL&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">使用，比如下面这样：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git clone /opt/git/project.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">或者这样：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git clone file:///opt/git/project.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;URL&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">开头明确使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">file://</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">，那么</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会以一种略微不同的方式运行。如果你只给出路径，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会尝试使用硬链接或直接复制它所需要的文件。如果使用了</span><span style=\"color: rgb(64, 64, 64);\">file://</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会调用它平时通过网络来传输数据的工序，而这种方式的效率相对较低。使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">file://</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">前缀的主要原因是当你需要一个不包含无关引用或对象的干净仓库副本的时候</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;—&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">一般指从其他<a href=\"http://lib.csdn.net/base/git\" class=\"replace_word\" title=\"Git知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">版本控制</a>系统导入的，或类似情形（参见第</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;9&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">章的维护任务）。我们这里仅仅使用普通路径，这样更快。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">要添加一个本地仓库作为现有</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">项目的远程仓库，可以这样做：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git remote add local_proj /opt/git/project.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">然后就可以像在网络上一样向这个远程仓库推送和获取数据了。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">优点</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">基于文件仓库的优点在于它的简单，同时保留了现存文件的权限和网络访问权限。如果你的团队已经有一个全体共享的文件系统，建立仓库就十分容易了。你</span><span style=\"color: rgb(64, 64, 64);\">只需把一份裸仓库的副本放在大家都能访问的地方，然后像对其他共享目录一样设置读写权限就可以了。我们将在下一节</span><span style=\"color: rgb(64, 64, 64);\">“</span><span style=\"color: rgb(64, 64, 64);\">在服务器上部署</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git ”</span><span style=\"color: rgb(64, 64, 64);\">中讨论如何导出一个裸仓库的副本。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">这也是从别人工作目录中获取工作成果的快捷方法。假如你和你的同事在一个项目中合作，他们想让你检出一些东西的时候，运行类似</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git pull /home/john/project</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">通常会比他们推送到服务器，而你再从服务器获取简单得多。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">缺点</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">这种方法的缺点是，与基本的网络连接访问相比，难以控制从不同位置来的访问权限。如果你想从家里的笔记本电脑上推送，就要先挂载远程硬盘，这和基于网络连接的访问相比更加困难和缓慢。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">另一个很重要的问题是该方法不一定就是最快的，尤其是对于共享挂载的文件系统。本地仓库只有在你对数据访问速度快的时候才快。在同一个服务器上，如果二者同时允许</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">访问本地硬盘，通过</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;NFS&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">访问仓库通常会比</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SSH&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">慢。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">SSH&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">协议</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">使用的传输协议中最常见的可能就是</span><span style=\"color: rgb(64, 64, 64);\">SSH&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">了。这是因为大多数环境已经支持通过</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SSH&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对服务器的访问</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;—&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">即便还没有，架设起来也很容易。</span><span style=\"color: rgb(64, 64, 64);\">SSH&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">也是唯一一个同时支持读写操作的网络协议。另外两个网络协议（</span><span style=\"color: rgb(64, 64, 64);\">HTTP&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git</span><span style=\"color: rgb(64, 64, 64);\">）通常都是只读的，所以虽然二者对大多数人都可用，但执行写操作时还是需要</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SSH</span><span style=\"color: rgb(64, 64, 64);\">。</span><span style=\"color: rgb(64, 64, 64);\">SSH&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">同时也是一个验证授权的网络协议；而因为其普遍性，一般架设和使用都很容易。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">通过</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SSH&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">克隆一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库，你可以像下面这样给出</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;ssh://&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;URL</span><span style=\"color: rgb(64, 64, 64);\">：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git clone ssh://user@server:project.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">或者不指明某个协议</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;—&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">这时</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会默认使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SSH&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git clone user@server:project.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果不指明用户，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会默认使用当前登录的用户名连接服务器。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">优点</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SSH&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的好处有很多。首先，如果你想拥有对网络仓库的写权限，基本上不可能不使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SSH</span><span style=\"color: rgb(64, 64, 64);\">。其次，</span><span style=\"color: rgb(64, 64, 64);\">SSH&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">架设相对比较简单</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;— SSH&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">守护进程很常见，很多网络管理员都有一些使用经验，而且很多<a href=\"http://lib.csdn.net/base/operatingsystem\" class=\"replace_word\" title=\"操作系统知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">操作系统</a>都自带了它或者相关的管理工具。再次，通过</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SSH&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">进行访问是安全的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;—&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所有数据传输都是加密和授权的。最后，和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">及本地协议一样，</span><span style=\"color: rgb(64, 64, 64);\">SSH&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">也很高效，会在传输之前尽可能压缩数据。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">缺点</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">SSH&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的限制在于你不能通过它实现仓库的匿名访问。即使仅为读取数据，人们也必须在能通过</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SSH&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">访问主机的前提下才能访问仓库，这使得</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SSH&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">不利于开源的项目。如果你仅仅在公司网络里使用，</span><span style=\"color: rgb(64, 64, 64);\">SSH&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">可能是你唯一需要使用的协议。如果想允许对项目的匿名只读访问，那么除了为自己推送而架设</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SSH&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">协议之外，还需要支持其他协议以便他人访问读取。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">协议</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">接下来是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">协议。这是一个包含在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">软件包中的特殊守护进程；</span><span style=\"color: rgb(64, 64, 64);\">它会监听一个提供类似于</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SSH&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">服务的特定端口（</span><span style=\"color: rgb(64, 64, 64);\">9418</span><span style=\"color: rgb(64, 64, 64);\">），而无需任何授权。打算支持</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">协议的仓库，需要先创建</span><span style=\"color: rgb(64, 64, 64);\">git-export-daemon-ok</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;—&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">它是协议进程提供仓库服务的必要条件</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;—&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">但除此之外该服务没有什么安全措施。要么所有人都能克隆</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库，要么谁也不能。这也意味着该协议通常不能用来进行推送。你可以允许推送操作；然而由于没有授权机制，一旦允许该操作，网络上任何一个知道项目</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;URL&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的人将都有推送权限。不用说，这是十分罕见的情况。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">优点</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">协议是现存最快的传输协议。如果你在提供一个有很大访问量的公共项目，或者一个不需要对读操作进行授权的庞大项目，架设一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">守护进程来供应仓库是个不错的选择。它使用与</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SSH&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">协议相同的数据传输机制，但省去了加密和授权的开销。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">缺点</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">协议消极的一面是缺少授权机制。用</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">协议作为访问项目的唯一方法通常是不可取的。一般的做法是，同时提供</span><span style=\"color: rgb(64, 64, 64);\">SSH&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">接口，让几个开发者拥有推送（写）权限，其他人通过</span><span style=\"color: rgb(64, 64, 64);\">git://</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">拥有只读权限。</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">协议可能也是最难架设的协议。它要求有单独的守护进程，需要定制</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;—&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">我们将在本章的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;“Gitosis”&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">一节详细介绍它的架设</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;—&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">需要设定</span><span style=\"color: rgb(64, 64, 64);\">xinetd</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">或类似的程序，而这些工作就没那么轻松了。该协议还要求防火墙开放</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;9418&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">端口，而企业级防火墙一般不允许对这个非标准端口的访问。大型企业级防火墙通常会封锁这个少见的端口。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">HTTP/S&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">协议</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">最后还有</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;HTTP&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">协议。</span><span style=\"color: rgb(64, 64, 64);\">HTTP&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">或</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;HTTPS&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">协议的优美之处在于架设的简便性。基本上，只需要把</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的裸仓库文件放在</span><span style=\"color: rgb(64, 64, 64);\">HTTP&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的根目录下，配置一个特定的</span><span style=\"color: rgb(64, 64, 64);\">post-update</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">挂钩（</span><span style=\"color: rgb(64, 64, 64);\">hook</span><span style=\"color: rgb(64, 64, 64);\">）就可以搞定（</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">挂钩的细节见第</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;7&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">章）。此后，每个能访问</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库所在服务器上</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;web&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">服务的人都可以进行克隆操作。下面的操作可以允许通过</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;HTTP&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对仓库进行读取：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ cd /var/www/htdocs/</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git clone --bare /path/to/git_project gitproject.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ cd gitproject.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ mv hooks/post-update.sample hooks/post-update</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ chmod a+x hooks/post-update</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">这样就可以了。</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">附带的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">post-update</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">挂钩会默认运行合适的命令（</span><span style=\"color: rgb(64, 64, 64);\">git update-server-info</span><span style=\"color: rgb(64, 64, 64);\">）来确保通过</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;HTTP&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的获取和克隆正常工作。这条命令在你用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SSH&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">向仓库推送内容时运行；之后，其他人就可以用下面的命令来克隆仓库：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git clone http://example.com/gitproject.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">在本例中，我们使用了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Apache&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">设定中常用的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">/var/www/htdocs</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">路径，不过你可以使用任何静态</span><span style=\"color: rgb(64, 64, 64);\">web&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">服务</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;—&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">把裸仓库放在它的目录里就行。</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的数据是以最基本的静态文件的形式提供的（关于如何提供文件的详情见第</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;9&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">章）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">通过</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;HTTP&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">进行推送操作也是可能的，不过这种做法不太常见，并且牵扯到复杂的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;WebDAV&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">设定。由于很少用到，本书将略过对该内容的讨论。如果对</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;HTTP&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">推送协议感兴趣，不妨打开这个地址看一下操作方法：</span><span style=\"color: rgb(64, 64, 64);\">http://www.kernel.org/pub/software/scm/git/docs/howto/setup-git-server-over-http.txt</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">。通过</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;HTTP&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">推送的好处之一是你可以使用任何</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;WebDAV&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">服务器，不需要为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">设定特殊环境；所以如果主机提供商支持通过</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;WebDAV</span><span style=\"color: rgb(64, 64, 64);\">更新网站内容，你也可以使用这项功能。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">优点</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;HTTP&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">协议的好处是易于架设。几条必要的命令就可以让全世界读取到仓库的内容。花费不过几分钟。</span><span style=\"color: rgb(64, 64, 64);\">HTTP&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">协议不会占用过多服务器资源。因为它一般只用到静态的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;HTTP&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">服务提供所有数据，普通的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Apache&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">服务器平均每秒能支撑数千个文件的并发访问</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;—&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">哪怕让一个小型服务器超载都很难。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">你也可以通过</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;HTTPS&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">提供只读的仓库，这意味着你可以加密传输内容；你甚至可以要求客户端使用特定签名的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SSL&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">证书。一般情况下，如果到了这一步，使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SSH&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">公共密钥可能是更简单的方案；不过也存在一些特殊情况，这时通过</span><span style=\"color: rgb(64, 64, 64);\">HTTPS&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">使用带签名的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SSL&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">证书或者其他基于</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;HTTP&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的只读连接授权方式是更好的解决方案。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">HTTP&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">还有个额外的好处：</span><span style=\"color: rgb(64, 64, 64);\">HTTP</span><span style=\"color: rgb(64, 64, 64);\">是一个如此常见的协议，以至于企业级防火墙通常都允许其端口的通信。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">缺点</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">HTTP&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">协议的消极面在于，相对来说客户端效率更低。克隆或者下载仓库内容可能会花费更多时间，而且</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;HTTP&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">传输的体积和网络开销比其他任何一个协议都大。因为它没有按需供应的能力</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;—&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">传输过程中没有服务端的动态计算</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;—&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">因而</span><span style=\"color: rgb(64, 64, 64);\">HTTP&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">协议经常会被称为</span><span style=\"color: rgb(64, 64, 64);\">_</span><span style=\"color: rgb(64, 64, 64);\">傻瓜（</span><span style=\"color: rgb(64, 64, 64);\">dumb</span><span style=\"color: rgb(64, 64, 64);\">）</span><span style=\"color: rgb(64, 64, 64);\">_</span><span style=\"color: rgb(64, 64, 64);\">协议。更多</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;HTTP&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">协议和其他协议效率上的差异见第</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;9&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">。</span></span></p><p><br/></p>','0','2016-11-20 10:04:14') [ RunTime:0.1132s ]

[ 2016-11-20T22:04:15+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000628s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001132s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0085s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0016s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0005s ]

[ 2016-11-20T22:04:25+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000444s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000839s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0042s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T22:04:46+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000683s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002047s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0041s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0050s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0051s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 51  [ RunTime:0.0004s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('Git详解之五 分布式Git','87','51','<p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">分布式</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">为了便于项目中的所有开发者分享代码，我们准备好了一台服务器存放远程</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库。经过前面几章的学习，我们已经学会了一些基本的本地工作流程中所需用到的命令。接下来，我们要学习下如何利用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">来组织和完成分布式工作流程。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">特别是，当作为项目贡献者时，我们该怎么做才能方便维护者采纳更新；或者作为项目维护者时，又该怎样有效管理大量贡献者的提交。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">5.1&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分布式工作流程</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">同传统的集中式<a href=\"http://lib.csdn.net/base/git\" class=\"replace_word\" title=\"Git知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">版本控制</a>系统（</span><span style=\"color: rgb(64, 64, 64);\">CVCS</span><span style=\"color: rgb(64, 64, 64);\">）不同，开发者之间的协作方式因着</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的分布式特性而变得更为灵活多样。在集中式系统上，每个开发者就像是连接在集线器上的节点，彼此的工作方式大体相像。而在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">网络中，每个开发者同时扮演着节点和集线器的角色，这就是说，每一个开发者都可以将自己的代码贡献到另外一个开发者的仓库中，或者建立自己的公共仓库，让</span><span style=\"color: rgb(64, 64, 64);\">其他开发者基于自己的工作开始，为自己的仓库贡献代码。于是，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的分布式协作便可以衍生出种种不同的工作流程，我会在接下来的章节介绍几种常见的应用方式，并分别讨论各自的优缺点。你可以选择其中的一种，或者结合起</span><span style=\"color: rgb(64, 64, 64);\">来，应用到你自己的项目中。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">集中式工作流</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">通常，集中式工作流程使用的都是单点协作模型。一个存放代码仓库的中心服务器，可以接受所有开发者提交的代码。所有的开发者都是普通的节点，作为中心集线器的消费者，平时的工作就是和中心仓库同步数据（见图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;5-1</span><span style=\"color: rgb(64, 64, 64);\">）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;5-1.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">集中式工作流</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果两个开发者从中心仓库克隆代码下来，同时作了一些修订，那么只有第一个开发者可以顺利地把数据推送到共享服务器。第二个开发者在提交他的修订之</span><span style=\"color: rgb(64, 64, 64);\">前，必须先下载合并服务器上的数据，解决冲突之后才能推送数据到共享服务器上。在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">中这么用也决无问题，这就好比是在用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion</span><span style=\"color: rgb(64, 64, 64);\">（或其他</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;CVCS</span><span style=\"color: rgb(64, 64, 64);\">）一样，可以很好地工作。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果你的团队不是很大，或者大家都已经习惯了使用集中式工作流程，完全可以采用这种简单的模式。只需要配置好一台中心服务器，并给每个人推送数据的</span><span style=\"color: rgb(64, 64, 64);\">权限，就可以开展工作了。但如果提交代码时有冲突，</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">根本就不会让用户覆盖他人代码，它直接驳回第二个人的提交操作。这就等于告诉提交者，你所作的修订无法通过快近（</span><span style=\"color: rgb(64, 64, 64);\">fast-forward</span><span style=\"color: rgb(64, 64, 64);\">）来合并，你必</span><span style=\"color: rgb(64, 64, 64);\">须先拉取最新数据下来，手工解决冲突合并后，才能继续推送新的提交。绝大多数人都熟悉和了解这种模式的工作方式，所以使用也非常广泛。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">集成管理员工作流</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">由于</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">允许使用多个远程仓库，开发者便可以建立自己的公共仓库，往里面写数据并共享给他人，而同时又可以从别人的仓库中提取他们的更新过来。这种情形通常都会有</span><span style=\"color: rgb(64, 64, 64);\">个代表着官方发布的项目仓库（</span><span style=\"color: rgb(64, 64, 64);\">blessed repository</span><span style=\"color: rgb(64, 64, 64);\">），开发者们由此仓库克隆出一个自己的公共仓库（</span><span style=\"color: rgb(64, 64, 64);\">developer public</span><span style=\"color: rgb(64, 64, 64);\">），然后将自己的提交推送上去，请求官方仓库的维护者拉取更新合并到主项目。维护者在自己的本地也有个克隆仓库（</span><span style=\"color: rgb(64, 64, 64);\">integration manager</span><span style=\"color: rgb(64, 64, 64);\">），他可以将你的公共仓库作为远程仓库添加进来，经过<a href=\"http://lib.csdn.net/base/softwaretest\" class=\"replace_word\" title=\"软件测试知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">测试</a>无误后合并到主干分支，然后再推送到官方仓库。工作流程看起来就像图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;5-2&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所示：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">1.</span><span style=\"color: rgb(64, 64, 64);\">项目维护者可以推送数据到公共仓库</span><span style=\"color: rgb(64, 64, 64);\">blessed repository</span><span style=\"color: rgb(64, 64, 64);\">。</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;2.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">贡献者克隆此仓库，修订或编写新代码。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">2.</span><span style=\"color: rgb(64, 64, 64);\">贡献者推送数据到自己的公共仓库</span><span style=\"color: rgb(64, 64, 64);\">developer public</span><span style=\"color: rgb(64, 64, 64);\">。</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;4.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">贡献者给维护者发送邮件，请求拉取自己的最新修订。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">3.</span><span style=\"color: rgb(64, 64, 64);\">维护者在自己本地的</span><span style=\"color: rgb(64, 64, 64);\">integration manger&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库中，将贡献者的仓库加为远程仓库，合并更新并做测试。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">4.</span><span style=\"color: rgb(64, 64, 64);\">维护者将合并后的更新推送到主仓库</span><span style=\"color: rgb(64, 64, 64);\">blessed repository</span><span style=\"color: rgb(64, 64, 64);\">。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;5-2.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">集成管理员工作流</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;GitHub&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">网站上使用得最多的就是这种工作流。人们可以复制（</span><span style=\"color: rgb(64, 64, 64);\">fork&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">亦即克隆）某个项目到自己的列表中，成为自己的公共仓库。随后将自己的更新提交到这个仓库，所有人都可以看到你的每次更新。这么做最主要的优点在于，你可</span><span style=\"color: rgb(64, 64, 64);\">以按照自己的节奏继续工作，而不必等待维护者处理你提交的更新；而维护者也可以按照自己的节奏，任何时候都可以过来处理接纳你的贡献。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">司令官与副官工作流</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">这其实是上一种工作流的变体。一般超大型的项目才会用到这样的工作方式，像是拥有数百协作开发者的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;<a href=\"http://lib.csdn.net/base/linux\" class=\"replace_word\" title=\"Linux知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">Linux</a>&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">内核项目就是如此。各个集成管理员分别负责集成项目中的特定部分，所以称为副官（</span><span style=\"color: rgb(64, 64, 64);\">lieutenant</span><span style=\"color: rgb(64, 64, 64);\">）。而所有这些集成管理员头上还有一位负责统筹的总</span><span style=\"color: rgb(64, 64, 64);\">集成管理员，称为司令官（</span><span style=\"color: rgb(64, 64, 64);\">dictator</span><span style=\"color: rgb(64, 64, 64);\">）。司令官维护的仓库用于提供所有协作者拉取最新集成的项目代码。整个流程看起来如图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;5-3&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所示：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">1.</span><span style=\"color: rgb(64, 64, 64);\">一般的开发者在自己的特性分支上工作，并不定期地根据主干分支（</span><span style=\"color: rgb(64, 64, 64);\">dictator&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">上的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;master</span><span style=\"color: rgb(64, 64, 64);\">）衍合。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">2.</span><span style=\"color: rgb(64, 64, 64);\">副官（</span><span style=\"color: rgb(64, 64, 64);\">lieutenant</span><span style=\"color: rgb(64, 64, 64);\">）将普通开发者的特性分支合并到自己的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;master&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支中。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">3.</span><span style=\"color: rgb(64, 64, 64);\">司令官（</span><span style=\"color: rgb(64, 64, 64);\">dictator</span><span style=\"color: rgb(64, 64, 64);\">）将所有副官的</span><span style=\"color: rgb(64, 64, 64);\">master&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支并入自己的</span><span style=\"color: rgb(64, 64, 64);\">master&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">4.</span><span style=\"color: rgb(64, 64, 64);\">司令官（</span><span style=\"color: rgb(64, 64, 64);\">dictator</span><span style=\"color: rgb(64, 64, 64);\">）将集成后的</span><span style=\"color: rgb(64, 64, 64);\">master&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支推送到共享仓库</span><span style=\"color: rgb(64, 64, 64);\">blessed repository&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">中，以便所有其他开发者以此为基础进行衍合。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;5-3.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">司令官与副官工作流</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">这种工作流程并不常用，只有当项目极为庞杂，或者需要多级别管理时，才会体现出优势。利用这种方式，项目总负责人（即司令官）可以把大量分散的集成工作委托给不同的小组负责人分别处理，最后再统筹起来，如此各人的职责清晰明确，也不易出错（译注：此乃分而治之）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">以上介绍的是常见的分布式系统可以应用的工作流程，当然不止于</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git</span><span style=\"color: rgb(64, 64, 64);\">。在实际的开发工作中，你可能会遇到各种为了满足特定需求而有所变化的工作方式。我想现在你应该已经清楚，接下来自己需要用哪种方式开展工作了。下</span><span style=\"color: rgb(64, 64, 64);\">节我还会再举些例子，看看各式工作流中的每个角色具体应该如何操作。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">5.2&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">为项目作贡献</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">接下来，我们来学习一下作为项目贡献者，会有哪些常见的工作模式。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">不过要说清楚整个协作过程真的很难，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">如此灵活，人们的协作方式便可以各式各样，没有固定不变的范式可循，而每个项目的具体情况又多少会有些不同，比如说参与者的规模，所选择的工作流程，每个人的提交权限，以及</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">以外贡献等等，都会影响到具体操作的细节。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">首当其冲的是参与者规模。项目中有多少开发者是经常提交代码的？经常又是多久呢？大多数两至三人的小团队，一天大约只有几次提交，如果不是什么热门</span><span style=\"color: rgb(64, 64, 64);\">项目的话就更少了。可要是在大公司里，或者大项目中，参与者可以多到上千，每天都会有十几个上百个补丁提交上来。这种差异带来的影响是显著的，越是多的人</span><span style=\"color: rgb(64, 64, 64);\">参与进来，就越难保证每次合并正确无误。你正在工作的代码，可能会因为合并进来其他人的更新而变得过时，甚至受创无法运行。而已经提交上去的更新，也可能</span><span style=\"color: rgb(64, 64, 64);\">在等着审核合并的过程中变得过时。那么，我们该怎样做才能确保代码是最新的，提交的补丁也是可用的呢？</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">接下来便是项目所采用的工作流。是集中式的，每个开发者都具有等同的写权限？项目是否有专人负责检查所有补丁？是不是所有补丁都做过同行复阅（</span><span style=\"color: rgb(64, 64, 64);\">peer-review</span><span style=\"color: rgb(64, 64, 64);\">）再通过审核的？你是否参与审核过程？如果使用副官系统，那你是不是限定于只能向此副官提交？</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">还有你的提交权限。有或没有向主项目提交更新的权限，结果完全不同，直接决定最终采用怎样的工作流。如果不能直接提交更新，那该如何贡献自己的代码呢？是不是该有个什么策略？你每次贡献代码会有多少量？提交频率呢？</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">所有以上这些问题都会或多或少影响到最终采用的工作流。接下来，我会在一系列由简入繁的具体用例中，逐一阐述。此后在实践时，应该可以借鉴这里的例子，略作调整，以满足实际需要构建自己的工作流。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">提交指南</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">开始分析特定用例之前，先来了解下如何撰写提交说明。一份好的提交指南可以帮助协作者更轻松更有效地配合。</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">项目本身就提供了一份文档（</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">项目源代码目录中</span><span style=\"color: rgb(64, 64, 64);\">Documentation/SubmittingPatches</span><span style=\"color: rgb(64, 64, 64);\">），列数了大量提示，从如何编撰提交说明到提交补丁，不一而足。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">首先，请不要在更新中提交多余的白字符（</span><span style=\"color: rgb(64, 64, 64);\">whitespace</span><span style=\"color: rgb(64, 64, 64);\">）。</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">有种检查此类问题的方法，在提交之前，先运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git diff --check</span><span style=\"color: rgb(64, 64, 64);\">，会把可能的多余白字符修正列出来。下面的示例，我已经把终端中显示为红色的白字符用</span><span style=\"color: rgb(64, 64, 64);\">X</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">替换掉：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git diff --check</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">lib/simplegit.rb:5: trailing whitespace.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">+&nbsp;&nbsp;&nbsp; @git_dir =File.expand_path(git_dir)XX</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">lib/simplegit.rb:7: trailing whitespace.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">+ XXXXXXXXXXX</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">lib/simplegit.rb:26: trailing whitespace.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">+&nbsp;&nbsp;&nbsp; defcommand(git_cmd)XXXX</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">这样在提交之前你就可以看到这类问题，及时解决以免困扰其他开发者。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">接下来，请将每次提交限定于完成一次逻辑功能。并且可能的话，适当地分解为多次小更新，以便每次小型提交都更易于理解。请不要在周末穷追猛打一次性</span><span style=\"color: rgb(64, 64, 64);\">解决五个问题，而最后拖到周一再提交。就算是这样也请尽可能利用暂存区域，将之前的改动分解为每次修复一个问题，再分别提交和加注说明。如果针对两个问题</span><span style=\"color: rgb(64, 64, 64);\">改动的是同一个文件，可以试试看</span><span style=\"color: rgb(64, 64, 64);\">git add --patch</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的方式将部分内容置入暂存区域（我们会在第六章再详细介绍）。无论是五次小提交还是混杂在一起的大提交，最终分支末端的项目快照应该还是一样的，但分解开</span><span style=\"color: rgb(64, 64, 64);\">来之后，更便于其他开发者复阅。这么做也方便自己将来取消某个特定问题的修复。我们将在第六章介绍一些重写提交历史，同暂存区域交互的技巧和工具，以便最</span><span style=\"color: rgb(64, 64, 64);\">终得到一个干净有意义，且易于理解的提交历史。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">最后需要谨记的是提交说明的撰写。写得好可以让大家协作起来更轻松。一般来说，提交说明最好限制在一行以内，</span><span style=\"color: rgb(64, 64, 64);\">50</span><span style=\"color: rgb(64, 64, 64);\">个字符以下，简明扼要地描述更新内容，空开一行后，再展开详细注解。</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">项目本身需要开发者撰写详尽注解，包括本次修订的因由，以及前后不同实现之间的比较，我们也该借鉴这种做法。另外，提交说明应该用祈使现在式语态，比如，</span><span style=\"color: rgb(64, 64, 64);\">不要说成</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;“I added tests for”&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">或</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;“Addingtests for”&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">而应该用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;“Add tests for”</span><span style=\"color: rgb(64, 64, 64);\">。下面是来自</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tpope<a href=\"http://lib.csdn.net/base/dotnet\" class=\"replace_word\" title=\".NET知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">.NET</a>&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的</span><span style=\"color: rgb(64, 64, 64);\">Tim Pope&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">原创的提交说明格式模版，供参考：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">本次更新的简要描述（50&nbsp;</span>个字符以内）</span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果必要，此处展开详尽阐述。段落宽度限定在 72&nbsp;</span>个字符以内。</span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">某些情况下，第一行的简要描述将用作邮件标题，其余部分作为邮件正文。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">其间的空行是必要的，以区分两者（当然没有正文另当别论）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果并在一起，rebase&nbsp;</span>这样的工具就可能会迷惑。</span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">另起空行后，再进一步补充其他说明。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">&nbsp;-&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">可以使用这样的条目列举式。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">&nbsp;-&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">一般以单个空格紧跟短划线或者星号作为每项条目的起始符。每个条目间用一空行隔开。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">不过这里按自己项目的约定，可以略作变化。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果你的提交说明都用这样的格式来书写，好多事情就可以变得十分简单。</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">项目本身就是这样要求的，我强烈建议你到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">项目仓库下运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git log --no-merges</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">看看，所有提交历史的说明是怎样撰写的。（译注：如果现在还没有克隆</span><span style=\"color: rgb(64, 64, 64);\">git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">项目源代码，是时候</span><span style=\"color: rgb(64, 64, 64);\">git clonegit://git.kernel.org/pub/scm/git/git.git</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">了。）</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">为简单起见，在接下来的例子（及本书随后的所有演示）中，我都不会用这种格式，而使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">-m</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">选项提交</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git commit</span><span style=\"color: rgb(64, 64, 64);\">。不过请还是按照我之前讲的做，别学我这里偷懒的方式。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">私有的小型团队</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">我们从最简单的情况开始，一个私有项目，与你一起协作的还有另外一到两位开发者。这里说私有，是指源代码不公开，其他人无法访问项目仓库。而你和其他开发者则都具有推送数据到仓库的权限。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">这种情况下，你们可以用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">或其他集中式版本控制系统类似的工作流来协作。你仍然可以得到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">带来的其他好处：离线提交，快速分支与合并等等，但工作流程还是差不多的。主要区别在于，合并操作发生在客户端而非服务器上。让我们来看看，两个开发者一</span><span style=\"color: rgb(64, 64, 64);\">起使用同一个共享仓库，会发生些什么。第一个人，</span><span style=\"color: rgb(64, 64, 64);\">John</span><span style=\"color: rgb(64, 64, 64);\">，克隆了仓库，作了些更新，在本地提交。（下面的例子中省略了常规提示，用</span><span style=\"color: rgb(64, 64, 64);\">...</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">代替以节约版面。）</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># John&#39;s Machine</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git clone john@githost:simplegit.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Initialized empty Git repository in/home/john/simplegit/.git/</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">...</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ cd simplegit/</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ vim lib/simplegit.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git commit -am &#39;removed invalid default value&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">[master 738ee87] removed invalid default value</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;1 files changed, 1insertions(+), 1 deletions(-)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">第二个开发者，</span><span style=\"color: rgb(64, 64, 64);\">Jessica</span><span style=\"color: rgb(64, 64, 64);\">，一样这么做：克隆仓库，提交更新：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Jessica&#39;s Machine</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git clone jessica@githost:simplegit.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Initialized empty Git repository in /home/jessica/simplegit/.git/</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">...</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ cd simplegit/</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ vim TODO</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git commit -am &#39;add reset task&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">[master fbff5bc] add reset task</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;1 files changed, 1insertions(+), 0 deletions(-)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在，</span><span style=\"color: rgb(64, 64, 64);\">Jessica&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">将她的工作推送到服务器上：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Jessica&#39;s Machine</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git push origin master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">...</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">To jessica@githost:simplegit.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;1edee6b..fbff5bc&nbsp; master -&gt;master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">John&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">也尝试推送自己的工作上去：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># John&#39;s Machine</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git push origin master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">To john@githost:simplegit.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;! [rejected]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; master -&gt; master (non-fast forward)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">error: failed to push some refs to &#39;john@githost:simplegit.git&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">John&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的推送操作被驳回，因为</span><span style=\"color: rgb(64, 64, 64);\">Jessica&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">已经推送了新的数据上去。请注意，特别是你用惯了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的话，这里其实修改的是两个文件，而不是同一个文件的同一个地方。</span><span style=\"color: rgb(64, 64, 64);\">Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会在服务器端自动合并提交上来的更新，而</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">则必须先在本地合并后才能推送。于是，</span><span style=\"color: rgb(64, 64, 64);\">John&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">不得不先把</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Jessica&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的更新拉下来：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git fetch origin</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">...</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">From john@githost:simplegit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;+049d078...fbff5bc master&nbsp;&nbsp;&nbsp;&nbsp; -&gt;origin/master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">此刻，</span><span style=\"color: rgb(64, 64, 64);\">John&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的本地仓库如图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;5-4&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所示：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;5-4. John</span><span style=\"color: rgb(64, 64, 64);\">的仓库历史</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">虽然</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;John&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">下载了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Jessica&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">推送到服务器的最近更新（</span><span style=\"color: rgb(64, 64, 64);\">fbff5</span><span style=\"color: rgb(64, 64, 64);\">），但目前只是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">origin/master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">指针指向它，而当前的本地分支</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仍然指向自己的更新（</span><span style=\"color: rgb(64, 64, 64);\">738ee</span><span style=\"color: rgb(64, 64, 64);\">），所以需要先把她的提交合并过来，才能继续推送数据：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git merge origin/master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Merge made by recursive.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;TODO |&nbsp;&nbsp;&nbsp; 1 +</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;1 files changed, 1insertions(+), 0 deletions(-)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">还好，合并过程非常顺利，没有冲突，现在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;John&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的提交历史如图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;5-5&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所示：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;5-5.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">合并</span><span style=\"color: rgb(64, 64, 64);\">origin/master&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">后</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;John&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的仓库历史</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在，</span><span style=\"color: rgb(64, 64, 64);\">John&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">应该再测试一下代码是否仍然正常工作，然后将合并结果（</span><span style=\"color: rgb(64, 64, 64);\">72bbc</span><span style=\"color: rgb(64, 64, 64);\">）推送到服务器上：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git push origin master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">...</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">To john@githost:simplegit.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp; fbff5bc..72bbc59&nbsp; master -&gt; master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">最终，</span><span style=\"color: rgb(64, 64, 64);\">John&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的提交历史变为图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;5-6&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所示：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;5-6.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">推送后</span><span style=\"color: rgb(64, 64, 64);\">John&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的仓库历史</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">而在这段时间，</span><span style=\"color: rgb(64, 64, 64);\">Jessica&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">已经开始在另一个特性分支工作了。她创建了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">issue54</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">并提交了三次更新。她还没有下载</span><span style=\"color: rgb(64, 64, 64);\">John</span><span style=\"color: rgb(64, 64, 64);\">提交的合并结果，所以提交历史如图</span><span style=\"color: rgb(64, 64, 64);\">5-7&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所示：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;5-7.Jessica&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的提交历史</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Jessica&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">想要先和服务器上的数据同步，所以先下载数据：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Jessica&#39;s Machine</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git fetch origin</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">...</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">From jessica@githost:simplegit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;fbff5bc..72bbc59&nbsp; master&nbsp;&nbsp;&nbsp;&nbsp; -&gt; origin/master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">于是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Jessica&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的本地仓库历史多出了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;John&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的两次提交（</span><span style=\"color: rgb(64, 64, 64);\">738ee&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;72bbc</span><span style=\"color: rgb(64, 64, 64);\">），如图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;5-8&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所示：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;5-8.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">获取</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;John&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的更新之后</span><span style=\"color: rgb(64, 64, 64);\">Jessica&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的提交历史</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">此时，</span><span style=\"color: rgb(64, 64, 64);\">Jessica&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">在特性分支上的工作已经完成，但她想在推送数据之前，先确认下要并进来的数据究竟是什么，于是运行</span><span style=\"color: rgb(64, 64, 64);\">git log</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">查看：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git log --no-merges origin/master ^issue54</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit 738ee872852dfaa9d6634e0dea7a324040193016</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: John Smith</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Fri May 2916:01:27 2009 -0700</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; removed invaliddefault value</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在，</span><span style=\"color: rgb(64, 64, 64);\">Jessica&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">可以将特性分支上的工作并到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支，然后再并入</span><span style=\"color: rgb(64, 64, 64);\">John&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的工作（</span><span style=\"color: rgb(64, 64, 64);\">origin/master</span><span style=\"color: rgb(64, 64, 64);\">）到自己的</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支，最后再推送回服务器。当然，得先切回主分支才能集成所有数据：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git checkout master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Switched to branch &quot;master&quot;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Your branch is behind &#39;origin/master&#39; by 2 commits, andcan be fast-forwarded.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">要合并</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">origin/master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">或</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">issue54</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支，谁先谁后都没有关系，因为它们都在上游（</span><span style=\"color: rgb(64, 64, 64);\">upstream</span><span style=\"color: rgb(64, 64, 64);\">）（译注：想像分叉的更新像是汇流成河的源头，所以上游</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;upstream&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">是指最新的提交），所以无所谓先后顺序，最终合并后的内容快照都是一样的，而仅是提交历史看起来会有些先后差别。</span><span style=\"color: rgb(64, 64, 64);\">Jessica&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">选择先合并</span><span style=\"color: rgb(64, 64, 64);\">issue54</span><span style=\"color: rgb(64, 64, 64);\">：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git merge issue54</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Updating fbff5bc..4af4298</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Fast forward</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;README&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;1 +</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;lib/simplegit.rb |&nbsp;&nbsp;&nbsp;6 +++++-</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;2 files changed, 6insertions(+), 1 deletions(-)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">正如所见，没有冲突发生，仅是一次简单快进。现在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Jessica&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">开始合并</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;John&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的工作（</span><span style=\"color: rgb(64, 64, 64);\">origin/master</span><span style=\"color: rgb(64, 64, 64);\">）：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git merge origin/master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Auto-merging lib/simplegit.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Merge made by recursive.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;lib/simplegit.rb|&nbsp;&nbsp;&nbsp; 2 +-</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;1 files changed, 1insertions(+), 1 deletions(-)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">所有的合并都非常干净。现在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Jessica&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的提交历史如图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;5-9&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所示：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;5-9.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">合并</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;John&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的更新后</span><span style=\"color: rgb(64, 64, 64);\">Jessica&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的提交历史</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Jessica&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">已经可以在自己的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支中访问</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">origin/master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的最新改动了，所以她应该可以成功推送最后的合并结果到服务器上（假设</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;John&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">此时没再推送新数据上来）：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git push origin master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">...</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">To jessica@githost:simplegit.git</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;72bbc59..8059c15&nbsp; master -&gt;master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">至此，每个开发者都提交了若干次，且成功合并了对方的工作成果，最新的提交历史如图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;5-10&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所示：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;5-10.Jessica&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">推送数据后的提交历史</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">以上就是最简单的协作方式之一：先在自己的特性分支中工作一段时间，完成后合并到自己的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支；然后下载合并</span><span style=\"color: rgb(64, 64, 64);\">origin/master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">上的更新（如果有的话），再推回远程服务器。一般的协作流程如图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;5-11&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所示：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;5-11.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">多用户共享仓库协作方式的一般工作流程时序</span></span></p><p><br/></p>','0','2016-11-20 10:04:46') [ RunTime:0.1096s ]

[ 2016-11-20T22:04:46+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000748s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001559s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0050s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0028s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0006s ]

[ 2016-11-20T22:04:56+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000436s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000833s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0045s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%git%' AND a.member_id = '87' LIMIT 0,10   [ RunTime:0.0022s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE at.article_type_name LIKE '%%git%%' AND a.member_id = '87'  [ RunTime:0.0004s ]

[ 2016-11-20T22:05:08+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000453s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000907s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0046s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T22:05:25+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000355s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000686s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0039s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0050s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0034s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 51  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('Git详解之六 Git工具','87','51','<p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">工具</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在，你已经学习了管理或者维护</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库，实现代码控制所需的大多数日常命令和工作流程。你已经完成了跟踪和提交文件的基本任务，并且发挥了暂存区和轻量级的特性分支及合并的威力。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">接下来你将领略到一些</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">可以实现的非常强大的功能，这些功能你可能并不会在日常操作中使用，但在某些时候你也许会需要。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">6.1&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">修订版本（</span><span style=\"color: rgb(64, 64, 64);\">Revision</span><span style=\"color: rgb(64, 64, 64);\">）选择</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">允许你通过几种方法来指明特定的或者一定范围内的提交。了解它们并不是必需的，但是了解一下总没坏处。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">单个修订版本</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">显然你可以使用给出的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">值来指明一次提交，不过也有更加人性化的方法来做同样的事。本节概述了指明单个提交的诸多方法。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">简短的</span><span style=\"color: rgb(64, 64, 64);\">SHA</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">很聪明，它能够通过你提供的前几个字符来识别你想要的那次提交，只要你提供的那部分</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">不短于四个字符，并且没有歧义</span><span style=\"color: rgb(64, 64, 64);\">——</span><span style=\"color: rgb(64, 64, 64);\">也就是说，当前仓库中只有一个对象以这段</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">开头。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">例如，想要查看一次指定的提交，假设你运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git log</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令并找到你增加了功能的那次提交：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git log</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit 734713bc047d87bf7eac9674765ae793478c50d3</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: Scott Chacon &lt;schacon@gmail.com&gt;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Fri Jan 218:32:33 2009 -0800</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; fixed refshandling, added gc auto, updated tests</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit d921970aadf03b3cf0e71becdaab3147ba71cdef</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Merge: 1c002dd... 35cfb2b...</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: Scott Chacon &lt;schacon@gmail.com&gt;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Thu Dec 1115:08:43 2008 -0800</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; Merge commit&#39;phedders/rdocs&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit 1c002dd4b536e7479fe34593e72e6c6c1819e53b</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: Scott Chacon &lt;schacon@gmail.com&gt;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Thu Dec 1114:58:32 2008 -0800</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; added someblame and merge stuff</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">假设是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">1c002dd....</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">。如果你想</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git show</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">这次提交，下面的命令是等价的（假设简短的版本没有歧义）：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git show 1c002dd4b536e7479fe34593e72e6c6c1819e53b</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git show 1c002dd4b536e7479f</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git show 1c002d</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">可以为你的</span><span style=\"color: rgb(64, 64, 64);\">SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">值生成出简短且唯一的缩写。如果你传递</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">--abbrev-commit</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">给</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git log</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令，输出结果里就会使用简短且唯一的值；它默认使用七个字符来表示，不过必要时为了避免</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的歧义，会增加字符数：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git log --abbrev-commit --pretty=oneline</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">ca82a6d changed the version number</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">085bb3b removed unnecessary test code</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">a11bef0 first commit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">通常在一个项目中，使用八到十个字符来避免</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">歧义已经足够了。最大的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">项目之一，</span><span style=\"color: rgb(64, 64, 64);\"><a href=\"http://lib.csdn.net/base/linux\" class=\"replace_word\" title=\"Linux知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">Linux</a>&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">内核，目前也只需要最长</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;40&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">个字符中的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;12&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">个字符来保持唯一性。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">关于</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的简短说明</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">许多人可能会担心一个问题：在随机的偶然情况下，在他们的仓库里会出现两个具有相同</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">值的对象。那会怎么样呢？</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果你真的向仓库里提交了一个跟之前的某个对象具有相同</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">值的对象，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">将会发现之前的那个对象已经存在在</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\"><a href=\"http://lib.csdn.net/base/mysql\" class=\"replace_word\" title=\"MySQL知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">数据库</a>中，并认为它已经被写入了。如果什么时候你想再次检出那个对象时，你会总是得到先前的那个对象的数据。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">不过，你应该了解到，这种情况发生的概率是多么微小。</span><span style=\"color: rgb(64, 64, 64);\">SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">摘要长度是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;20&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">字节，也就是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;160&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">位。为了保证有</span><span style=\"color: rgb(64, 64, 64);\">50%&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的概率出现一次冲突，需要</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;2^80&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">个随机哈希的对象（计算冲突机率的公式是</span><span style=\"color: rgb(64, 64, 64);\">p = (n(n-1)/2) * (1/2^160))</span><span style=\"color: rgb(64, 64, 64);\">。</span><span style=\"color: rgb(64, 64, 64);\">2^80</span><span style=\"color: rgb(64, 64, 64);\">是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;1.2 x10^24</span><span style=\"color: rgb(64, 64, 64);\">，也就是一亿亿亿，那是地球上沙粒总数的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;1200&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">倍。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在举例说一下怎样才能产生一次</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">冲突。如果地球上</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;65&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">亿的人类都在编程，每人每秒都在产生等价于整个</span><span style=\"color: rgb(64, 64, 64);\">Linux&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">内核历史（一百万个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象）的代码，并将之提交到一个巨大的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库里面，那将花费</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;5&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">年的时间才会产生足够的对象，使其拥有</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;50%&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的概率产生一次</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象冲突。这要比你编程团队的成员同一个晚上在互不相干的意外中被狼袭击并杀死的机率还要小。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">分支引用</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">指明一次提交的最直接的方法要求有一个指向它的分支引用。这样，你就可以在任何需要一个提交对象或者</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">值的</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令中使用该分支名称了。如果你想要显示一个分支的最后一次提交的对象，例如假设</span><span style=\"color: rgb(64, 64, 64);\">topic1</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支指向</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">ca82a6d</span><span style=\"color: rgb(64, 64, 64);\">，那么下面的命令是等价的：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git show ca82a6dff817ec66f44342007202690a93763949</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git show topic1</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果你想知道某个分支指向哪个特定的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA</span><span style=\"color: rgb(64, 64, 64);\">，或者想看任何一个例子中被简写的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1</span><span style=\"color: rgb(64, 64, 64);\">，你可以使用一个叫做</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">rev-parse</span><span style=\"color: rgb(64, 64, 64);\">的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">探测工具。在第</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;9&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">章你可以看到关于探测工具的更多信息；简单来说，</span><span style=\"color: rgb(64, 64, 64);\">rev-parse</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">是为了底层操作而不是日常操作设计的。不过，有时你想看</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">现在到底处于什么状态时，它可能会很有用。这里你可以对你的分支运执行</span><span style=\"color: rgb(64, 64, 64);\">rev-parse</span><span style=\"color: rgb(64, 64, 64);\">。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git rev-parse topic1</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">ca82a6dff817ec66f44342007202690a93763949</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">引用日志里的简称</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">在你工作的同时，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">在后台的工作之一就是保存一份引用日志</span><span style=\"color: rgb(64, 64, 64);\">——</span><span style=\"color: rgb(64, 64, 64);\">一份记录最近几个月你的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;HEAD&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和分支引用的日志。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">你可以使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitreflog</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">来查看引用日志：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git reflog</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">734713b... HEAD@{0}: commit: fixed refs handling, addedgc auto, updated</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">d921970... HEAD@{1}: merge phedders/rdocs: Merge made byrecursive.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">1c002dd... HEAD@{2}: commit: added some blame and mergestuff</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">1c36188... HEAD@{3}: rebase -i (squash): updating HEAD</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">95df984... HEAD@{4}: commit: # This is a combination oftwo commits.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">1c36188... HEAD@{5}: rebase -i (squash): updating HEAD</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">7e05da5... HEAD@{6}: rebase -i (pick): updating HEAD</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">每次你的分支顶端因为某些原因被修改时，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">就会为你将信息保存在这个临时历史记录里面。你也可以使用这份数据来指明更早的分支。如果你想查看仓库中</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;HEAD&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">在五次前的值，你可以使用引用日志的输出中的</span><span style=\"color: rgb(64, 64, 64);\">@{n}</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">引用：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git show HEAD@{5}</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">你也可以使用这个语法来查看一定时间前分支指向哪里。例如，想看你的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支昨天在哪，你可以输入</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git show master@{yesterday}</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">它就会显示昨天分支的顶端在哪。这项技术只对还在你引用日志里的数据有用，所以不能用来查看比几个月前还早的提交。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">想要看类似于</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitlog</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">输出格式的引用日志信息，你可以运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git log -g</span><span style=\"color: rgb(64, 64, 64);\">：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git log -g master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit 734713bc047d87bf7eac9674765ae793478c50d3</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Reflog: master@{0} (Scott Chacon&lt;schacon@gmail.com&gt;)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Reflog message: commit: fixed refs handling, added gcauto, updated</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: Scott Chacon &lt;schacon@gmail.com&gt;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Fri Jan 218:32:33 2009 -0800</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; fixed refshandling, added gc auto, updated tests</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit d921970aadf03b3cf0e71becdaab3147ba71cdef</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Reflog: master@{1} (Scott Chacon&lt;schacon@gmail.com&gt;)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Reflog message: merge phedders/rdocs: Merge made byrecursive.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: Scott Chacon &lt;schacon@gmail.com&gt;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Thu Dec 1115:08:43 2008 -0800</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; Merge commit&#39;phedders/rdocs&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">需要注意的是，日志引用信息只存在于本地</span><span style=\"color: rgb(64, 64, 64);\">——</span><span style=\"color: rgb(64, 64, 64);\">这是一个你在仓库里做过什么的日志。其他人的仓库拷贝里的引用和你的相同；而你新克隆一个仓库的时候，引用日志是空的，因为你在仓库里还没有操作。只有你克隆了一个项目至少两个月，</span><span style=\"color: rgb(64, 64, 64);\">git show HEAD@{2.months.ago}</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">才会有用</span><span style=\"color: rgb(64, 64, 64);\">——</span><span style=\"color: rgb(64, 64, 64);\">如果你是五分钟前克隆的仓库，将不会有结果返回。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">祖先引用</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">另一种指明某次提交的常用方法是通过它的祖先。如果你在引用最后加上一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">^</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">将其理解为此次提交的父提交。</span><span style=\"color: rgb(64, 64, 64);\">假设你的工程历史是这样的：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git log --pretty=format:&#39;%h %s&#39; --graph</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">* 734713b fixed refs handling, added gc auto, updatedtests</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">*&nbsp;&nbsp; d921970 Mergecommit &#39;phedders/rdocs&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">|\\&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">| * 35cfb2b Some rdoc changes</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">* | 1c002dd added some blame and merge stuff</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">|/&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">* 1c36188 ignore *.gem</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">* 9b29157 add open3_detach to gemspec file list</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">那么，想看上一次提交，你可以使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">HEAD^</span><span style=\"color: rgb(64, 64, 64);\">，意思是</span><span style=\"color: rgb(64, 64, 64);\">“HEAD&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的父提交</span><span style=\"color: rgb(64, 64, 64);\">”</span><span style=\"color: rgb(64, 64, 64);\">：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git show HEAD^</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit d921970aadf03b3cf0e71becdaab3147ba71cdef</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Merge: 1c002dd... 35cfb2b...</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: Scott Chacon &lt;schacon@gmail.com&gt;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Thu Dec 1115:08:43 2008 -0800</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; Merge commit&#39;phedders/rdocs&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">你也可以在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">^</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">后添加一个数字</span><span style=\"color: rgb(64, 64, 64);\">——</span><span style=\"color: rgb(64, 64, 64);\">例如，</span><span style=\"color: rgb(64, 64, 64);\">d921970^2</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">意思是</span><span style=\"color: rgb(64, 64, 64);\">“d921970&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的第二父提交</span><span style=\"color: rgb(64, 64, 64);\">”</span><span style=\"color: rgb(64, 64, 64);\">。这种语法只在合并提交时有用，因为合并提交可能有多个父提交。第一父提交是你合并时所在分支，而第二父提交是你所合并的分支：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git show d921970^</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit 1c002dd4b536e7479fe34593e72e6c6c1819e53b</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: Scott Chacon &lt;schacon@gmail.com&gt;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Thu Dec 1114:58:32 2008 -0800</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; added someblame and merge stuff</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git show d921970^2</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit 35cfb2b795a55793d7cc56a6cc2060b4bb732548</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: Paul Hedderly &lt;paul+git@mjr.org&gt;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Wed Dec 1022:22:03 2008 +0000</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; Some rdocchanges</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">另外一个指明祖先提交的方法是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">~</span><span style=\"color: rgb(64, 64, 64);\">。这也是指向第一父提交，所以</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">HEAD~</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">HEAD^</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">是等价的。当你指定数字的时候就明显不一样了。</span><span style=\"color: rgb(64, 64, 64);\">HEAD~2</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">是指</span><span style=\"color: rgb(64, 64, 64);\">“</span><span style=\"color: rgb(64, 64, 64);\">第一父提交的第一父提交</span><span style=\"color: rgb(64, 64, 64);\">”</span><span style=\"color: rgb(64, 64, 64);\">，也就是</span><span style=\"color: rgb(64, 64, 64);\">“</span><span style=\"color: rgb(64, 64, 64);\">祖父提交</span><span style=\"color: rgb(64, 64, 64);\">”——</span><span style=\"color: rgb(64, 64, 64);\">它会根据你指定的次数检索第一父提交。例如，在上面列出的历史记录里面，</span><span style=\"color: rgb(64, 64, 64);\">HEAD~3</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会是</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git show HEAD~3</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit 1c3618887afb5fbcbea25b7c013f4e2114448b8d</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: Tom Preston-Werner &lt;tom@mojombo.com&gt;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Fri Nov 713:47:59 2008 -0500</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; ignore *.gem</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">也可以写成</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">HEAD^^^</span><span style=\"color: rgb(64, 64, 64);\">，同样是第一父提交的第一父提交的第一父提交：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git show HEAD^^^</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit 1c3618887afb5fbcbea25b7c013f4e2114448b8d</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: Tom Preston-Werner &lt;tom@mojombo.com&gt;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Fri Nov 713:47:59 2008 -0500</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; ignore *.gem</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">你也可以混合使用这些语法</span><span style=\"color: rgb(64, 64, 64);\">——</span><span style=\"color: rgb(64, 64, 64);\">你可以通过</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">HEAD~3^2</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">指明先前引用的第二父提交（假设它是一个合并提交）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">提交范围</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在你已经可以指明单次的提交，让我们来看看怎样指明一定范围的提交。这在你管理分支的时候尤显重要</span><span style=\"color: rgb(64, 64, 64);\">——</span><span style=\"color: rgb(64, 64, 64);\">如果你有很多分支，你可以指明范围来圈定一些问题的答案，比如：</span><span style=\"color: rgb(64, 64, 64);\">“</span><span style=\"color: rgb(64, 64, 64);\">这个分支上我有哪些工作还没合并到主分支的？</span><span style=\"color: rgb(64, 64, 64);\">”</span></span></p><p><br/></p>','0','2016-11-20 10:05:25') [ RunTime:0.1151s ]

[ 2016-11-20T22:05:26+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000714s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001359s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0048s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0015s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0005s ]

[ 2016-11-20T22:05:35+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000382s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000702s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0050s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T22:05:46+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000646s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001037s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0045s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0044s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0036s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 51  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('Git详解之七 自定义Git','87','51','<p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">自定义</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">到目前为止，我阐述了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">基本的运作机制和使用方式，介绍了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">提供的许多工具来帮助你简单且有效地使用它。</span><span style=\"color: rgb(64, 64, 64);\">在本章，我将会介绍</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的一些重要的配置方法和钩子机制以满足自定义的要求。通过这些工具，它会和你和公司或团队配合得天衣无缝。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">7.1&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">配置</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如第一章所言，用</span><span style=\"color: rgb(64, 64, 64);\">git config</span><span style=\"color: rgb(64, 64, 64);\">配置</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git</span><span style=\"color: rgb(64, 64, 64);\">，要做的第一件事就是设置名字和邮箱地址：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git config --global user.name &quot;John Doe&quot;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git config --global user.email johndoe@example.com</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">从现在开始，你会了解到一些类似以上但更为有趣的设置选项来自定义</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git</span><span style=\"color: rgb(64, 64, 64);\">。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">先过一遍第一章中提到的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">配置细节。</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">使用一系列的配置文件来存储你定义的偏好，它首先会查找</span><span style=\"color: rgb(64, 64, 64);\">/etc/gitconfig</span><span style=\"color: rgb(64, 64, 64);\">文件，该文件含有</span><span style=\"color: rgb(64, 64, 64);\">对系统上所有用户及他们所拥有的仓库都生效的配置值（译注：</span><span style=\"color: rgb(64, 64, 64);\">gitconfig</span><span style=\"color: rgb(64, 64, 64);\">是全局配置文件），</span><span style=\"color: rgb(64, 64, 64);\">如果传递</span><span style=\"color: rgb(64, 64, 64);\">--system</span><span style=\"color: rgb(64, 64, 64);\">选项给</span><span style=\"color: rgb(64, 64, 64);\">git config</span><span style=\"color: rgb(64, 64, 64);\">命令，</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会读写这个文件。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">接下来</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会查找每个用户的</span><span style=\"color: rgb(64, 64, 64);\">~/.gitconfig</span><span style=\"color: rgb(64, 64, 64);\">文件，你能传递</span><span style=\"color: rgb(64, 64, 64);\">--global</span><span style=\"color: rgb(64, 64, 64);\">选项让</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git</span><span style=\"color: rgb(64, 64, 64);\">读写该文件。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">最后</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会查找由用户定义的各个库中</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录下的配置文件（</span><span style=\"color: rgb(64, 64, 64);\">.git/config</span><span style=\"color: rgb(64, 64, 64);\">），该文件中的值只对属主库有效。</span><span style=\"color: rgb(64, 64, 64);\">以上阐述的三层配置从一般到特殊层层推进，如果定义的值有冲突，以后面层中定义的为准，例如：在</span><span style=\"color: rgb(64, 64, 64);\">.git/config</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">/etc/gitconfig</span><span style=\"color: rgb(64, 64, 64);\">的较量中，</span><span style=\"color: rgb(64, 64, 64);\">.git/config</span><span style=\"color: rgb(64, 64, 64);\">取得了胜利。虽然你也可以直接手动编辑这些配置文件，但是运行</span><span style=\"color: rgb(64, 64, 64);\">git config</span><span style=\"color: rgb(64, 64, 64);\">命令将会来得简单些。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">客户端基本配置</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">能够识别的配置项被分为了两大类：客户端和服务器端，其中大部分基于你个人工作偏好，属于客户端配置。尽管有数不尽的选项，但我只阐述</span><span style=\"color: rgb(64, 64, 64);\">其中经常使用或者会对你的工作流产生巨大影响的选项，如果你想观察你当前的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">能识别的选项列表，请运行</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git config --help</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">gitconfig</span><span style=\"color: rgb(64, 64, 64);\">的手册页（译注：以</span><span style=\"color: rgb(64, 64, 64);\">man</span><span style=\"color: rgb(64, 64, 64);\">命令的显示方式）非常细致地罗列了所有可用的配置项。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">core.editor</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git</span><span style=\"color: rgb(64, 64, 64);\">默认会调用你的环境变量</span><span style=\"color: rgb(64, 64, 64);\">editor</span><span style=\"color: rgb(64, 64, 64);\">定义的值作为文本编辑器，如果没有定义的话，会调用</span><span style=\"color: rgb(64, 64, 64);\">Vi</span><span style=\"color: rgb(64, 64, 64);\">来创建和编辑提交以及标签信息，</span><span style=\"color: rgb(64, 64, 64);\">你可以使用</span><span style=\"color: rgb(64, 64, 64);\">core.editor</span><span style=\"color: rgb(64, 64, 64);\">改变默认编辑器：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git config --global core.editor emacs</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在无论你的环境变量</span><span style=\"color: rgb(64, 64, 64);\">editor</span><span style=\"color: rgb(64, 64, 64);\">被定义成什么，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">都会调用</span><span style=\"color: rgb(64, 64, 64);\">Emacs</span><span style=\"color: rgb(64, 64, 64);\">编辑信息。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit.template</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果把此项指定为你系统上的一个文件，当你提交的时候，</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会默认使用该文件定义的内容。</span><span style=\"color: rgb(64, 64, 64);\">例如：你创建了一个模板文件</span><span style=\"color: rgb(64, 64, 64);\">$HOME/.gitmessage.txt</span><span style=\"color: rgb(64, 64, 64);\">，它看起来像这样：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">subject line</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">what happened</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">[ticket: X]</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">设置</span><span style=\"color: rgb(64, 64, 64);\">commit.template</span><span style=\"color: rgb(64, 64, 64);\">，当运行</span><span style=\"color: rgb(64, 64, 64);\">git commit</span><span style=\"color: rgb(64, 64, 64);\">时，</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会在你的编辑器中显示以上的内容，</span><span style=\"color: rgb(64, 64, 64);\">设置</span><span style=\"color: rgb(64, 64, 64);\">commit.template</span><span style=\"color: rgb(64, 64, 64);\">如下：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git config --global commit.template$HOME/.gitmessage.txt</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git commit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">然后当你提交时，在编辑器中显示的提交信息如下：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">subject line</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">what happened</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">[ticket: X]</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Please enter the commit message for your changes. Linesstarting</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># with &#39;#&#39; will be ignored, and an empty message abortsthe commit.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># On branch master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># Changes to be committed:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#&nbsp;&nbsp; (use &quot;gitreset HEAD &lt;file&gt;...&quot; to unstage)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"># modified:&nbsp;&nbsp;lib/test.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">~</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">~</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&quot;.git/COMMIT_EDITMSG&quot; 14L, 297C</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果你有特定的策略要运用在提交信息上，在系统上创建一个模板文件，设置</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">默认使用它，这样当提交时，你的策略每次都会被运用。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">core.pager</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">core.pager</span><span style=\"color: rgb(64, 64, 64);\">指定</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">运行诸如</span><span style=\"color: rgb(64, 64, 64);\">log</span><span style=\"color: rgb(64, 64, 64);\">、</span><span style=\"color: rgb(64, 64, 64);\">diff</span><span style=\"color: rgb(64, 64, 64);\">等所使用的分页器，你能设置成用</span><span style=\"color: rgb(64, 64, 64);\">more</span><span style=\"color: rgb(64, 64, 64);\">或者任何你喜欢的分页器（默认用的是</span><span style=\"color: rgb(64, 64, 64);\">less</span><span style=\"color: rgb(64, 64, 64);\">），</span><span style=\"color: rgb(64, 64, 64);\">当然你也可以什么都不用，设置空字符串：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git config --global core.pager &#39;&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">这样不管命令的输出量多少，都会在一页显示所有内容。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">user.signingkey</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果你要创建经签署的含附注的标签（正如第二章所述），那么把你的</span><span style=\"color: rgb(64, 64, 64);\">GPG</span><span style=\"color: rgb(64, 64, 64);\">签署密钥设置为配置项会更好，设置密钥</span><span style=\"color: rgb(64, 64, 64);\">ID</span><span style=\"color: rgb(64, 64, 64);\">如下：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git config --global user.signingkey &lt;gpg-key-id&gt;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在你能够签署标签，从而不必每次运行</span><span style=\"color: rgb(64, 64, 64);\">git tag</span><span style=\"color: rgb(64, 64, 64);\">命令时定义密钥：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git tag -s &lt;tag-name&gt;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">core.excludesfile</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">正如第二章所述，你能在项目库的</span><span style=\"color: rgb(64, 64, 64);\">.gitignore</span><span style=\"color: rgb(64, 64, 64);\">文件里头用模式来定义那些无需纳入</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">管理的文件，这样它们不会出现在未跟踪列表，</span><span style=\"color: rgb(64, 64, 64);\">也不会在你运行</span><span style=\"color: rgb(64, 64, 64);\">git add</span><span style=\"color: rgb(64, 64, 64);\">后被暂存。然而，如果你想用项目库之外的文件来定义那些需被忽略的文件的话，用</span><span style=\"color: rgb(64, 64, 64);\">core.excludesfile</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">通知</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">该文件所处的位置，文件内容和</span><span style=\"color: rgb(64, 64, 64);\">.gitignore</span><span style=\"color: rgb(64, 64, 64);\">类似。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">help.autocorrect</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">该配置项只在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git 1.6.1</span><span style=\"color: rgb(64, 64, 64);\">及以上版本有效，假如你在</span><span style=\"color: rgb(64, 64, 64);\">Git 1.6</span><span style=\"color: rgb(64, 64, 64);\">中错打了一条命令，会显示：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git com</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">git: &#39;com&#39; is not a git-command. See &#39;git --help&#39;.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Did you mean this?</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp; commit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果你把</span><span style=\"color: rgb(64, 64, 64);\">help.autocorrect</span><span style=\"color: rgb(64, 64, 64);\">设置成</span><span style=\"color: rgb(64, 64, 64);\">1</span><span style=\"color: rgb(64, 64, 64);\">（译注：启动自动修正），那么在只有一个命令被模糊匹配到的情况下，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会自动运行该命令。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git</span><span style=\"color: rgb(64, 64, 64);\">中的着色</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git</span><span style=\"color: rgb(64, 64, 64);\">能够为输出到你终端的内容着色，以便你可以凭直观进行快速、简单地分析，有许多选项能供你使用以符合你的偏好。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">color.ui</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git</span><span style=\"color: rgb(64, 64, 64);\">会按照你需要自动为大部分的输出加上颜色，你能明确地规定哪些需要着色以及怎样着色，设置</span><span style=\"color: rgb(64, 64, 64);\">color.ui</span><span style=\"color: rgb(64, 64, 64);\">为</span><span style=\"color: rgb(64, 64, 64);\">true</span><span style=\"color: rgb(64, 64, 64);\">来打开所有的默认终端着色。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git config --global color.ui true</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">设置好以后，当输出到终端时，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会为之加上颜色。其他的参数还有</span><span style=\"color: rgb(64, 64, 64);\">false</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">always</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">false</span><span style=\"color: rgb(64, 64, 64);\">意味着不为输出着色，而</span><span style=\"color: rgb(64, 64, 64);\">always</span><span style=\"color: rgb(64, 64, 64);\">则表明在任何情况下都要着色，即使</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令被重定向到文件或管道。</span><span style=\"color: rgb(64, 64, 64);\">Git 1.5.5</span><span style=\"color: rgb(64, 64, 64);\">版本引进了此项配置，如果你拥有的版本更老，你必须对颜色有关选项各自进行详细地设置。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">你会很少用到</span><span style=\"color: rgb(64, 64, 64);\">color.ui = always</span><span style=\"color: rgb(64, 64, 64);\">，在大多数情况下，如果你想在被重定向的输出中插入颜色码，你能传递</span><span style=\"color: rgb(64, 64, 64);\">--color</span><span style=\"color: rgb(64, 64, 64);\">标志给</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令来迫使它这么做，</span><span style=\"color: rgb(64, 64, 64);\">color.ui = true</span><span style=\"color: rgb(64, 64, 64);\">应该是你的首选。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">color.*</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">想要具体到哪些命令输出需要被着色以及怎样着色或者</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的版本很老，你就要用到和具体命令有关的颜色配置选项，它们都能被置为</span><span style=\"color: rgb(64, 64, 64);\">true</span><span style=\"color: rgb(64, 64, 64);\">、</span><span style=\"color: rgb(64, 64, 64);\">false</span><span style=\"color: rgb(64, 64, 64);\">或</span><span style=\"color: rgb(64, 64, 64);\">always</span><span style=\"color: rgb(64, 64, 64);\">：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">color.branch</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">color.diff</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">color.interactive</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">color.status</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">除此之外，以上每个选项都有子选项，可以被用来覆盖其父设置，以达到为输出的各个部分着色的目的。例如，让</span><span style=\"color: rgb(64, 64, 64);\">diff</span><span style=\"color: rgb(64, 64, 64);\">输出的改变信息以粗体、蓝色前景和黑色背景的形式显示：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git config --global color.diff.meta “blue black bold”</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">你能设置的颜色值如：</span><span style=\"color: rgb(64, 64, 64);\">normal</span><span style=\"color: rgb(64, 64, 64);\">、</span><span style=\"color: rgb(64, 64, 64);\">black</span><span style=\"color: rgb(64, 64, 64);\">、</span><span style=\"color: rgb(64, 64, 64);\">red</span><span style=\"color: rgb(64, 64, 64);\">、</span><span style=\"color: rgb(64, 64, 64);\">green</span><span style=\"color: rgb(64, 64, 64);\">、</span><span style=\"color: rgb(64, 64, 64);\">yellow</span><span style=\"color: rgb(64, 64, 64);\">、</span><span style=\"color: rgb(64, 64, 64);\">blue</span><span style=\"color: rgb(64, 64, 64);\">、</span><span style=\"color: rgb(64, 64, 64);\">magenta</span><span style=\"color: rgb(64, 64, 64);\">、</span><span style=\"color: rgb(64, 64, 64);\">cyan</span><span style=\"color: rgb(64, 64, 64);\">、</span><span style=\"color: rgb(64, 64, 64);\">white</span><span style=\"color: rgb(64, 64, 64);\">，正如以上例子设置的粗体属性，想要设置字体属性的话，可以选择如：</span><span style=\"color: rgb(64, 64, 64);\">bold</span><span style=\"color: rgb(64, 64, 64);\">、</span><span style=\"color: rgb(64, 64, 64);\">dim</span><span style=\"color: rgb(64, 64, 64);\">、</span><span style=\"color: rgb(64, 64, 64);\">ul</span><span style=\"color: rgb(64, 64, 64);\">、</span><span style=\"color: rgb(64, 64, 64);\">blink</span><span style=\"color: rgb(64, 64, 64);\">、</span><span style=\"color: rgb(64, 64, 64);\">reverse</span><span style=\"color: rgb(64, 64, 64);\">。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果你想配置子选项的话，可以参考</span><span style=\"color: rgb(64, 64, 64);\">git config</span><span style=\"color: rgb(64, 64, 64);\">帮助页。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">外部的合并与比较工具</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">虽然</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">自己实现了</span><span style=\"color: rgb(64, 64, 64);\">diff,</span><span style=\"color: rgb(64, 64, 64);\">而且到目前为止你一直在使用它，但你能够用一个外部的工具替代它，除此以外，你还能用一个图形化的工具来合并和解决冲突从而不必自己手动解决。有一个不错且免费的工具可以被用来做比较和合并工作，它就是</span><span style=\"color: rgb(64, 64, 64);\">P4Merge</span><span style=\"color: rgb(64, 64, 64);\">（译注：</span><span style=\"color: rgb(64, 64, 64);\">Perforce</span><span style=\"color: rgb(64, 64, 64);\">图形化合并工具），我会展示它的安装过程。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">P4Merge</span><span style=\"color: rgb(64, 64, 64);\">可以在所有主流平台上运行，现在开始大胆尝试吧。对于向你展示的例子，在</span><span style=\"color: rgb(64, 64, 64);\">Mac</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\"><a href=\"http://lib.csdn.net/base/linux\" class=\"replace_word\" title=\"Linux知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">Linux</a></span><span style=\"color: rgb(64, 64, 64);\">系统上，我会使用路径名，在</span><span style=\"color: rgb(64, 64, 64);\">Windows</span><span style=\"color: rgb(64, 64, 64);\">上，</span><span style=\"color: rgb(64, 64, 64);\">/usr/local/bin</span><span style=\"color: rgb(64, 64, 64);\">应该被改为你环境中的可执行路径。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">下载</span><span style=\"color: rgb(64, 64, 64);\">P4Merge</span><span style=\"color: rgb(64, 64, 64);\">：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">http://www.perforce.com/perforce/downloads/component.html</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">首先把你要运行的命令放入外部包装脚本中，我会使用</span><span style=\"color: rgb(64, 64, 64);\">Mac</span><span style=\"color: rgb(64, 64, 64);\">系统上的路径来指定该脚本的位置，在其他系统上，它应该被放置在二进制文件</span><span style=\"color: rgb(64, 64, 64);\">p4merge</span><span style=\"color: rgb(64, 64, 64);\">所在的目录中。创建一个</span><span style=\"color: rgb(64, 64, 64);\">merge</span><span style=\"color: rgb(64, 64, 64);\">包装脚本，名字叫作</span><span style=\"color: rgb(64, 64, 64);\">extMerge</span><span style=\"color: rgb(64, 64, 64);\">，让它带参数调用</span><span style=\"color: rgb(64, 64, 64);\">p4merge</span><span style=\"color: rgb(64, 64, 64);\">二进制文件：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ cat /usr/local/bin/extMerge</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#!/bin/sh</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">/Applications/p4merge.app/Contents/MacOS/p4merge $*</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">diff</span><span style=\"color: rgb(64, 64, 64);\">包装脚本首先确定传递过来</span><span style=\"color: rgb(64, 64, 64);\">7</span><span style=\"color: rgb(64, 64, 64);\">个参数，随后把其中</span><span style=\"color: rgb(64, 64, 64);\">2</span><span style=\"color: rgb(64, 64, 64);\">个传递给</span><span style=\"color: rgb(64, 64, 64);\">merge</span><span style=\"color: rgb(64, 64, 64);\">包装脚本，默认情况下，</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git</span><span style=\"color: rgb(64, 64, 64);\">传递以下参数给</span><span style=\"color: rgb(64, 64, 64);\">diff</span><span style=\"color: rgb(64, 64, 64);\">：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">path old-file old-hex old-mode new-file new-hex new-mode</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">由于你仅仅需要</span><span style=\"color: rgb(64, 64, 64);\">old-file</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">new-file</span><span style=\"color: rgb(64, 64, 64);\">参数，用</span><span style=\"color: rgb(64, 64, 64);\">diff</span><span style=\"color: rgb(64, 64, 64);\">包装脚本来传递它们吧。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ cat /usr/local/bin/extDiff</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#!/bin/sh</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">[ $# -eq 7 ] &amp;&amp; /usr/local/bin/extMerge&quot;$2&quot; &quot;$5&quot;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">确认这两个脚本是可执行的：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ sudo chmod +x /usr/local/bin/extMerge</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ sudo chmod +x /usr/local/bin/extDiff</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在来配置使用你自定义的比较和合并工具吧。这需要许多自定义设置：</span><span style=\"color: rgb(64, 64, 64);\">merge.tool</span><span style=\"color: rgb(64, 64, 64);\">通知</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">使用哪个合并工具；</span><span style=\"color: rgb(64, 64, 64);\">mergetool.*.cmd</span><span style=\"color: rgb(64, 64, 64);\">规定命令运行的方式；</span><span style=\"color: rgb(64, 64, 64);\">mergetool.trustExitCode</span><span style=\"color: rgb(64, 64, 64);\">会通知</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">程序的退出是否指示合并操作成功；</span><span style=\"color: rgb(64, 64, 64);\">diff.external</span><span style=\"color: rgb(64, 64, 64);\">通知</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">用什么命令做比较。因此，你能运行以下</span><span style=\"color: rgb(64, 64, 64);\">4</span><span style=\"color: rgb(64, 64, 64);\">条配置命令：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git config --global merge.tool extMerge</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git config --global mergetool.extMerge.cmd \\</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; &#39;extMerge&quot;$BASE&quot; &quot;$LOCAL&quot; &quot;$REMOTE&quot; &quot;$MERGED&quot;&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git config --global mergetool.trustExitCode false</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git config --global diff.external extDiff</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">或者直接编辑</span><span style=\"color: rgb(64, 64, 64);\">~/.gitconfig</span><span style=\"color: rgb(64, 64, 64);\">文件如下：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">[merge]</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; tool = extMerge</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">[mergetool &quot;extMerge&quot;]</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; cmd = extMerge&quot;$BASE&quot; &quot;$LOCAL&quot; &quot;$REMOTE&quot; &quot;$MERGED&quot;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; trustExitCode =false</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">[diff]</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; external =extDiff</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">设置完毕后，运行</span><span style=\"color: rgb(64, 64, 64);\">diff</span><span style=\"color: rgb(64, 64, 64);\">命令：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git diff 32d1776b1^ 32d1776b1</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">命令行居然没有发现</span><span style=\"color: rgb(64, 64, 64);\">diff</span><span style=\"color: rgb(64, 64, 64);\">命令的输出，其实，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">调用了刚刚设置的</span><span style=\"color: rgb(64, 64, 64);\">P4Merge</span><span style=\"color: rgb(64, 64, 64);\">，它看起来像图</span><span style=\"color: rgb(64, 64, 64);\">7-1</span><span style=\"color: rgb(64, 64, 64);\">这样：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\"><br/>Figure 7-1. P4Merge.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">当你设法合并两个分支，结果却有冲突时，运行</span><span style=\"color: rgb(64, 64, 64);\">git mergetool</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会调用</span><span style=\"color: rgb(64, 64, 64);\">P4Merge</span><span style=\"color: rgb(64, 64, 64);\">让你通过图形界面来解决冲突。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">设置包装脚本的好处是你能简单地改变</span><span style=\"color: rgb(64, 64, 64);\">diff</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">merge</span><span style=\"color: rgb(64, 64, 64);\">工具，例如把</span><span style=\"color: rgb(64, 64, 64);\">extDiff</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">extMerge</span><span style=\"color: rgb(64, 64, 64);\">改成</span><span style=\"color: rgb(64, 64, 64);\">KDiff3</span><span style=\"color: rgb(64, 64, 64);\">，要做的仅仅是编辑</span><span style=\"color: rgb(64, 64, 64);\">extMerge</span><span style=\"color: rgb(64, 64, 64);\">脚本文件：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ cat /usr/local/bin/extMerge</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#!/bin/sh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">/Applications/kdiff3.app/Contents/MacOS/kdiff3 $*</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会使用</span><span style=\"color: rgb(64, 64, 64);\">KDiff3</span><span style=\"color: rgb(64, 64, 64);\">来做比较、合并和解决冲突。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git</span><span style=\"color: rgb(64, 64, 64);\">预先设置了许多其他的合并和解决冲突的工具，而你不必设置</span><span style=\"color: rgb(64, 64, 64);\">cmd</span><span style=\"color: rgb(64, 64, 64);\">。可以把合并工具设置为：</span><span style=\"color: rgb(64, 64, 64);\">kdiff3</span><span style=\"color: rgb(64, 64, 64);\">、</span><span style=\"color: rgb(64, 64, 64);\">opendiff</span><span style=\"color: rgb(64, 64, 64);\">、</span><span style=\"color: rgb(64, 64, 64);\">tkdiff</span><span style=\"color: rgb(64, 64, 64);\">、</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;meld</span><span style=\"color: rgb(64, 64, 64);\">、</span><span style=\"color: rgb(64, 64, 64);\">xxdiff</span><span style=\"color: rgb(64, 64, 64);\">、</span><span style=\"color: rgb(64, 64, 64);\">emerge</span><span style=\"color: rgb(64, 64, 64);\">、</span><span style=\"color: rgb(64, 64, 64);\">vimdiff</span><span style=\"color: rgb(64, 64, 64);\">、</span><span style=\"color: rgb(64, 64, 64);\">gvimdiff</span><span style=\"color: rgb(64, 64, 64);\">。如果你不想用到</span><span style=\"color: rgb(64, 64, 64);\">KDiff3</span><span style=\"color: rgb(64, 64, 64);\">的所有功能，只是想用它来合并，那么</span><span style=\"color: rgb(64, 64, 64);\">kdiff3&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">正符合你的要求，运行：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git config --global merge.tool kdiff3</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果运行了以上命令，没有设置</span><span style=\"color: rgb(64, 64, 64);\">extMerge</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">extDiff</span><span style=\"color: rgb(64, 64, 64);\">文件，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会用</span><span style=\"color: rgb(64, 64, 64);\">KDiff3</span><span style=\"color: rgb(64, 64, 64);\">做合并，让通常内设的比较工具来做比较。</span></span></p><p><br/></p>','0','2016-11-20 10:05:46') [ RunTime:0.1072s ]

[ 2016-11-20T22:05:47+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000736s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001484s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0082s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0016s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0006s ]

[ 2016-11-20T22:05:55+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000441s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000831s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0040s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T22:06:08+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000397s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000725s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0043s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0041s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0056s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 51  [ RunTime:0.0003s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('Git详解之八 Git与其他系统','87','51','<p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">与其他系统</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">世界不是完美的。大多数时候，将所有接触到的项目全部转向</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">是不可能的。有时我们不得不为某个项目使用其他的<a href=\"http://lib.csdn.net/base/git\" class=\"replace_word\" title=\"Git知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">版本控制</a>系统（</span><span style=\"color: rgb(64, 64, 64);\">VCS, Version Control System&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">），其中比较常见的是</span><span style=\"color: rgb(64, 64, 64);\">Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">。你将在本章的第一部分学习使用</span><span style=\"color: rgb(64, 64, 64);\">git svn</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">附带的双向桥接工具。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">或许现在你已经在考虑将先前的项目转向</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">。本章的第二部分将介绍如何将项目迁移到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git</span><span style=\"color: rgb(64, 64, 64);\">：先介绍从</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的迁移，然后是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Perforce</span><span style=\"color: rgb(64, 64, 64);\">，最后介绍如何使用自定义的脚本进行非标准的导入。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">8.1&nbsp; Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">与</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">当前，大多数开发中的开源项目以及大量的商业项目都使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">来管理源码。作为最流行的开源版本控制系统，</span><span style=\"color: rgb(64, 64, 64);\">Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">已经存在了接近十年的时间。它在许多方面与</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;CVS&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">十分类似，后者是前者出现之前代码控制世界的霸主。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">最为重要的特性之一是名为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git svn</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">双向桥接工具。该工具把</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">变成了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">服务的客户端，从而让你在本地享受到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所有的功能，而后直接向</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">服务器推送内容，仿佛在本地使用了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion</span><span style=\"color: rgb(64, 64, 64);\">客户端。也就是说，在其他人忍受古董的同时，你可以在本地享受分支合并，使暂存区域，衍合以及</span><span style=\"color: rgb(64, 64, 64);\">单项挑拣等等。这是个让</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">偷偷潜入合作开发环境的好东西，在帮助你的开发同伴们提高效率的同时，它还能帮你劝说团队让整个项目框架转向对</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的支持。这个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">之桥是通向分布式版本控制系统（</span><span style=\"color: rgb(64, 64, 64);\">DVCS, Distributed VCS&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">）世界的神奇隧道。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">git svn</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">中所有</span><span style=\"color: rgb(64, 64, 64);\">Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">桥接命令的基础是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitsvn</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">。所有的命令都从它开始。相关的命令数目不少，你将通过几个简单的工作流程了解到其中常见的一些。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">值得警戒的是，在使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitsvn</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的时候，你实际是在与</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">交互，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">比它要高级复杂的多。尽管可以在本地随意的进行分支和合并，最好还是通过衍合保持线性的提交历史，尽量避免类似与远程</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库动态交互这样的操作。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">避免修改历史再重新推送的做法，也不要同时推送到并行的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库来试图与其他</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">用户合作。</span><span style=\"color: rgb(64, 64, 64);\">Subersion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">只能保存单一的线性提交历史，一不小心就会被搞糊涂。合作团队中同时有人用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SVN&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git</span><span style=\"color: rgb(64, 64, 64);\">，一定要确保所有人都使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SVN&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">服务来协作</span><span style=\"color: rgb(64, 64, 64);\">——</span><span style=\"color: rgb(64, 64, 64);\">这会让生活轻松很多。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">初始设定</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">为了展示功能，先要一个具有写权限的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SVN&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库。如果想尝试这个范例，你必须复制一份其中的<a href=\"http://lib.csdn.net/base/softwaretest\" class=\"replace_word\" title=\"软件测试知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">测试</a>仓库。比较简单的做法是使用一个名为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">svnsync</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的工具。较新的</span><span style=\"color: rgb(64, 64, 64);\">Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">版本中都带有该工具，它将数据编码为用于网络传输的格式。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">要尝试本例，先在本地新建一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ mkdir /tmp/test-svn</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ svnadmin create /tmp/test-svn</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">然后，允许所有用户修改</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;revprop ——&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">简单的做法是添加一个总是以</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;0&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">作为返回值的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;pre-revprop-change&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">脚本：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ cat /tmp/test-svn/hooks/pre-revprop-change</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">#!/bin/sh</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">exit 0;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ chmod +x /tmp/test-svn/hooks/pre-revprop-change</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在可以调用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">svnsyncinit</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">加目标仓库，再加源仓库的格式来把该项目同步到本地了：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ svnsync init file:///tmp/test-svnhttp://progit-example.googlecode.com/svn/</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">这将建立进行同步所需的属性。可以通过运行以下命令来克隆代码：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ svnsync sync file:///tmp/test-svn</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Committed revision 1.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Copied properties for revision 1.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Committed revision 2.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Copied properties for revision 2.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Committed revision 3.</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">...</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">别看这个操作只花掉几分钟，要是你想把源仓库复制到另一个远程仓库，而不是本地仓库，那将花掉接近一个小时，尽管项目中只有不到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;100&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">次的提交。</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">每次只复制一次修改，把它推送到另一个仓库里，然后周而复始</span><span style=\"color: rgb(64, 64, 64);\">——</span><span style=\"color: rgb(64, 64, 64);\">惊人的低效，但是我们别无选择。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">入门</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">有了可以写入的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库以后，就可以尝试一下典型的工作流程了。我们从</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git svn clone</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令开始，它会把整个</span><span style=\"color: rgb(64, 64, 64);\">Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库导入到一个本地的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库中。提醒一下，这里导入的是一个货真价实的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库，所以应该把下面的</span><span style=\"color: rgb(64, 64, 64);\">file:///tmp/test-svn</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">换成你所用的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;URL</span><span style=\"color: rgb(64, 64, 64);\">：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git svn clone file:///tmp/test-svn -T trunk -b branches-t tags</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Initialized empty Git repository in/Users/schacon/projects/testsvnsync/svn/.git/</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">r1 = b4e387bc68740b5af56c2a5faf4003ae42bd135c (trunk)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A&nbsp;&nbsp;&nbsp; m4/acx_pthread.m4</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A&nbsp;&nbsp;&nbsp; m4/stl_hash.m4</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">...</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">r75 = d1957f3b307922124eec6314e15bcda59e3d9610 (trunk)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Found possible branch point: file:///tmp/test-svn/trunk=&gt; \\</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;file:///tmp/test-svn /branches/my-calc-branch, 75</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Found branch parent: (my-calc-branch)d1957f3b307922124eec6314e15bcda59e3d9610</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Following parent with do_switch</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Successfully followed parent</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">r76 = 8624824ecc0badd73f40ea2f01fce51894189b01(my-calc-branch)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Checked out HEAD:</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;file:///tmp/test-svn/branches/my-calc-branchr76</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">这相当于针对所提供的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;URL&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">运行了两条命令</span><span style=\"color: rgb(64, 64, 64);\">——&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git svn init</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">加上</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitsvn fetch</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">。可能会花上一段时间。我们所用的测试项目仅仅包含</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;75&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">次提交并且它的代码量不算大，所以只有几分钟而已。不过，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仍然需要提取每一个版本，每次一个，再逐个提交。对于一个包含成百上千次提交的项目，花掉的时间则可能是几小时甚至数天。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">-Ttrunk -b branches -t tags</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">告诉</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">该</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion</span><span style=\"color: rgb(64, 64, 64);\">仓库遵循了基本的分支和标签命名法则。如果你的主干</span><span style=\"color: rgb(64, 64, 64);\">(</span><span style=\"color: rgb(64, 64, 64);\">译注：</span><span style=\"color: rgb(64, 64, 64);\">trunk</span><span style=\"color: rgb(64, 64, 64);\">，相当于非分布式版本控制里的</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">分支，代表开发的主线），分支或者标签以不同的方式命名，则应做出相应改变。由于该法则的常见性，可以使用</span><span style=\"color: rgb(64, 64, 64);\">-s</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">来代替整条命令，它意味着标准布局（</span><span style=\"color: rgb(64, 64, 64);\">s&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Standard layout&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的首字母），也就是前面选项的内容。下面的命令有相同的效果：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git svn clone file:///tmp/test-svn -s</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在，你有了一个有效的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库，包含着导入的分支和标签：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git branch -a</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">* master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; my-calc-branch</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; tags/2.0.2</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;tags/release-2.0.1</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;tags/release-2.0.2</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;tags/release-2.0.2rc1</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; trunk</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">值得注意的是，该工具分配命名空间时和远程引用的方式不尽相同。克隆普通的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库时，可以以</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">origin/[branch]</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的形式获取远程服务器上所有可用的分支</span><span style=\"color: rgb(64, 64, 64);\">——</span><span style=\"color: rgb(64, 64, 64);\">分配到远程服务的名称下。然而</span><span style=\"color: rgb(64, 64, 64);\">git svn</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">假定不存在多个远程服务器，所以把所有指向远程服务的引用不加区分的保存下来。可以用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">探测命令</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">show-ref</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">来查看所有引用的全名。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git show-ref</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">1cbd4904d9982f386d87f88fce1c24ad7c0f0471refs/heads/master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">aee1ecc26318164f355a883f5d99cff0c852d3c4refs/remotes/my-calc-branch</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">03d09b0e2aad427e34a6d50ff147128e76c0e0f5refs/remotes/tags/2.0.2</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">50d02cc0adc9da4319eeba0900430ba219b9c376refs/remotes/tags/release-2.0.1</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">4caaa711a50c77879a91b8b90380060f672745cbrefs/remotes/tags/release-2.0.2</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">1c4cb508144c513ff1214c3488abe66dcb92916frefs/remotes/tags/release-2.0.2rc1</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">1cbd4904d9982f386d87f88fce1c24ad7c0f0471refs/remotes/trunk</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">而普通的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库应该是这个模样：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git show-ref</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">83e38c7a0af325a9722f2fdc56b10188806d83a1refs/heads/master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">3e15e38c198baac84223acfc6224bb8b99ff2281refs/remotes/gitserver/master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">0a30dd3b0c795b80212ae723640d4e5d48cabdffrefs/remotes/origin/master</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">25812380387fdd55f916652be4881c6f11600d6frefs/remotes/origin/testing</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">这里有两个远程服务器：一个名为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitserver</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">，具有一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">分支；另一个叫</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">origin</span><span style=\"color: rgb(64, 64, 64);\">，具有</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">master</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">testing</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">两个分支。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">注意本例中通过</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">gitsvn</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">导入的远程引用，（</span><span style=\"color: rgb(64, 64, 64);\">Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的</span><span style=\"color: rgb(64, 64, 64);\">)</span><span style=\"color: rgb(64, 64, 64);\">标签是当作远程分支添加的，而不是真正的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">标签。导入的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库仿佛是有一个带有不同分支的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tags&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">远程服务器。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">提交到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">有了可以开展工作的（本地）仓库以后，你可以开始对该项目做出贡献并向上游仓库提交内容了，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">这时相当于一个</span><span style=\"color: rgb(64, 64, 64);\">SVN&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">客户端。假如编辑了一个文件并进行提交，那么这次提交仅存在于本地的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">而非</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">服务器上。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git commit -am &#39;Adding git-svn instructions to theREADME&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">[master 97031e5] Adding git-svn instructions to theREADME</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;1 files changed, 1insertions(+), 1 deletions(-)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">接下来，可以将作出的修改推送到上游。值得注意的是，</span><span style=\"color: rgb(64, 64, 64);\">Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的使用流程也因此改变了</span><span style=\"color: rgb(64, 64, 64);\">——</span><span style=\"color: rgb(64, 64, 64);\">你可以在离线状态下进行多次提交然后一次性的推送到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的服务器上。向</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">服务器推送的命令是</span><span style=\"color: rgb(64, 64, 64);\">git svn dcommit</span><span style=\"color: rgb(64, 64, 64);\">：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git svn dcommit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Committing to file:///tmp/test-svn/trunk ...</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; README.txt</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Committed r79</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;M&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;README.txt</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">r79 = 938b1a547c2cc92033b74d32030e86468294a5c8 (trunk)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">No changes between current HEAD and refs/remotes/trunk</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Resetting to the latest refs/remotes/trunk</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">所有在原</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">数据基础上提交的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;commit&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会一一提交到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion</span><span style=\"color: rgb(64, 64, 64);\">，然后你本地</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;commit&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">将被重写，加入一个特别标识。这一步很重要，因为它意味着所有</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;commit&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">指都会发生变化。这也是同时使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">两种服务作为远程服务不是个好主意的原因之一。检视以下最后一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;commit</span><span style=\"color: rgb(64, 64, 64);\">，你会找到新添加的</span><span style=\"color: rgb(64, 64, 64);\">git-svn-id</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">（译注：即本段开头所说的特别标识）：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git log -1</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit 938b1a547c2cc92033b74d32030e86468294a5c8</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: schacon &lt;schacon@4c93b258-373f-11de-be05-5f7a86268029&gt;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Sat May 222:06:44 2009 +0000</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; Adding git-svninstructions to the README</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; git-svn-id:file:///tmp/test-svn/trunk@79 4c93b258-373f-11de-be05-5f7a86268029</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">注意看，原本以</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">97031e5</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">开头的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">校验值在提交完成以后变成了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">938b1a5</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">。如果既要向</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">远程服务器推送内容，又要推送到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Subversion</span><span style=\"color: rgb(64, 64, 64);\">远程服务器，则必须先向</span><span style=\"color: rgb(64, 64, 64);\">Subversion&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">推送（</span><span style=\"color: rgb(64, 64, 64);\">dcommit</span><span style=\"color: rgb(64, 64, 64);\">），因为该操作会改变所提交的数据内容。</span></span></p><p><br/></p>','0','2016-11-20 10:06:08') [ RunTime:0.1222s ]

[ 2016-11-20T22:06:09+08:00 ] ::1 /think_blog/Home/Member/personArticle
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000750s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001523s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0089s ]
SQL: SELECT a.id AS `article_id`,a.title AS `title`,a.content AS `content`,a.hitnum AS `hitnum`,a.create_time AS `create_time`,a.member_id AS `member_id`,a.article_type_id AS `article_type_id`,at.article_type_name AS `article_type_name` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87' LIMIT 0,10   [ RunTime:0.0015s ]
SQL: SELECT COUNT(a.id) AS `count` FROM article a LEFT JOIN article_type at ON a.article_type_id=at.id  WHERE a.member_id = '87'  [ RunTime:0.0005s ]

[ 2016-11-20T22:06:21+08:00 ] ::1 /think_blog/Home/ArticleType/getPersonArticleType
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000436s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000826s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0046s ]
SQL: SELECT `id`,`article_type_name` FROM article_type at WHERE at.member_id = '87'  [ RunTime:0.0003s ]

[ 2016-11-20T22:06:44+08:00 ] ::1 /think_blog/Home/Article/personAdd
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000382s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000700s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0043s ]
NOTIC: [2048] Declaration of Home\Model\MemberModel::isExistsMemberId() should be compatible with Home\Model\CommonModel::isExistsMemberId($member_id = '') D:\wamp\www\think_blog\Application\Home\Model\MemberModel.class.php 第 596 行.
SQL: SHOW COLUMNS FROM `member` [ RunTime:0.0042s ]
SQL: SELECT count(id) AS `count` FROM `member` WHERE `id` = 87  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `article_type` [ RunTime:0.0039s ]
SQL: SELECT count(id) AS `count` FROM `article_type` WHERE `id` = 50  [ RunTime:0.0002s ]
SQL: INSERT INTO `article` (`title`,`member_id`,`article_type_id`,`content`,`hitnum`,`create_time`) VALUES ('Git详解之九 Git内部原理','87','50','<p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">内部原理</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">不管你是从前面的章节直接跳到了本章，还是读完了其余各章一直到这，你都将在本章见识</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的内部工作原理和实现方式。我个人发现学习这些内容对于理解</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的用处和强大是非常重要的，不过也有人认为这些内容对于初学者来说可能难以理解且过于复杂。正因如此我把这部分内容放在最后一章，你在学习过程中可以先阅</span><span style=\"color: rgb(64, 64, 64);\">读这部分，也可以晚点阅读这部分，这完全取决于你自己。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">既然已经读到这了，就让我们开始吧。首先要弄明白一点，从根本上来讲</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">是一套内容寻址</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;(content-addressable)</span><span style=\"color: rgb(64, 64, 64);\">文件系统，在此之上提供了一个</span><span style=\"color: rgb(64, 64, 64);\">VCS&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">用户界面。马上你就会学到这意味着什么。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">早期的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git (</span><span style=\"color: rgb(64, 64, 64);\">主要是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;1.5&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">之前版本</span><span style=\"color: rgb(64, 64, 64);\">)&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的用户界面要比现在复杂得多，这是因为它更侧重于成为文件系统而不是一套更精致的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;VCS&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">。最近几年改进了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;UI&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">从而使它跟其他任何系统一样清晰易用。即便如此，还是经常会有一些陈腔滥调提到早期</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;UI&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">复杂又难学。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">内容寻址文件系统这一层相当酷，在本章中我会先讲解这部分。随后你会学到传输机制和最终要使用的各种库管理任务。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">9.1&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">底层命令</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;(Plumbing)&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和高层命令</span><span style=\"color: rgb(64, 64, 64);\">(Porcelain)</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">本书讲解了使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">checkout</span><span style=\"color: rgb(64, 64, 64);\">,&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">branch</span><span style=\"color: rgb(64, 64, 64);\">,&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">remote</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">等共约</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;30&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令。然而由于</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">一开始被设计成供</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;VCS&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">使用的工具集而不是一整套用户友好的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;VCS</span><span style=\"color: rgb(64, 64, 64);\">，它还包含了许多底层命令，这些命令用于以</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;UNIX&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">风格使用或由脚本调用。这些命令一般被称为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;“plumbing”&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令（底层命令），其他的更友好的命令则被称为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;“porcelain”&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令（高层命令）。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">本书前八章主要专门讨论高层命令。本章将主要讨论底层命令以理解</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的内部工作机制、演示</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">如何及为何要以这种方式工作。这些命令主要不是用来从命令行手工使用的，更多的是用来为其他工具和自定义脚本服务的。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">当你在一个新目录或已有目录内执行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git init</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">时，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会创建一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">.git</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录，几乎所有</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">存储和操作的内容都位于该目录下。如果你要备份或复制一个库，基本上将这一目录拷贝至其他地方就可以了。本章基本上都讨论该目录下的内容。该目录结构如下：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ ls</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">HEAD</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">branches/</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">config</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">description</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">hooks/</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">index</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">info/</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">objects/</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">refs/</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">该目录下有可能还有其他文件，但这是一个全新的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git init</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">生成的库，所以默认情况下这些就是你能看到的结构。新版本的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">不再使用</span><span style=\"color: rgb(64, 64, 64);\">branches</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录，</span><span style=\"color: rgb(64, 64, 64);\">description</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件仅供</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;GitWeb&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">程序使用，所以不用关心这些内容。</span><span style=\"color: rgb(64, 64, 64);\">config</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件包含了项目特有的配置选项，</span><span style=\"color: rgb(64, 64, 64);\">info</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录保存了一份不希望在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;.gitignore&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件中管理的忽略模式</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;(ignored patterns)&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的全局可执行文件。</span><span style=\"color: rgb(64, 64, 64);\">hooks</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录包住了第六章详细介绍了的客户端或服务端钩子脚本。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">另外还有四个重要的文件或目录：</span><span style=\"color: rgb(64, 64, 64);\">HEAD</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">及</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">index</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件，</span><span style=\"color: rgb(64, 64, 64);\">objects</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">及</span><span style=\"color: rgb(64, 64, 64);\">refs</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录。这些是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的核心部分。</span><span style=\"color: rgb(64, 64, 64);\">objects</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录存储所有数据内容，</span><span style=\"color: rgb(64, 64, 64);\">refs</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录存储指向数据</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;(</span><span style=\"color: rgb(64, 64, 64);\">分支</span><span style=\"color: rgb(64, 64, 64);\">)&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的提交对象的指针，</span><span style=\"color: rgb(64, 64, 64);\">HEAD</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件指向当前分支，</span><span style=\"color: rgb(64, 64, 64);\">index</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件保存了暂存区域信息。马上你将详细了解</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">是如何操纵这些内容的。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">9.2&nbsp; Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">是一套内容寻址文件系统。很不错。不过这是什么意思呢？这种说法的意思是，从内部来看，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">是简单的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;key-value&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">数据存储。它允许插入任意类型的内容，并会返回一个键值，通过该键值可以在任何时候再取出该内容。可以通过底层命令</span><span style=\"color: rgb(64, 64, 64);\">hash-object</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">来示范这点，传一些数据给该命令，它会将数据保存在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">.git</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录并返回表示这些数据的键值。首先初使化一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">仓库并确认</span><span style=\"color: rgb(64, 64, 64);\">objects</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录是空的：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ mkdir test</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ cd test</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git init</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Initialized empty Git repository in /tmp/test/.git/</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ find .git/objects</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">.git/objects</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">.git/objects/info</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">.git/objects/pack</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ find .git/objects -type f</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">初始化了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">objects</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录，同时在该目录下创建了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">pack</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">info</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">子目录，但是该目录下没有其他常规文件。我们往这个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\"><a href=\"http://lib.csdn.net/base/mysql\" class=\"replace_word\" title=\"MySQL知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">数据库</a>里存储一些文本：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ echo &#39;test content&#39; | git hash-object -w --stdin</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">d670460b4b4aece5915caf5c68d12f560a9fe3e4</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">参数</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">-w</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">指示</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">hash-object</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令存储</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;(</span><span style=\"color: rgb(64, 64, 64);\">数据</span><span style=\"color: rgb(64, 64, 64);\">)&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象，若不指定这个参数该命令仅仅返回键值。</span><span style=\"color: rgb(64, 64, 64);\">--stdin</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">指定从标准输入设备</span><span style=\"color: rgb(64, 64, 64);\">(stdin)&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">来读取内容，若不指定这个参数则需指定一个要存储的文件的路径。该命令输出长度为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;40&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">个字符的校验和。这是个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">哈希值</span><span style=\"color: rgb(64, 64, 64);\">──</span><span style=\"color: rgb(64, 64, 64);\">其值为要存储的数据加上你马上会了解到的一种头信息的校验和。现在可以查看到</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">已经存储了数据：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ find .git/objects -type f</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">可以在</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">objects</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录下看到一个文件。这便是</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">存储数据内容的方式</span><span style=\"color: rgb(64, 64, 64);\">──</span><span style=\"color: rgb(64, 64, 64);\">为每份内容生成一个文件，取得该内容与头信息的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">校验和，创建以该校验和前两个字符为名称的子目录，并以</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;(</span><span style=\"color: rgb(64, 64, 64);\">校验和</span><span style=\"color: rgb(64, 64, 64);\">)&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">剩下</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;38&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">个字符为文件命名</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;(</span><span style=\"color: rgb(64, 64, 64);\">保存至子目录下</span><span style=\"color: rgb(64, 64, 64);\">)</span><span style=\"color: rgb(64, 64, 64);\">。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">通过</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">cat-file</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令可以将数据内容取回。该命令是查看</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象的瑞士军刀。传入</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">-p</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">参数可以让该命令输出数据内容的类型：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">test content</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">可以往</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">中添加更多内容并取回了。也可以直接添加文件。比方说可以对一个文件进行简单的<a href=\"http://lib.csdn.net/base/git\" class=\"replace_word\" title=\"Git知识库\" target=\"_blank\" style=\"text-decoration: none; color: rgb(223, 52, 52); font-weight: bold;\">版本控制</a>。首先，创建一个新文件，并把文件内容存储到数据库中：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ echo &#39;version 1&#39; &gt; test.txt</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git hash-object -w test.txt</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">83baae61804e65cc73a7201a7252750c76066a30</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">接着往该文件中写入一些新内容并再次保存：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ echo &#39;version 2&#39; &gt; test.txt</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git hash-object -w test.txt</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">1f7a7a472abf3dd9643fd615f6da379c4acb3e3a</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">数据库中已经将文件的两个新版本连同一开始的内容保存下来了：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ find .git/objects -type f</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">.git/objects/83/baae61804e65cc73a7201a7252750c76066a30</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">再将文件恢复到第一个版本：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git cat-file -p83baae61804e65cc73a7201a7252750c76066a30 &gt; test.txt</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ cat test.txt</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">version 1</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">或恢复到第二个版本：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git cat-file -p1f7a7a472abf3dd9643fd615f6da379c4acb3e3a &gt; test.txt</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ cat test.txt</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">version 2</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">需要记住的是几个版本的文件</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">值可能与实际的值不同，其次，存储的并不是文件名而仅仅是文件内容。这种对象类型称为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;blob&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">。通过传递</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">值给</span><span style=\"color: rgb(64, 64, 64);\">cat-file -t</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令可以让</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">返回任何对象的类型：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git cat-file -t1f7a7a472abf3dd9643fd615f6da379c4acb3e3a</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">blob</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">tree (</span><span style=\"color: rgb(64, 64, 64);\">树</span><span style=\"color: rgb(64, 64, 64);\">)&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">接下去来看</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象，</span><span style=\"color: rgb(64, 64, 64);\">tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象可以存储文件名，同时也允许存储一组文件。</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">以一种类似</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;UNIX&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件系统但更简单的方式来存储内容。所有内容以</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">或</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;blob&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象存储，其中</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象对应于</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;UNIX&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">中的目录，</span><span style=\"color: rgb(64, 64, 64);\">blob&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象则大致对应于</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;inodes&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">或文件内容。一个单独的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象包含一条或多条</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">记录，每一条记录含有一个指向</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;blob&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">或子</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">指针，并附有该对象的权限模式</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;(mode)</span><span style=\"color: rgb(64, 64, 64);\">、类型和文件名信息。以</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;simplegit&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">项目为例，最新的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">可能是这个样子：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git cat-file -p master^{tree}</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">100644 blob a906cb2a4a904a152e80877d4088654daad0c859&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; README</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">100644 blob 8f94139338f9404f26296befa88755fc2598c289&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Rakefile</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">040000 tree 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lib</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">master^{tree}</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">表示</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">branch</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">分支上最新提交指向的</span><span style=\"color: rgb(64, 64, 64);\">tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象。请注意</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">lib</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">子目录并非一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;blob&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象，而是一个指向别一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象的指针：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git cat-file -p99f1a6d12cb4b6f19c8655fca46c3ecf317074e0</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">100644 blob 47c6340d6459e05787f644c2447d2595f5d3a54b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; simplegit.rb</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">从概念上来讲，</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">保存的数据如图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;9-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所示。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;9-1. Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象模型的简化版</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">你可以自己创建</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">。通常</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">根据你的暂存区域或</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;index&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">来创建并写入一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">。因此要创建一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象的话首先要通过将一些文件暂存从而创建一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;index&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">。可以使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;plumbing&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令</span><span style=\"color: rgb(64, 64, 64);\">update-index</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">为一个单独文件</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;── test.txt&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件的第一个版本</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;──&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">创建一个</span><span style=\"color: rgb(64, 64, 64);\">index&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">。通过该命令人为的将</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;test.txt&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件的首个版本加入到了一个新的暂存区域中。由于该文件原先并不在暂存区域中</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;(</span><span style=\"color: rgb(64, 64, 64);\">甚至就连暂存区域也还没被创建出来呢</span><span style=\"color: rgb(64, 64, 64);\">)&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">，必须传入</span><span style=\"color: rgb(64, 64, 64);\">--add</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">参数</span><span style=\"color: rgb(64, 64, 64);\">;</span><span style=\"color: rgb(64, 64, 64);\">由于要添加的文件并不在当前目录下而是在数据库中，必须传入</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">--cacheinfo</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">参数。同时指定了文件模式，</span><span style=\"color: rgb(64, 64, 64);\">SHA-1</span><span style=\"color: rgb(64, 64, 64);\">值和文件名：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git update-index --add --cacheinfo 100644 \\</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;83baae61804e65cc73a7201a7252750c76066a30 test.txt</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">在本例中，指定了文件模式为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">100644</span><span style=\"color: rgb(64, 64, 64);\">，表明这是一个普通文件。其他可用的模式有：</span><span style=\"color: rgb(64, 64, 64);\">100755</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">表示可执行文件，</span><span style=\"color: rgb(64, 64, 64);\">120000</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">表示符号链接。文件模式是从常规的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;UNIX&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件模式中参考来的，但是没有那么灵活</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;──&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">上述三种模式仅对</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">中的文件</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;(blobs)&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">有效</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;(</span><span style=\"color: rgb(64, 64, 64);\">虽然也有其他模式用于目录和子模块</span><span style=\"color: rgb(64, 64, 64);\">)</span><span style=\"color: rgb(64, 64, 64);\">。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">现在可以用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">write-tree</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令将暂存区域的内容写到一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象了。无需</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">-w</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">参数</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;──&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">如果目标</span><span style=\"color: rgb(64, 64, 64);\">tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">不存在，调用</span><span style=\"color: rgb(64, 64, 64);\">write-tree</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">会自动根据</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;index&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">状态创建一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git write-tree</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">d8329fc1cc938780ffdd9f94e0d364e0ea74f579</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git cat-file -pd8329fc1cc938780ffdd9f94e0d364e0ea74f579</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">100644 blob 83baae61804e65cc73a7201a7252750c76066a30&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; test.txt</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">可以这样验证这确实是一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git cat-file -td8329fc1cc938780ffdd9f94e0d364e0ea74f579</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">tree</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">再根据</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;test.txt&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的第二个版本以及一个新文件创建一个新</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ echo &#39;new file&#39; &gt; new.txt</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git update-index test.txt</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git update-index --add new.txt</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">这时暂存区域中包含了</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;test.txt&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的新版本及一个新文件</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;new.txt&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">。创建</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;(</span><span style=\"color: rgb(64, 64, 64);\">写</span><span style=\"color: rgb(64, 64, 64);\">)&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">该</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;(</span><span style=\"color: rgb(64, 64, 64);\">将暂存区域或</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;index&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">状态写入到一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象</span><span style=\"color: rgb(64, 64, 64);\">)</span><span style=\"color: rgb(64, 64, 64);\">，然后瞧瞧它的样子：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git write-tree</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">0155eb4229851634a0f03eb265b69f5a2d56f341</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git cat-file -p0155eb4229851634a0f03eb265b69f5a2d56f341</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">100644 blob fa49b077972391ad58037050f2a75f74e3671e92&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new.txt</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">100644 blob 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; test.txt</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">请注意该</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象包含了两个文件记录，且</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;test.txt&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">值是早先值的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;“</span><span style=\"color: rgb(64, 64, 64);\">第二版</span><span style=\"color: rgb(64, 64, 64);\">” (</span><span style=\"color: rgb(64, 64, 64);\">1f7a7a</span><span style=\"color: rgb(64, 64, 64);\">)</span><span style=\"color: rgb(64, 64, 64);\">。来点更有趣的，你将把第一个</span><span style=\"color: rgb(64, 64, 64);\">tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象作为一个子目录加进该</span><span style=\"color: rgb(64, 64, 64);\">tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">中。可以用</span><span style=\"color: rgb(64, 64, 64);\">read-tree</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令将</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象读到暂存区域中去。在这时，通过传一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">--prefix</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">参数给</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">read-tree</span><span style=\"color: rgb(64, 64, 64);\">，将一个已有的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象作为一个子</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">读到暂存区域中：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git read-tree --prefix=bakd8329fc1cc938780ffdd9f94e0d364e0ea74f579</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git write-tree</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">3c4e9cd789d88d8d89c1073707c3585e41b0e614</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git cat-file -p3c4e9cd789d88d8d89c1073707c3585e41b0e614</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">040000 tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bak</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">100644 blob fa49b077972391ad58037050f2a75f74e3671e92&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new.txt</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">100644 blob 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; test.txt</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果从刚写入的新</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象创建一个工作目录，将得到位于工作目录顶级的两个文件和一个名为</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">bak</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的子目录，该子目录包含了</span><span style=\"color: rgb(64, 64, 64);\">test.txt&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">文件的第一个版本。可以将</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">用来包含这些内容的数据想象成如图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;9-2&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所示的样子。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\"><br/></span><span style=\"color: rgb(64, 64, 64);\">图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;9-2.&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">当前</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">数据的内容结构</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">commit (</span><span style=\"color: rgb(64, 64, 64);\">提交</span><span style=\"color: rgb(64, 64, 64);\">)&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象</span></span></strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">你现在有三个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象，它们指向了你要跟踪的项目的不同快照，可是先前的问题依然存在：必须记往三个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">值以获得这些快照。你也没有关于谁、何时以及为何保存了这些快照的信息。</span><span style=\"color: rgb(64, 64, 64);\">commit&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象为你保存了这些基本信息。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">要创建一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;commit&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象，使用</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">commit-tree</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令，指定一个</span><span style=\"color: rgb(64, 64, 64);\">tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;SHA-1</span><span style=\"color: rgb(64, 64, 64);\">，如果有任何前继提交对象，也可以指定。从你写的第一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">开始：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ echo &#39;first commit&#39; | git commit-tree d8329f</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">fdf4fc3344e67ab068f836878b6c4951e3b15f3d</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">通过</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">cat-file</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">查看这个新</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;commit&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git cat-file -p fdf4fc3</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">author Scott Chacon</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp; &nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1243040974-0700</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">committer Scott Chacon</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1243040974-0700</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">first commit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">commit&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象有格式很简单：指明了该时间点项目快照的顶层树对象、作者</span><span style=\"color: rgb(64, 64, 64);\">/</span><span style=\"color: rgb(64, 64, 64);\">提交者信息（从</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">设理发店的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">user.name</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">user.email</span><span style=\"color: rgb(64, 64, 64);\">中获得</span><span style=\"color: rgb(64, 64, 64);\">)</span><span style=\"color: rgb(64, 64, 64);\">以及当前时间戳、一个空行，以及提交注释信息。</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">接着再写入另外两个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;commit&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象，每一个都指定其之前的那个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;commit&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ echo &#39;second commit&#39; | git commit-tree 0155eb -pfdf4fc3</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">cac0cab538b970a37ea1e769cbbde608743bc96d</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ echo &#39;third commit&#39;&nbsp;| git commit-tree 3c4e9c -p cac0cab</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">1a410efbd13591db07496601ebc7a059dd55cfe9</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">每一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;commit&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象都指向了你创建的树对象快照。出乎意料的是，现在已经有了真实的</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">历史了，所以如果运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git log</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令并指定最后那个</span><span style=\"color: rgb(64, 64, 64);\">commit&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象的</span><span style=\"color: rgb(64, 64, 64);\">SHA-1&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">便可以查看历史：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ git log --stat 1a410e</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit 1a410efbd13591db07496601ebc7a059dd55cfe9</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: Scott Chacon</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp; &nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Fri May 2218:15:24 2009 -0700</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; third commit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;bak/test.txt|&nbsp;&nbsp;&nbsp; 1 +</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;1 files changed, 1insertions(+), 0 deletions(-)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit cac0cab538b970a37ea1e769cbbde608743bc96d</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: Scott Chacon</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; &nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Fri May 2218:14:29 2009 -0700</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; second commit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;new.txt&nbsp; |&nbsp;&nbsp;&nbsp; 1+</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;test.txt |&nbsp;&nbsp;&nbsp; 2 +-</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;2 files changed, 2insertions(+), 1 deletions(-)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">commit fdf4fc3344e67ab068f836878b6c4951e3b15f3d</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Author: Scott Chacon</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">Date:&nbsp;&nbsp; Fri May 2218:09:34 2009 -0700</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp; first commit</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;test.txt |&nbsp;&nbsp;&nbsp; 1 +</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;1 files changed, 1insertions(+), 0 deletions(-)</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">真棒。你刚刚通过使用低级操作而不是那些普通命令创建了一个</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">历史。这基本上就是运行</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git add</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">和</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">git commit</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">命令时</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">进行的工作</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;&nbsp;&nbsp;&nbsp;──</span><span style=\"color: rgb(64, 64, 64);\">保存修改了的文件的</span><span style=\"color: rgb(64, 64, 64);\">blob</span><span style=\"color: rgb(64, 64, 64);\">，更新索引，创建</span><span style=\"color: rgb(64, 64, 64);\">tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象，最后创建</span><span style=\"color: rgb(64, 64, 64);\">commit&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象，这些</span><span style=\"color: rgb(64, 64, 64);\">commit&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象指向了顶层</span><span style=\"color: rgb(64, 64, 64);\">tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象以及先前的</span><span style=\"color: rgb(64, 64, 64);\">commit&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象。这三类</span><span style=\"color: rgb(64, 64, 64);\">Git&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">对象</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;── blob</span><span style=\"color: rgb(64, 64, 64);\">，</span><span style=\"color: rgb(64, 64, 64);\">tree&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">以及</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;tree ──&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">都各自以文件的方式保存在</span><span style=\"color: rgb(64, 64, 64);\">.git/objects</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">目录下。以下所列是目前为止样例中的所有对象，每个对象后面的注释里标明了它们保存的内容：</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">$ find .git/objects -type f</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">.git/objects/01/55eb4229851634a0f03eb265b69f5a2d56f341 #tree 2</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">.git/objects/1a/410efbd13591db07496601ebc7a059dd55cfe9 #commit 3</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a #test.txt v2</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">.git/objects/3c/4e9cd789d88d8d89c1073707c3585e41b0e614 #tree 3</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">.git/objects/83/baae61804e65cc73a7201a7252750c76066a30 #test.txt v1</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">.git/objects/ca/c0cab538b970a37ea1e769cbbde608743bc96d #commit 2</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 #&#39;test content&#39;</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">.git/objects/d8/329fc1cc938780ffdd9f94e0d364e0ea74f579 #tree 1</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">.git/objects/fa/49b077972391ad58037050f2a75f74e3671e92 #new.txt</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><span style=\"color: rgb(64, 64, 64);\"><span style=\"font-size: 18px;\">.git/objects/fd/f4fc3344e67ab068f836878b6c4951e3b15f3d #commit 1</span></span></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; color: rgb(85, 85, 85); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 18px;\"><span style=\"color: rgb(64, 64, 64);\">如果你按照以上描述进行了操作，可以得到如图</span><span style=\"color: rgb(64, 64, 64);\">&nbsp;9-3&nbsp;</span><span style=\"color: rgb(64, 64, 64);\">所示的对象图。</span></span></p><p><br/></p>','0','2016-11-20 10:06:44') [ RunTime:0.1175s ]

